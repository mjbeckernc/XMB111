1    /* region: SAS session initialization */
2    /*----------------------------------------------------------------------
3    /
4    / SASStudio initialization file for SAS
5    /
6    *----------------------------------------------------------------------*/
7    /* Get the Git version */
8    DATA _NULL_;
9      GITVERSION = GIT_VERSION();
10     CALL SYMPUT('_GITVERSION', GITVERSION);
11   RUN;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      10:30   
NOTE: Libgit2 version 1.3.0
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

12   
13   
14   %MACRO resolveHomeDirectory;
15   	%GLOBAL _USERHOME;
16   	%LOCAL _HOMEVAR;
17   
2                                                          The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

18   	%IF (&SYSSCP=WIN) %THEN
19   		%DO;
20   			%LET _HOMEVAR=USERPROFILE;
21   		%END;
22   	%ELSE
23   		%DO;
24   			%LET _HOMEVAR=HOME;
25   		%END;
26   
27   	%LET _USERHOME= %SYSFUNC(SYSGET(&_HOMEVAR));
28   
29   %MEND;
30   
31   %resolveHomeDirectory;
32   
33   %macro web_open_file(name,type);
34   %global _DATAOUT_NAME;
35   %global _DATAOUT_MIME_TYPE;
36   %let _DATAOUT_NAME=&name;
37   %let _DATAOUT_MIME_TYPE=&type;
38   %mend;
39   
40   %macro web_open_table(table);
41   %global _DATAOUT_TABLE;
42   %if %length(&_dataout_table)=0 %then %let _DATAOUT_TABLE=&table;
43   %else %let _DATAOUT_TABLE=&_DATAOUT_TABLE,&table;
44   %mend;
45   
46   %macro web_open_url(url);
47   %global _DATAOUT_URL;
48   %let _DATAOUT_URL=&url;
49   %mend;
50   
51   %macro sgdesign();
52   %put ERROR: SGDesigner macro can not be invoked from SAS Studio.;
53   %mend;
54   
55   %macro sgedit();
56   %put ERROR: SGEdit macro can not be invoked from SAS Studio.;
57   %mend;
58   
59   %macro web_list_entries(catalog,type);
60   
61   %let typearg=;
62   %let type=%upcase(&type);
63   %if &type^=_ALL_ and &type^=_all_ %then %let typearg= entrytype=&type;
64   
65   proc catalog catalog=&catalog &typearg;
66   contents;
67   title "Catalog Entries in &catalog";
68   run;
69   quit;
70   
71   %mend;
72   
73   %macro web_list_catalogs(library);
74       %let library=%upcase(&library);
75       proc sql ;
3                                                          The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

76           create table work.catalogs as select memname as Catalog, memtype as
77               Type, engine as Engine from sashelp.vmember where
78               libname="&library" and memtype="CATALOG";
79           run;
80           quit;
81           title "Catalogs in &library";
82   
83       proc print data=work.catalogs;
84       run;
85   %mend;
86   
87   %macro web_replay_grseg(catalog,entry);
88   proc greplay nofs igout=&catalog;
89   replay &entry;
90   run;
91   %mend;
92   
93   %macro sasstudio_get_zos_ds_info(DSN);
94   
95   OPTIONS FILESYSTEM=MVS;
96   
97   DATA work._sasstudio_dataset_info_;
98   
99     LENGTH XDSN $32000;
100    XDSN=ZDSLIST('CATLG', &DSN, XVOLS, '');
101  
102    LENGTH XNUM 8;
103    XNUM=ZDSNUM(XDSN);
104    LENGTH XIDNM $4096;
105    LENGTH XATTR $4096;
106    LENGTH XATTRC $72;
107    LENGTH XATTRN 8;
108    LENGTH attributeType $10;
109  
110    DO I=1 to XNUM;
111      XIDNM=ZDSIDNM(XDSN, I);
112      XATTR=ZDSATTR(XIDNM, 'ALL');
113      XATTRN=ZDSXATT(XATTR);
114  
115      do j=1 to xattrn;
116       XATTRC=ZDSYATT(XATTR, j);
117       blank_pos = index(xattrc," ");
118             key = substr(xattrc, blank_pos,99);
119             val= substr(xattrc,1,blank_pos);
120             pos = index(key, 'FILE ATTRIBUTES');
121             if (pos > 0) then do;
122                attributeType = 'FILE';
123             end;
124             else do;
125                 pos = index(key, 'VOLUME ATTRIBUTES');
126                 if (pos > 0) then do;
127                    attributeType = 'VOLUME';
128                 end;
129                 else do;
130                     pos = index(key, 'MIGRATED DATA SET ATTRIBUTES');
131                     if (pos > 0) then do;
132                        attributeType = 'MIGRATED';
133                     end;
4                                                          The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

134                     else do;
135                        pos = index(key, '*****');
136                     end;
137                 end;
138             end;
139             if (pos = 0) then do;
140                output;
141             end;
142             keep key val attributeType;
143      end;
144    END;
145   RUN;
146  %mend sasstudio_get_zos_ds_info;
147  
148  %macro show_zos_dataset_attributes(dsn);
149     %sasstudio_get_zos_ds_info(&dsn);
150  
151     data work._sasstudio_dataset_info_ds_;
152         set work._sasstudio_dataset_info_;
153  
154         if strip(val)='.' then do;
155             val='***NONE***';
156         end;
157  
158         position = index(attributeType, 'FILE');
159         if position > 0 then do;
160             output;
161         end;
162         drop position attributeType;
163     run;
164  
165     data work._sasstudio_dataset_info_vol_;
166         set work._sasstudio_dataset_info_;
167  
168         if strip(val)='.' then do;
169             val='***NONE***';
170         end;
171  
172         position = index(attributeType, 'VOLUME');
173         if position > 0 then do;
174             output;
175         end;
176         drop position attributeType;
177     run;
178  
179      proc print data=work._sasstudio_dataset_info_ds_ noobs label;
180      LABEL key='Dataset Attribute'  val='00'x;
181         title1 &dsn;
182      run;
183  
184      proc print data=work._sasstudio_dataset_info_vol_ noobs label;
185          title1;
186          LABEL key='Volume Attribute'  val='00'x;
187      run;
188  
189      proc delete data=work._sasstudio_dataset_info_
190      work._sasstudio_dataset_info_ds_
191      work._sasstudio_dataset_info_vol_;
5                                                          The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

192  
193  %mend;
194  
195  %macro validCasEnvironment( sessionName=, createSession=, returnCode=RC);
196  
197  /* This section is just to give information about the CAS connection */
198  %let CASHOST = %SYSFUNC(GETOPTION(CASHOST));
199  
200  %if (%LENGTH(&CASHOST)=0) %then %do;
201      %put CASHOST is not set;
202  %end; %else %do;
203      %put CASHOST is &CASHOST;
204  %end;
205  
206  %let CASPORT = %SYSFUNC(GETOPTION(CASPORT));
207  
208  %if (&CASPORT=0) %then %do;
209      %put CASPORT is not set;
210  %end; %else %do;
211      %put CASPORT is &CASPORT;
212  %end;
213  
214  %let CASHOST = %SYSFUNC(GETOPTION(_CASHOST_));
215  %if (%LENGTH(&CASHOST)=0) %then %do;
216      %put _CASHOST_ is not set;
217  %end; %else %do;
218      %put _CASHOST_ is &CASHOST;
219  %end;
220  
221  %let CASPORT = %SYSFUNC(GETOPTION(_CASPORT_));
222  
223  %if (%LENGTH(&CASPORT)=0) %then %do;
224      %put _CASPORT_ is not set;
225  %end; %else %do;
226      %put _CASPORT_ is &CASPORT;
227  %end;
228  
229  %let CASUSER = %SYSFUNC(GETOPTION(CASUSER));
230  
231  %if (%LENGTH(&CASUSER) = 0) %then %do;
232      %put CASUSER is not set;
233  %end; %else %do;
234      %put CASUSER is &CASUSER;
235  %end;
236  
237  
238  %if &sessionName = %then %do;
239      %let DEFAULTSESS= %SYSFUNC(GETOPTION(SESSREF));
240      %let SESSIONFOUND = %SYSFUNC(SESSFOUND(&DEFAULTSESS));
241      %if (&SESSIONFOUND = 0) %then %do;
242         %put Default session &DEFAULTSESS is not available.;
243         %let &returnCode=0;
244      %end;
245      %else %do;
246         %put Default session &DEFAULTSESS is available.;
247         %let &returnCode=3;
248      %end;
249  %end; %else %do;                                                /* Session name was specified */
6                                                          The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

250      %if &createSession = %then %do;                             /* createSession not specified */
251         %let SESSIONFOUND = %SYSFUNC(SESSFOUND(&sessionName));   /* Default to false (don't create) */
252         %if (&SESSIONFOUND = 0) %then %do;
253            %put Session &sessionName is not available.;
254            %let &returnCode=0;
255         %end;
256         %else %do;
257            %put Session &sessionName already exists.;
258            %let &returnCode=2;
259         %end;
260      %end;
261      %else %do;
262         %let SESSIONFOUND = %SYSFUNC(SESSFOUND(&sessionName));  /* Does session already exist? */
263         %if (&createSession = false) %then %do;                 /* User does not want to create it. */
264            %put createSession is false;
265            %if (&SESSIONFOUND = 0) %then %do;
266               %put Session &sessionName is not available.;      /* Tell user it does not exist. */
267               %let &returnCode=0;
268            %end;
269            %else %do;
270               %put Session &sessionName exists;
271               %let &returnCode = 2;
272            %end;
273         %end;
274         %else %do;
275           %put createSession is true;
276           %if (&SESSIONFOUND = 0) %then %do;                    /* Session does not exist, so create it */
277               cas &sessionName;
278               %let SESSIONFOUND = %SYSFUNC(SESSFOUND(&sessionName));
279               %if (&SESSIONFOUND = 0) %then %do;               /* Session created successfully */
280                   %let &returnCode=1;
281               %end;
282               %else %do;
283                   %let &returnCode=4;                          /* Session creation failed. */
284               %end;
285           %end;
286           %else %do;                                           /* Session already exists, so user cannot create it */
287               %put Session &sessionName already exists;
288               %let &returnCode=2;
289           %end;
290         %end;
291      %end;
292  %end;
293  
294  
295  %mend validCasEnvironment;
296  
297  /* This macro is used by code generated for Query nodes in an EG Process flow *
298  /* Conditionally delete set of tables or views, if they exists          */
299  /* If the member does not exist, then no action is performed   */
300  %macro _eg_conditional_dropds /parmbuff;
301  
302      %local num;
303      %local stepneeded;
304      %local stepstarted;
305      %local dsname;
306      %local name;
307  
7                                                          The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

308      %let num=1;
309      /* flags to determine whether a PROC SQL step is needed */
310      /* or even started yet                                  */
311      %let stepneeded=0;
312      %let stepstarted=0;
313      %let dsname= %qscan(&syspbuff,&num,',()');
314      %do %while(&dsname ne);
315          %let name = %sysfunc(left(&dsname));
316          %if %qsysfunc(exist(&name)) %then %do;
317              %let stepneeded=1;
318              %if (&stepstarted eq 0) %then %do;
319                  proc sql;
320                  %let stepstarted=1;
321  
322              %end;
323                  drop table &name;
324          %end;
325  
326          %if %sysfunc(exist(&name,view)) %then %do;
327              %let stepneeded=1;
328              %if (&stepstarted eq 0) %then %do;
329                  proc sql;
330                  %let stepstarted=1;
331              %end;
332                  drop view &name;
333          %end;
334          %let num=%eval(&num+1);
335          %let dsname=%qscan(&syspbuff,&num,',()');
336      %end;
337      %if &stepstarted %then %do;
338          quit;
339      %end;
340  %mend _eg_conditional_dropds;
341  
342  /* Given a fileref and a memname and memtype, we attempt to open the
343  member of the directory (catalog or file system directory). We
344  set &member_found to 1 if it can be opened, 0 if not. */
345  %macro _entry_exists(fileref,memname,memtype);
346  %global _macro_found;
347  %let _macro_found = 0;
348  data _null_;
349  *-----open the directory and proceed if it can be opened-----*;
350  handle = dopen("&fileref.");
351  if handle ne 0;
352  *-----open the member and set the macro variable based on result-----*;
353  mem_handle = mopen(handle,"&memname..&memtype.",'i');
354  call symputx('_macro_found',mem_handle ne 0);
355  *-----close the member if it were opened successfully-----*;
356  if mem_handle then rc = fclose(mem_handle);
357  *-----close the directory-----*;
358  rc = dclose(handle);
359  run;
360  %mend _entry_exists;
361  
362  /* Given a macro name, we determine if it has already been
363  compiled. We first look in work.sasmacr, then in the sasmacr
364  referenced by sasmstore (if given) and then in work.sasmacX. */
365  %macro _compiled_macro_exists(macro_name);
8                                                          The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

366  options nonotes;
367  %global _macro_found;
368  *-----try work.sasmacr first to see if the compiled macro is there-----*;
369  filename maclib catalog "work.sasmacr";
370  %_entry_exists(maclib,&macro_name.,macro);
371  filename maclib clear;
372  %if &_macro_found %then %goto done;
373  *-----try sasmacr referenced by sasmstore if it were specified-----*;
374  %let sasmstore_option = %sysfunc(getoption(sasmstore));
375  %if %sysfunc(getoption(mstored))=MSTORED and %length(&sasmstore_option) > 0 %then %do;
376  filename maclib catalog "&sasmstore_option..sasmacr";
377  %_entry_exists(maclib,&macro_name.,macro);
378  %end;
379  
380  %do i=1 %to 9;
381  %if &_macro_found %then %goto done;
382  filename maclib catalog "work.sasmac&i.";
383  %_entry_exists(maclib,&macro_name.,macro);
384  filename maclib clear;
385  %end;
386  
387  %done: options notes;
388  %mend _compiled_macro_exists;
389  
390  %macro studio_cas_start;
391  
392  %global _macro_found;
393  %global syscasinit;
394  
395  %let syscasinit=0;
396  
397  %_compiled_macro_exists(studio_cas_init);
398  
399  %if &_macro_found %then %do;
400  
401  %let syscasinit=1;
402  
403  %studio_cas_init;
404  
405  %end;
406  %mend studio_cas_start;
407  
408  %macro studio_hide_wrapper;
409      %global _studionotes;
410      %global _studiosource;
411      %global _studiostimer;
412  
413      %if &_studionotes = %then %do;
414          %let _studionotes=%sysfunc(getoption(notes));
415      %end;
416      options nonotes;
417  
418      %if &_studiosource = %then %do;
419          %let _studiosource=%sysfunc(getoption(source));
420      %end;
421      options nosource;
422  
423      %if &_studiostimer = %then %do;
9                                                          The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

424          %let _studiostimer=%sysfunc(getoption(stimer));
425      %end;
426      options nostimer;
427  %mend studio_hide_wrapper;
428  
429  %macro studio_show_wrapper;
430      %global _studionotes;
431      %global _studiosource;
432      %global _studiostimer;
433  
434      %if &_studionotes = %then %do;
435          %let _studionotes=%sysfunc(getoption(notes));
436      %end;
437      options notes;
438  
439      %if &_studiosource = %then %do;
440          %let _studiosource=%sysfunc(getoption(source));
441      %end;
442      options source;
443  
444      %if &_studiostimer = %then %do;
445          %let _studiostimer=%sysfunc(getoption(stimer));
446      %end;
447      options stimer;
448  %mend studio_show_wrapper;
449  
450  %macro studio_show_only_notes_wrapper;
451      %global _studionotes;
452      %global _studiosource;
453      %global _studiostimer;
454  
455      %if &_studionotes = %then %do;
456          %let _studionotes=%sysfunc(getoption(notes));
457      %end;
458      options notes;
459  
460      %if &_studiosource = %then %do;
461          %let _studiosource=%sysfunc(getoption(source));
462      %end;
463      options nosource;
464  
465      %if &_studiostimer = %then %do;
466          %let _studiostimer=%sysfunc(getoption(stimer));
467      %end;
468      options nostimer;
469  %mend studio_show_only_notes_wrapper;
470  
471  
472  %macro studio_restore_wrapper;
473      %global _studionotes;
474      %global _studiosource;
475      %global _studiostimer;
476  
477      options &_studionotes;
478      options &_studiosource;
479      options &_studiostimer;
480  
481      /* Clear out values so we know they have been restored */
10                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

482      %let _studionotes=;
483      %let _studiosource=;
484      %let _studiostimer=;
485  %mend studio_restore_wrapper;
486  
487  %macro studio_setup_locale(requestedLocale);
488      %let validlocale=%SYSFUNC(getpxlocale(&requestedlocale));
489      %let validlocale=%trim(&validlocale);
490  
491      %if %length(&validlocale) > 0 %then
492          %do;
493              options locale=&validlocale DFLANG=LOCALE;
494          %end;
495      %else
496          %do;
497              options locale=en_US DFLANG=LOCALE;
498          %end;
499  %mend;
500  
501  /* This macro initializes a base results path for a submission, and sets up a
502     macro variable to access it. */
503  %macro studio_results_directory;
504      %global _results_prefix_;
505      %let _results_prefix_=!COMPUTESERVER_TMP_PATH/results-&SYS_COMPUTE_JOB_ID;
506  %mend;
507  
508  /*
509  This macro initializes the filename and type for any custom output created.
510  */
511  %macro studio_initialize_custom_output;
512      %global _dataout_name _dataout_mime_type;
513      %let _dataout_name=;
514      %let _dataout_mime_type=;
515  %mend;
516  
517  /*
518  This macro captures the filename and type for any custom output created.
519  */
520  %macro studio_capture_custom_output;
521      %if "&_dataout_name" ne "" and "&_dataout_mime_type" ne "" %then
522          %do;
523              filename _datname "!COMPUTESERVER_TMP_PATH/results-&SYS_COMPUTE_JOB_ID..datname";
524              filename _dattype "!COMPUTESERVER_TMP_PATH/results-&SYS_COMPUTE_JOB_ID..dattype";
525  
526              data _null_;
527                  file _datname;
528                  put "&_dataout_name";
529              run;
530  
531              data _null_;
532                  file _dattype;
533                  put "&_dataout_mime_type";
534              run;
535          %end;
536  %mend;
537  
538  /*
539  This macro captures a log for a background job to the specified destination
11                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

540  alongside any HTML results.
541  */
542  %macro studio_capture_background_log;
543  
544      /*
545      Capture original value for syntaxcheck, and set it to nosyntaxcheck so we
546      can capture the log even if there are errors above
547      */
548      %let _studiosyntaxcheck=%sysfunc(getoption(syntaxcheck));
549      options nosyntaxcheck;
550  
551      /*
552      Get base URL for compute, and download the log to the _logout fileref.
553      */
554      %let _url_template=%sysget(SAS_URL_SERVICE_TEMPLATE);
555      %let _url_base=%sysfunc(tranwrd(&_url_template,@k8s.service.name@,sas-compute));
556      proc http
557          url="&_url_base./compute/sessions/&SYS_COMPUTE_SESSION_ID/jobs/&SYS_COMPUTE_JOB_ID/log"
558          oauth_bearer = sas_services
559          method='get'
560          out=_logout;
561      headers 'accept'='text/plain';
562      quit;
563  
564      /*
565      Restore the original value for syntaxcheck.
566      */
567      options &_studiosyntaxcheck;
568  %mend;
569  
570  DATA _NULL_;
571  	ID=SYMGET("SYSUSERID");
572  	CALL SYMPUT("SYSUSERNAME",ID);
573  	RC=TSLVL('UWUUSERN','N');
574  	_ERROR_=0;
575  	IF (RC^=' ') THEN DO;
576  		call execute("DATA _NULL_;NAME=USERNAME();CALL SYMPUT('SYSUSERNAME',NAME);RUN;");
577  	END;
578  RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: CALL EXECUTE generated line.
1   + DATA _NULL_;NAME=USERNAME();CALL SYMPUT('SYSUSERNAME',NAME);RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

579  
580  OPTIONS TIMEZONE='GMT-05:00';
581  %studio_setup_locale(en-US);
582  OPTIONS VALIDVARNAME=ANY VALIDMEMNAME=EXTEND;
583  /* endregion */
12                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

584  
585  /* region: SAS Studio autoexec */
586  options mprint mtrace symbolgen source2;
587  
588  %global CAR_path;
589  %let CAR_path=/nfsshare/sashls2/Innovate/AAA_CAR/;
590  
591  /*************************************************************/
592  /* Include Macros And Declare Global Macro Variables         */
593  /*************************************************************/
594  %include "&CAR_path./Macro Library/Abbreviated_Demo.sas" / source2;
SYMBOLGEN:  Macro variable CAR_PATH resolves to /nfsshare/sashls2/Innovate/AAA_CAR/
NOTE: %INCLUDE (level 1) file /nfsshare/sashls2/Innovate/AAA_CAR//Macro Library/Abbreviated_Demo.sas is file 
      /nfsshare/sashls2/Innovate/AAA_CAR//Macro Library/Abbreviated_Demo.sas.
595 +/*************************************************************/
596 +/* Macros for abbreviated demo                               */
597 +/*************************************************************/
598 +proc datasets library=work kill;
                                                             Directory

Libref             WORK                                                                                                             
Engine             V9                                                                                                               
Physical Name      /opt/sas/viya/config/var/tmp/compsrv/default/dbd66912-f853-4d3a-90a5-23762a6c7335/                               
                   SAS_work54E100000197_dsmb1flwsas-342c1ed2-b728-4f18-b63d-d87dbf25a56d-ck857                                      
Filename           /opt/sas/viya/config/var/tmp/compsrv/default/dbd66912-f853-4d3a-90a5-23762a6c7335/                               
                   SAS_work54E100000197_dsmb1flwsas-342c1ed2-b728-4f18-b63d-d87dbf25a56d-ck857                                      
Inode Number       71696386                                                                                                         
Access Permission  rwx------                                                                                                        
Owner Name         UNKNOWN                                                                                                          
File Size          4KB                                                                                                              
File Size (bytes)  4096                                                                                                             


                                              Member
                                  #  Name     Type         File Size  Last Modified

                                  1  PROFILE  CATALOG           12KB  01/21/2025 18:08:14        
                                  2  REGSTRY  ITEMSTOR          32KB  01/21/2025 18:08:14        
                                  3  SASMACR  CATALOG          148KB  01/21/2025 18:08:14        
NOTE: Deleting WORK.PROFILE (memtype=CATALOG).
NOTE: File WORK.PROFILE (memtype=CATALOG) cannot be deleted because it is in use.
NOTE: Deleting WORK.REGSTRY (memtype=ITEMSTOR).
NOTE: File WORK.REGSTRY (memtype=ITEMSTOR) cannot be deleted because it is in use.
NOTE: Deleting WORK.SASMACR (memtype=CATALOG).
NOTE: File WORK.SASMACR (memtype=CATALOG) cannot be deleted because it is in use.
599 +run;

600 +quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

601 +
602 +/*************************************************************/
603 +/* Define Global Macro Variables and clear work library      */
604 +/*************************************************************/
13                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

605 +
606 +%global url hca_token hca_file_id hca_folder_id hca_path hca_dsn folder_id path myuname mypwd;
607 +
608 +%let myuname=matbec;
609 +%let mypwd=matbec;
610 +
611 +%macro Get_Dataset_From_Car (indata=);
612 +
613 +/*************************************************************/
614 +/* Include Macros And Declare Global Macro Variables         */
615 +/*************************************************************/
616 +%*include "C:\temp\CAR\Macro Libary\Global_Macro_Call.sas" / source2;
617 +
618 +/*************************************************************/
619 +/* Define Global Macro Variables and clear work library      */
620 +/*************************************************************/
621 +
622 +%global url hca_token hca_file_id hca_folder_id hca_path hca_dsn;
623 +
624 +/* URL of CAR Instance */
625 +%let url=https://sashls2.eastus.cloudapp.azure.com;
626 +
627 +proc datasets library=work kill;
628 +run;
629 +quit;
630 +
631 +/*************************************************************/
632 +/* Retrieve Data From CAR                                    */
633 +/*************************************************************/
634 +
635 +%CAR_Access_Token (name=&myuname, pw=&mypwd);
636 +%CAR_Get_File_ID (path=/Pain Drug Study/PainDrugStudy/Data/adam/, dsn=adqs.sas7bdat);
637 +%CAR_Download_File (outpath=&CAR_path./Data/, outdata=adqs.sas7bdat);
638 +
639 +%mend;
640 +
641 +/*************************************************************/
642 +/* Write Data To CAR                                         */
643 +/*************************************************************/
644 +
645 +%macro Write_Dataset_To_Car (outdata=);
646 +
647 +/* %CAR_Get_Folder_ID (path=/Pain Drug Study/PainDrugStudy/Data/adam); */
648 +%CAR_Get_Folder_ID (path=/Pain Drug Study/PainDrugStudy/Data/adam);
649 +%CAR_Write_File_To_Repository (inpath=&CAR_path./Data/, indata=adqs.sas7bdat, outdata=adqs.sas7bdat);
650 +
651 +data _null_;
652 +    fname="tempfile";
653 +    rc=filename(fname, "&outdata.");
654 +    if rc = 0 and fexist(fname) then
655 +       rc=fdelete(fname);
656 +    rc=filename(fname);
657 +run;
658 +
659 +%mend;
660 +
661 +/*************************************************************/
662 +/* Write Program To CAR                                      */
14                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

663 +/*************************************************************/
664 +
665 +%macro Write_Program_To_Car (outdata=, fdelete=);
666 +
667 +%CAR_Get_Folder_ID (path=/Pain Drug Study/PainDrugStudy/Programs/Dev);
668 +%CAR_Write_File_To_Repository (inpath=&CAR_path./SAS Programs/, indata=ADQS_Histogram.sas, outdata=ADQS_Histogram.sas);
669 +
670 +data _null_;
671 +    fname="tempfile";
672 +    rc=filename(fname, "&fdelete.");
673 +    if rc = 0 and fexist(fname) then
674 +       rc=fdelete(fname);
675 +    rc=filename(fname);
676 +run;
677 +
678 +%mend;
679 +
680 +/*************************************************************/
681 +/* Write Output To CAR                                      */
682 +/*************************************************************/
683 +
684 +%macro Write_Output_To_Car (outdata=, fdelete=);
685 +
686 +%CAR_Get_Folder_ID (path=/Pain Drug Study/PainDrugStudy/Outputs/Dev);
687 +%CAR_Write_File_To_Repository (inpath=&CAR_path./Outputs/, indata=ADQS_Histogram.pdf, outdata=ADQS_Histogram.pdf);
688 +
689 +data _null_;
690 +    fname="tempfile";
691 +    rc=filename(fname, "&fdelete.");
692 +    if rc = 0 and fexist(fname) then
693 +       rc=fdelete(fname);
694 +    rc=filename(fname);
695 +run;
696 +
697 +%mend;
698 +
699 +/*************************************************************/
700 +/* List of CAR REST API Calls                                */
701 +/*************************************************************/
702 +
703 +%macro Get_Program_From_Car (indata=);
704 +
705 +/*************************************************************/
706 +/* Include Macros And Declare Global Macro Variables         */
707 +/*************************************************************/
708 +%*include "&CAR_path./Macro Library/Global_Macro_Call.sas" / source2;
709 +
710 +/*************************************************************/
711 +/* Define Global Macro Variables and clear work library      */
712 +/*************************************************************/
713 +
714 +%global url hca_token hca_file_id hca_folder_id hca_path hca_dsn;
715 +
716 +/* URL of CAR Instance */
717 +%let url=https://sashls2.eastus.cloudapp.azure.com;
718 +
719 +proc datasets library=work kill;
720 +run;
15                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

721 +quit;
722 +
723 +/*************************************************************/
724 +/* Retrieve Program From CAR                                 */
725 +/*************************************************************/
726 +
727 +%CAR_Access_Token (name=&myuname, pw=&mypwd);
728 +%CAR_Get_File_ID (path=/Pain Drug Study/PainDrugStudy/Programs/Dev/, dsn=ADQS_Histogram.sas);
729 +%CAR_Download_File (outpath=&CAR_path./SAS Programs/, outdata=ADQS_Histogram.sas);
730 +
731 +%mend;
732 +
NOTE: %INCLUDE (level 1) ending.
SYMBOLGEN:  Macro variable CAR_PATH resolves to /nfsshare/sashls2/Innovate/AAA_CAR/
733   %include "&CAR_path./Macro Library/Global_Macro_Call.sas" / source2;
NOTE: %INCLUDE (level 1) file /nfsshare/sashls2/Innovate/AAA_CAR//Macro Library/Global_Macro_Call.sas is file 
      /nfsshare/sashls2/Innovate/AAA_CAR//Macro Library/Global_Macro_Call.sas.
734  +/*************************************************************/
735  +/* Copy dataset from FILEREF to SAS LIBREF                   */
736  +/*************************************************************/
737  +
738  +%macro CAR_Binary_File_Copy(
739  +  infile=_bcin
740  +  , outfile=_bcout
741  +  , returnName=_bcrc
742  +  , chunkSize=16392
743  +);
744  +
745  +  %local
746  +    startTime
747  +    endTime
748  +    diffTime
749  +  ;
750  +
751  +  %let startTime = %sysfunc( datetime() );
752  +
753  +  %if %sysevalf( &chunkSize > 32767 ) = 1 %then %do;
754  +    %put NOTE: &sysMacroname chunksize > 32767, setting it to 32767;
755  +    %let chunksize = 32767;
756  +  %end;
757  +
758  +  %put NOTE: &sysMacroname start %sysfunc( putn(&startTime, datetime19.));
759  +  %put NOTE: &sysMAcroname infile=&infile %qsysfunc(pathname(&infile));
760  +  %put NOTE: &sysMAcroname outfile=&outfile %qsysfunc(pathname(&outfile));
761  +
762  +  *
763  +  * create global return var
764  +  *;
765  +  %if %symexist(&returnName) = 0 %then %do;
766  +    %global &returnName;
767  +  %end;
768  +
769  +  data _null_;
770  +    length
771  +      msg $ 1024
772  +      rec $ &chunkSize
773  +      outfmt $ 32
774  +    ;
16                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

775  +
776  +    *
777  +    * open input and output file with binary mode
778  +    *;
779  +    fid_in = fopen("&infile", 'S', &chunkSize, 'B');
780  +
781  +    *
782  +    * check for unsuccessful open
783  +    *;
784  +    if fid_in <= 0 then do;
785  +      msg = sysmsg();
786  +      putlog "ERROR: &sysMacroname open failed for &infile";
787  +      putlog msg;
788  +      call symputx("&returnName",8);
789  +      stop;
790  +    end;
791  +
792  +    fid_out = fopen("&outfile", 'O', &chunkSize, 'B');
793  +
794  +    *
795  +    * check for unsuccessful open
796  +    *;
797  +    if fid_out <= 0 then do;
798  +      msg = sysmsg();
799  +      putlog "ERROR: &sysMacroname open failed for &outfile";
800  +      putlog msg;
801  +      call symputx("&returnName",8);
802  +      stop;
803  +    end;
804  +
805  +    *
806  +    * we will keep track on the number of bytes processed
807  +    *;
808  +    bytesProcessed = 0;
809  +
810  +    *
811  +    * read loop on input file
812  +    *;
813  +    do while( fread(fid_in) = 0 );
814  +      call missing(outfmt, rec);
815  +      rcGet = fget(fid_in, rec, &chunkSize);
816  +
817  +      *
818  +      * need this information for write processing
819  +      *;
820  +      fcolIn = fcol(fid_in);
821  +
822  +      *
823  +      * need a format length to handle situations
824  +      * where last chars in rec are blank
825  +      * true: normal situation
826  +      * false: last chunk of data at end of file
827  +      *;
828  +      if (fColIn - &chunkSize) = 1 then do;
829  +        fmtLength = &chunkSize;
830  +      end;
831  +      else do;
832  +        fmtLength = fColIn - 1;
17                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

833  +      end;
834  +
835  +      *
836  +      * prepare the output format
837  +      * and write rec
838  +      *;
839  +      outfmt = cats("$char", fmtLength, ".");
840  +      rcPut = fput(fid_out, putc(rec, outfmt));
841  +      rcWrite = fwrite(fid_out);
842  +
843  +      *
844  +      * keep track of bytes
845  +      *;
846  +      bytesProcessed + fmtLength;
847  +
848  +      *
849  +      * just in case
850  +      *;
851  +      maxRc = max(rcGet, rcPut, rcWrite);
852  +      if maxRc > 0 then do;
853  +        putlog "ERROR: &sysMacroname checklog " rcGet= rcPut= rcWrite=;
854  +        call symputx("&returnName", 8);
855  +      end;
856  +    end;
857  +
858  +    putlog "NOTE: &sysMacroname processed " bytesProcessed "bytes";
859  +    rcInC = fclose(fid_in);
860  +    rcOutC = fclose(fid_out);
861  +    maxRc = max(rcInC, rcOutC);
862  +
863  +    if maxRc > 0 then do;
864  +      putlog "ERROR: &sysMacroname checklog " rcInC= rcOutC=;
865  +      call symputx("&returnName", 8);
866  +    end;
867  +    else do;
868  +      call symputx("&returnName", 0);
869  +    end;
870  +  run;
871  +
872  +  filename _bcin clear;
873  +
874  +  %let endTime = %sysfunc( datetime() );
875  +  %put NOTE: &sysMacroname end %sysfunc( putn(&endTime, datetime19.));
876  +  %let diffTime = %sysevalf( &endTime - &startTime );
877  +  %put NOTE: &sysMacroname processtime %sysfunc( putn(&diffTime, tod12.3));
878  +%mend;
879  +
880  +/*************************************************************/
881  +/* GET HCA ACCESS TOKEN                                      */
882  +/*************************************************************/
883  +
884  +%macro CAR_Access_Token (name=, pw=);
885  +
886  +   options set=SSLREQCERT="allow";
887  +   filename resp temp;
888  +
889  +   proc http
890  +      url="&url/SASLogon/oauth/token"
18                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

891  +	  method="POST"
892  +	  in="grant_type=password%nrstr(&username)=&name%nrstr(&password)=&pw"
893  +	  out=resp;
894  +	  headers "Authorization"="Basic c2FzLmVjOg==";
895  +   run;
896  +
897  +   %put PROC HTTP STATUS: &SYS_PROCHTTP_STATUS_CODE. &SYS_PROCHTTP_STATUS_PHRASE.;
898  +
899  +   %if ("&SYS_PROCHTTP_STATUS_CODE." eq "200") %then %do;
900  +	  %put Logon was successful.;
901  +
902  +	  libname lsafJson JSON fileref=resp;
903  +
904  +	  data response;
905  +	     set lsafJson.alldata;
906  +		 if (strip(p1)="access_token") then call symputx("hca_token",value,'G');
907  +      run;
908  +      %put &=hca_token;
909  +   %end;
910  +   %else %do;
911  +      %PUT *****************************************************;
912  +      %PUT * ACCESS TOKEN NOT ISSUED                           *;
913  +      %PUT *****************************************************;
914  +   %end;
915  +
916  +   filename resp;
917  +   libname lsafJson clear;
918  +%mend;
919  +
920  +/********************************************************************************/
921  +/* Get File ID from a Specific Dataset                                          */
922  +/********************************************************************************/
923  +
924  +%macro CAR_Get_File_ID (path=, dsn=);
925  +
926  +   %let hca_path=&path;
927  +   %let hca_dsn=&dsn;
928  +   %let file_id=;
929  +   %let hca_file_id=;
930  +
931  +   filename resp temp;
932  +
933  +   %put &path &dsn;
934  +
935  +   %put **** Retreiving id for &hca_path&hca_dsn;
936  +
937  +   proc http
938  +      url="&url/healthClinicalAcceleration/repository/items?filter=eq(path,'&hca_path&hca_dsn')"
939  +	  method="GET"
940  +	  out=resp;
941  +	  headers "Authorization"="Bearer &hca_token.";
942  +   run;
943  +
944  +   %put PROC HTTP STATUS: &SYS_PROCHTTP_STATUS_CODE. &SYS_PROCHTTP_STATUS_PHRASE.;
945  +
946  +   %if ("&SYS_PROCHTTP_STATUS_CODE." eq "200") %then %do;
947  +      libname lsafJson JSON fileref=resp;
948  +
19                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

949  +	  data CAR_Items;
950  +	     set lsafJson.alldata;
951  +		 if (strip(p2)="id") then call symputx("file_id",value);
952  +         if (strip(p2)="path") then call symputx("path",value);
953  +	  run;
954  +
955  +      %PUT *****************************************************;
956  +      %PUT * FILE ID RETRIEVED                                 *;
957  +      %PUT *****************************************************;
958  +
959  +      %put &file_id;
960  +      %put &hca_path;
961  +      %let hca_file_id=&file_id;
962  +   %end;
963  +   %else %do;
964  +
965  +      %PUT *****************************************************;
966  +      %PUT * FILE NOT FOUND                                    *;
967  +      %PUT *****************************************************;
968  +
969  +   %end;
970  +
971  +   /* Get Version of the requested file */
972  +
973  +   %put *** Retreiving Versions For &hca_file_id;
974  +
975  +   filename resp;
976  +   libname lsafJson clear;
977  +
978  +   filename resp temp;
979  +
980  +   proc http
981  +      url="&url/healthClinicalAcceleration/repository/items/&hca_file_id/versions"
982  +	  method="GET"
983  +	  out=resp;
984  +	  headers "Authorization"="Bearer &hca_token.";
985  +   run;
986  +
987  +   %put PROC HTTP STATUS: &SYS_PROCHTTP_STATUS_CODE. &SYS_PROCHTTP_STATUS_PHRASE.;
988  +
989  +   %if ("&SYS_PROCHTTP_STATUS_CODE." eq "200") %then %do;
990  +      libname lsafJson JSON fileref=resp;
991  +
992  +	  data CAR_Versions;
993  +	     set lsafJson.alldata;
994  +	  run;
995  +
996  +      %PUT *****************************************************;
997  +      %PUT * FILE VERSION RETRIEVED                            *;
998  +      %PUT *****************************************************;
999  +
1000 +      data temp;
1001 +         set work.CAR_Versions;
1002 +         n=_N_;
1003 +         if P2 in ('field' 'path' 'fileVersion' 'comment' 'createdBy'
1004 +                   'createdByDisplayName' 'creationTimeStamp' 'signed');
1005 +      run;
1006 +
20                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

1007 +      proc sort data=temp; by P2 n; run;
1008 +
1009 +      data temp;
1010 +         format pgm_name $80.;
1011 +         set temp;
1012 +         by P2 n;
1013 +         if first.p2;
1014 +         pgm_name="&hca_dsn";
1015 +         keep pgm_name P2 Value;
1016 +      run;
1017 +
1018 +      proc sort data=temp; by pgm_name; run;
1019 +
1020 +      proc transpose data=temp name=VarName out=outdata;
1021 +         by pgm_name;
1022 +         id P2;
1023 +         var Value;
1024 +      run;
1025 +
1026 +      data outdata;
1027 +         set outdata;
1028 +         drop VarName;
1029 +      run;
1030 +
1031 +      proc append data=outdata base=CAR_Audit_Trail force nowarn; run;
1032 +
1033 +      proc delete data=temp; run;
1034 +      proc delete data=outdata; run;
1035 +   %end;
1036 +   %else %do;
1037 +
1038 +      %PUT *****************************************************;
1039 +      %PUT * &file_id VERSION NOT FOUND                        *;
1040 +      %PUT *****************************************************;
1041 +
1042 +   %end;
1043 +%mend;
1044 +
1045 +/********************************************************************************/
1046 +/* Download a sepcific dataset                                         */
1047 +/********************************************************************************/
1048 +
1049 +%macro CAR_Download_File (outpath=, outdata=);
1050 +
1051 +   %let PROCHTTP_NOCOOKIES=1;
1052 +
1053 +   filename resp;
1054 +   libname lsafJson clear;
1055 +
1056 +   /* filename myfile TEMP recfm=n */ /* RECFM=N needed for a binary copy */;
1057 +
1058 +   filename myfile "&outpath./&outdata.";
1059 +
1060 +   *folderpath="&outpath"
1061 +   filename="&outdata"
1062 +   ;
1063 +
1064 +   proc http
21                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

1065 +      url="&url/healthClinicalAcceleration/repository/items/&hca_file_id/content"
1066 +      method="POST"
1067 +      out=myfile;
1068 +      headers
1069 +      "Authorization"="Bearer &hca_token."
1070 +      "Content-Type"="application/json";
1071 +   run;
1072 +
1073 +   %put PROC HTTP STATUS: &SYS_PROCHTTP_STATUS_CODE. &SYS_PROCHTTP_STATUS_PHRASE.;
1074 +
1075 +   %if ("&SYS_PROCHTTP_STATUS_CODE." eq "200") %then %do;
1076 +
1077 +      %PUT *****************************************************;
1078 +      %PUT * FILE DOWNLOADED TO &outpath &outdata              *;
1079 +      %PUT *****************************************************;
1080 +
1081 +   %end;
1082 +   %else %do;
1083 +
1084 +      %PUT *****************************************************;
1085 +      %PUT * FILE NOT DOWNLOADED                               *;
1086 +      %PUT *****************************************************;
1087 +
1088 +   %end;
1089 +
1090 +   filename myfile clear ;
1091 +
1092 + %mend;
1093 +
1094 +/********************************************************************************/
1095 +/* Get File ID from a Specific Folder                                           */
1096 +/********************************************************************************/
1097 +
1098 +%macro CAR_Get_Folder_ID (path=);
1099 +
1100 +/*
1101 +   filename resp;
1102 +   libname lsafJson clear;
1103 +*/
1104 +
1105 +   filename resp temp;
1106 +
1107 +   proc http
1108 +      url="&url/healthClinicalAcceleration/repository/items?filter=eq(path,'&path')"
1109 +      method="GET"
1110 +      out=resp;
1111 +      headers "Authorization"="Bearer &hca_token.";
1112 +      DEBUG LEVEL=3;
1113 +   run;
1114 +
1115 +   %put PROC HTTP STATUS: &SYS_PROCHTTP_STATUS_CODE. &SYS_PROCHTTP_STATUS_PHRASE.;
1116 +
1117 +   %if ("&SYS_PROCHTTP_STATUS_CODE." eq "200") %then %do;
1118 +      libname lsafJson JSON fileref=resp;
1119 +
1120 +      data CAR_Items;
1121 +	     set lsafJson.alldata;
1122 +	     if (strip(p2)="id") then call symputx("folder_id",value);
22                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

1123 +         if (strip(p2)="path") then call symputx("path",value);
1124 +	   run;
1125 +
1126 +      %PUT *****************************************************;
1127 +      %PUT * FOLDER ID RETREIVED                               *;
1128 +      %PUT *****************************************************;
1129 +
1130 +      %put &folder_id;
1131 +      %put &path;
1132 +      %let hca_folder_id=&folder_id;
1133 +   %end;
1134 +   %else %do;
1135 +
1136 +      %PUT *****************************************************;
1137 +      %PUT * FOLDER NOT FOUND                                  *;
1138 +      %PUT *****************************************************;
1139 +
1140 +   %end;
1141 +
1142 +   filename resp;
1143 +   libname lsafJson clear;
1144 +
1145 +%mend;
1146 +
1147 +/********************************************************************************/
1148 +/* Upload a sepcific dataset                                                    */
1149 +/********************************************************************************/
1150 +
1151 +%macro CAR_Write_File_To_Repository (inpath=, indata=, outdata=);
1152 +
1153 +   %let PROCHTTP_NOCOOKIES=1;
1154 +
1155 +/*
1156 +   filename resp;
1157 +   libname lsafJson clear;
1158 +*/
1159 +
1160 +   filename resp temp;
1161 +   FILENAME myfile2 "&inpath.\&indata.";
1162 +
1163 +   proc http
1164 +      url="&url/healthClinicalAcceleration/repository/items/&hca_folder_id./content?name=&outdata"
1165 +      method="PUT"
1166 +      out=resp
1167 +      in = MULTI FORM ( "uploadFile" = myfile2 header="Content-Type: text/plain");
1168 +      headers
1169 +      "Authorization"="Bearer &hca_token.";
1170 +   run;
1171 +
1172 +   %put PROC HTTP STATUS: &SYS_PROCHTTP_STATUS_CODE. &SYS_PROCHTTP_STATUS_PHRASE.;
1173 +
1174 +   %if ("&SYS_PROCHTTP_STATUS_CODE." eq "200") %then %do;
1175 +
1176 +      %PUT *****************************************************;
1177 +      %PUT * File &inpath &indata written to &outdata          *;
1178 +      %PUT *****************************************************;
1179 +
1180 +   %end;
23                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

1181 +   %else %do;
1182 +      %PUT *****************************************************;
1183 +      %PUT * Upload to Repository Failed                       *;
1184 +      %PUT *****************************************************;
1185 +   %end;
1186 +
1187 +%mend;
1188 +
1189 +/********************************************************************************/
1190 +/* Write Data To CAS                                                            */
1191 +/********************************************************************************/
1192 +
1193 +%macro CAR_Write_To_CAS (caslib=casuser, inlib=work, indata=, outdata=, global_scope=Yes);
1194 +
1195 +   proc cas;
1196 +   /*check for session scope table*/
1197 +      table.tableexists result = r1 /
1198 +      caslib="&caslib",
1199 +      name="&outdata";
1200 +
1201 +   /*drop session scope table*/
1202 +      if r1.exists = 1 then do;
1203 +         action table.droptable /
1204 +         caslib="&caslib"
1205 +         name="&outdata";
1206 +      end;
1207 +
1208 +   run;
1209 +   /*check for global scope table*/
1210 +      table.tableexists result = r2 /
1211 +      caslib="&caslib"
1212 +      name="&outdata";
1213 +   /*drop global scope table*/
1214 +      if r2.exists = 2 then do;
1215 +         action table.droptable /
1216 +         caslib="&caslib"
1217 +         name="&outdata";
1218 +      end;
1219 +   quit;
1220 +
1221 +   data work.temp;
1222 +      set &inlib..&indata;
1223 +   run;
1224 +
1225 +   proc casutil; load DATA="temp" casout="&outdata" replace;
1226 +   quit;
1227 +
1228 +   proc casutil;
1229 +      list tables;
1230 +   run;
1231 +
1232 +   /*
1233 +   By default, in-memory CAS tables have "session" scope, meaning that they are
1234 +   available only within the specific CAS session that you are working with.
1235 +   So to make a table available in a different CAS session (the new CAS session
1236 +   that is created when you use VA), you need to promote the table to be global
1237 +   scope.
1238 +   */
24                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

1239 +
1240 +   %if &global_scope=Yes %then %do;
1241 +
1242 +      proc cas;
1243 +	     action table.promote /
1244 +		 caslib="&caslib",
1245 +		 table="&outdata";
1246 +      run;
1247 +      quit;
1248 +   %end;
1249 +%mend;
1250 +
1251 +/********************************************************************************/
1252 +/* Get Element ID from a Specific Item in CAR  stored in the macro variable &car_item                               */
1253 +/********************************************************************************/
1254 +
1255 +%macro CAR_Get_Element_ID (car_item=);
1256 +
1257 +   %global car_itemid;
1258 +
1259 +   filename resp temp;
1260 +
1261 +   %put **** Retreiving id for &car_item;
1262 +
1263 +   proc http
1264 +      url="&url/healthClinicalAcceleration/repository/items?filter=eq(path,'&car_item')"
1265 +                method="GET"
1266 +                out=resp;
1267 +                headers "Authorization"="Bearer &hca_token.";
1268 +   run;
1269 +
1270 +   %put PROC HTTP STATUS: &SYS_PROCHTTP_STATUS_CODE. &SYS_PROCHTTP_STATUS_PHRASE.;
1271 +
1272 +   %if ("&SYS_PROCHTTP_STATUS_CODE." eq "200") %then %do;
1273 +      libname lsafJson JSON fileref=resp;
1274 +
1275 +                data CAR_Items;
1276 +                   set lsafJson.alldata;
1277 +                           if (strip(p2)="id") then call symputx("car_itemid",value);
1278 +         if (strip(p2)="path") then call symputx("path",value);
1279 +                run;
1280 +
1281 +      %PUT *****************************************************;
1282 +      %PUT * FILE ID RETRIEVED                                 *;
1283 +      %PUT *****************************************************;
1284 +
1285 +      %put &=car_item;
1286 +      %put &=car_itemid;
1287 +   %end;
1288 +   %else %do;
1289 +
1290 +      %PUT *****************************************************;
1291 +      %PUT * FILE NOT FOUND                                    *;
1292 +      %PUT *****************************************************;
1293 +
1294 +   %end;
1295 +%mend;
1296 +
25                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

1297 +/********************************************************************************/
1298 +/* Download multiple items from CAR                                             */
1299 +/********************************************************************************/
1300 +
1301 +%macro CAR_Get_Multiple_Files (outpath=, fileid=, zipfile=);
1302 +
1303 +   %let PROCHTTP_NOCOOKIES=1;
1304 +
1305 +   filename resp;
1306 +   libname lsafJson clear;
1307 +
1308 +   filename myfile "&outpath.&zipfile.";
1309 +
1310 +   proc http
1311 +      url="&url/healthClinicalAcceleration/repository/items/&car_itemid/content"
1312 +      method="POST"
1313 +      out=myfile;
1314 +      headers
1315 +      "Authorization"="Bearer &hca_token."
1316 +      "Content-Type"="application/json";
1317 +   run;
1318 +
1319 +
1320 +   %put PROC HTTP STATUS: &SYS_PROCHTTP_STATUS_CODE. &SYS_PROCHTTP_STATUS_PHRASE.;
1321 +
1322 +   %if ("&SYS_PROCHTTP_STATUS_CODE." eq "200") %then %do;
1323 +
1324 +      %PUT *****************************************************;
1325 +      %PUT * FILE DOWNLOADED TO &outpath &zipfile              *;
1326 +      %PUT *****************************************************;
1327 +
1328 +      %put &=outpath;
1329 +
1330 +   %end;
1331 +   %else %do;
1332 +
1333 +      %PUT *****************************************************;
1334 +      %PUT * FILE NOT DOWNLOADED                               *;
1335 +      %PUT *****************************************************;
1336 +
1337 +   %end;
1338 +
1339 +   filename myfile clear ;
1340 +%mend;
1341 +
1342 +%macro CAR_Unzip_Zip_File(infile=, toloc=);
1343 +
1344 +   %local isfolder folder_name;
1345 +   filename inzip ZIP "&infile";
1346 +
1347 +   /* Read the "members" (files) from the ZIP file */
1348 +   data contents(keep=memname isFolder);
1349 +      length memname $200 isFolder 8;
1350 +      fid=dopen("inzip");
1351 +      if fid=0 then
1352 +         stop;
1353 +      memcount=dnum(fid);
1354 +      do i=1 to memcount;
26                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

1355 +         memname=dread(fid,i);
1356 +         /* check for trailing / in folder name */
1357 +         isFolder = (first(reverse(trim(memname)))='/');
1358 +         output;
1359 +      end;
1360 +      rc=dclose(fid);
1361 +   run;
1362 +
1363 +   /* Retain Folder Name For Each Dataset */
1364 +   data contents;
1365 +      format foldername $200.;
1366 +      set contents;
1367 +      if isFolder=1 then foldername=memname;
1368 +      retain foldername;
1369 +   run;
1370 +
1371 +   /* Remove Folder Name For Each Dataset Name */
1372 +   data contents;
1373 +      set contents;
1374 +      if isFolder=0;
1375 +      memname=tranwrd(memname, left(trim(foldername)), "");
1376 +   run;
1377 +
1378 +   /* Copy a zipped data set into the WORK library */
1379 +   data _NULL_;
1380 +      set contents;
1381 +      call symputx("Nobs",_N_);
1382 +   run;
1383 +
1384 +   %do i=1 %to &Nobs;
1385 +
1386 +      data _NULL_;
1387 +         set contents;
1388 +         if _N_=&i;
1389 +            call symputx("foldername",foldername);
1390 +            call symputx("dsn_name",memname);
1391 +      run;
1392 +
1393 +      %put *** Now Copying &dsn_name in observation &i;
1394 +
1395 +    %if "&toloc."="" %then %do;
1396 +      filename ds "%sysfunc(getoption(work))/&dsn_name" ;
1397 +    %end;
1398 +    %else %do;
1399 +      filename ds "&toloc.&foldername.&dsn_name";
1400 +    %end;
1401 +      data _null_;
1402 +         /* reference the member name WITH folder path */
1403 +         infile inzip(&foldername.&dsn_name.)
1404 +           lrecl=256 recfm=F length=length eof=eof unbuf;
1405 +         file   ds lrecl=256 recfm=N;
1406 +         input;
1407 +         put _infile_ $varying256. length;
1408 +         return;
1409 +         eof:
1410 +         stop;
1411 +      run;
1412 +   %end;
27                                                         The SAS System                      Tuesday, January 21, 2025 06:08:00 PM

1413 +%mend;
1414 +
1415 +%Macro Delete_file(infile=);
1416 +  %if "&infile" ne "" %then %do;
1417 +    data _null_;
1418 +      fname="tempfile";
1419 +      rc=filename(fname, "&infile.");
1420 +      if rc = 0 and fexist(fname) then
1421 +         rc=fdelete(fname);
1422 +      rc=filename(fname);
1423 +    run;
1424 +  %end;
1425 +%Mend Delete_file;
1426 +
1427 +
1428 +
1429 +
NOTE: %INCLUDE (level 1) ending.
1430  
1431  /* My library where data pulled from repo is stored */
1432  Libname save "&CAR_path./Data";
SYMBOLGEN:  Macro variable CAR_PATH resolves to /nfsshare/sashls2/Innovate/AAA_CAR/
NOTE: Libref SAVE was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /nfsshare/sashls2/Innovate/AAA_CAR//Data
1433  
1434  /* endregion */
1435  
1436  /* region: Generated preamble */
1437  /* Make sure the current directory is writable */
1438  data _null_;
1439      length rc 4;
1440      %let tworkloc="%sysfunc(getoption(work))";
1441      rc=dlgcdir(&tworkloc);
SYMBOLGEN:  Macro variable TWORKLOC resolves to 
            "/opt/sas/viya/config/var/tmp/compsrv/default/dbd66912-f853-4d3a-90a5-23762a6c7335/SAS_work54E100000197_dsmb1flwsas-342c
            1ed2-b728-4f18-b63d-d87dbf25a56d-ck857"
1442  run;

NOTE: The current working directory is now 
      "/opt/sas/viya/config/var/tmp/compsrv/default/dbd66912-f853-4d3a-90a5-23762a6c7335/SAS_work54E100000197_dsmb1flwsas-342c1ed2-b
      728-4f18-b63d-d87dbf25a56d-ck857".
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1443  
1444  /* Setup options */
1445  title;
1446  footnote;
1447  options validvarname=any;
1448  options validmemname=extend;
1449  options dtreset date number;
1450  options device=png;
1451  
1452  /* Setup macro variables */
1453  %let syscc=0;
28                                                         The SAS System                      Tuesday, January 21, 2025 01:08:14 PM

1454  %let _clientapp = %nrquote(%nrstr(SAS Studio));
1455  %let _clientappabbrev = %nrquote(%nrstr(Studio));
1456  %let _clientappversion=2024.12;
1457  %let _clientversion=;
1458  %let _sasservername=&SYSHOSTNAME;
SYMBOLGEN:  Macro variable SYSHOSTNAME resolves to dsmb1flwsas-342c1ed2-b728-4f18-b63d-d87dbf25a56d-ck857
1459  %let _sashostname=&SYSHOSTNAME;
SYMBOLGEN:  Macro variable SYSHOSTNAME resolves to dsmb1flwsas-342c1ed2-b728-4f18-b63d-d87dbf25a56d-ck857
1460  %let _sasprogramfilehost=&SYSHOSTNAME;
SYMBOLGEN:  Macro variable SYSHOSTNAME resolves to dsmb1flwsas-342c1ed2-b728-4f18-b63d-d87dbf25a56d-ck857
1461  %let _clientuserid = %nrquote(%nrstr(matbec));
1462  %let _clientusername = %nrquote(%nrstr(Matt Becker));
1463  %let clientmachine = %nrquote(%nrstr());
1464  %let _clientmachine = %nrquote(%nrstr());
1465  %let _clientmode = %nrquote(%nrstr(viya));
1466  %let sasworklocation="%sysfunc(getoption(work))/";
1467  filename _cwd &sasworklocation;
SYMBOLGEN:  Macro variable SASWORKLOCATION resolves to 
            "/opt/sas/viya/config/var/tmp/compsrv/default/dbd66912-f853-4d3a-90a5-23762a6c7335/SAS_work54E100000197_dsmb1flwsas-342c
            1ed2-b728-4f18-b63d-d87dbf25a56d-ck857/"
1468  data _null_;
1469      call symput('_sasworkingdir',pathname('_cwd'));
1470  run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1471  filename _cwd;
NOTE: Fileref _CWD has been deassigned.
1472  %let _sasprogramfile = %nrquote(%nrstr(/nfsshare/sashls2/mattb/XMB111/programs/dsmb1.flw));
1473  %let _baseurl = %nrquote(%nrstr(https://sashls2.eastus.cloudapp.azure.com/SASStudio/));
1474  %let _execenv = %nrquote(%nrstr(SASStudio));
1475  %symdel _dataout_mime_type _dataout_name _dataout_url _dataout_table / nowarn;
1476  %let _sasws_ = %bquote(%sysfunc(getoption(work)));
1477  %let _saswstemp_ = %bquote(%sysfunc(getoption(work)));
1478  
1479  /* Detect SAS/Graph and setup graph options */
1480  data _null_;
1481      length rc $255;
1482      call symput("graphinit","");
1483      call symput("graphterm","");
1484      rc=tslvl('sasxgopt','n');
1485      _error_=0;
1486      if (rc^=' ') then do;
1487          call symput("graphinit","goptions reset=all gsfname=_gsfname;");
1488          call symput("graphterm","goptions noaccessible;");
1489      end;
1490  run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1491  data _null_;
1492      length rc 4;
29                                                         The SAS System                      Tuesday, January 21, 2025 01:08:14 PM

1493      rc=sysprod("PRODNUM002");
1494      if (rc^=1) then do;
1495          call symput("graphinit","");
1496          call symput("graphterm","");
1497      end;
1498  run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1499  
1500  /* Setup ODS destinations */
1501  ods _all_ close;
1502  %studio_results_directory;
MLOGIC(STUDIO_RESULTS_DIRECTORY):  Beginning execution.
MLOGIC(STUDIO_RESULTS_DIRECTORY):  %GLOBAL  _RESULTS_PREFIX_
MLOGIC(STUDIO_RESULTS_DIRECTORY):  %LET (variable name is _RESULTS_PREFIX_)
SYMBOLGEN:  Macro variable SYS_COMPUTE_JOB_ID resolves to 7E720B6B-8049-BC4C-AFDA-2CFAC95CEE69
MLOGIC(STUDIO_RESULTS_DIRECTORY):  Ending execution.
1503  filename _htmlout '/nfsshare/sashls2/mattb/XMB111/programs/dsmb1.html';
1504  filename _gsfname temp;
1505  filename _dataout "&_results_prefix_..dat";
SYMBOLGEN:  Macro variable _RESULTS_PREFIX_ resolves to !COMPUTESERVER_TMP_PATH/results-7E720B6B-8049-BC4C-AFDA-2CFAC95CEE69
1506  ods autonavigate off;
1507  ods graphics on;
1508  ods html5 (id=web) METATEXT='http-equiv="Content-Security-Policy" content="default-src ''none''; style-src ''unsafe-inline'';
1508! img-src data: ;"' device=png gpath="&_saswstemp_" path="&_saswstemp_" encoding=utf8 file=_htmlout
1508! (title='Results:dsmb1.flw.sas') style=Illuminate options(bitmap_mode='inline' outline='on' svg_mode='inline'
SYMBOLGEN:  Macro variable _SASWSTEMP_ resolves to 
            /opt/sas/viya/config/var/tmp/compsrv/default/dbd66912-f853-4d3a-90a5-23762a6c7335/SAS_work54E100000197_dsmb1flwsas-342c1
            ed2-b728-4f18-b63d-d87dbf25a56d-ck857
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable _SASWSTEMP_ resolves to 
            /opt/sas/viya/config/var/tmp/compsrv/default/dbd66912-f853-4d3a-90a5-23762a6c7335/SAS_work54E100000197_dsmb1flwsas-342c1
            ed2-b728-4f18-b63d-d87dbf25a56d-ck857
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
1508!  style=Illuminate options(bitmap_mode='inline' outline='on' svg_mode='inline' css_prefix=".ods_&SYS_COMPUTE_JOB_ID"
1508! body_id="div_&SYS_COMPUTE_JOB_ID" );
SYMBOLGEN:  Macro variable SYS_COMPUTE_JOB_ID resolves to 7E720B6B-8049-BC4C-AFDA-2CFAC95CEE69
SYMBOLGEN:  Macro variable SYS_COMPUTE_JOB_ID resolves to 7E720B6B-8049-BC4C-AFDA-2CFAC95CEE69
NOTE: Writing HTML5(WEB) Body file: _HTMLOUT
1509  &graphinit;
SYMBOLGEN:  Macro variable GRAPHINIT resolves to goptions reset=all gsfname=_gsfname;
1510  filename _logout '/nfsshare/sashls2/mattb/XMB111/programs/dsmb1.log';
1511  /* endregion */
1512  
1513  %macro _flw_action_start(nodes);
1514      data _null_;
1515          dtEndStr = put(datetime(), E8601DZ.);
1516          put "_FLW_ACTION_START_|" dtEndStr +(-1) "|&nodes";
1517      run;
1518  %mend _flw_action_start;
1519  %macro _flw_action_end(nodes, table_libs, libs, table_names);
1520      data _null_;
1521  
1522          attrib next_table_name length = $32 informat = $32. format = $32.
30                                                         The SAS System                      Tuesday, January 21, 2025 01:08:14 PM

1523                 dtStartStr length = $26 informat = $26. format = $26.;
1524  
1525          %local i next_table;
1526          %do i=1 %to %sysfunc(countc(&table_libs, |)) + 1;
1527              %let next_table = %qscan(&table_libs, &i, |);
1528              %let next_lib = %qscan(&libs, &i, |);
1529              %let next_table_name = %qscan(&table_names, &i, |);
1530              next_table_name = kreverse(ksubstr(kreverse(ksubstr(kstrip("&next_table_name."),2)),2));
1531              %let table_exists = %eval(%sysfunc(exist(&next_table, data)) or %sysfunc(exist(&next_table, view)));
1532              put "_FLW_ACTION_TABLE_|&next_lib|" next_table_name +(-1) "|&table_exists";
1533          %end;
1534          dtStartStr = put(datetime(), E8601DZ.);
1535          put "_FLW_ACTION_END_|" dtStartStr +(-1) "|&nodes";
1536      run;
1537  %mend _flw_action_end;
1538  /* endregion */
1539  
1540  /*===========================================================================*
1541  * Node name:        autoexec.sas
1542  * Node ID:          id-1728966431888-1089
1543  *
1544  * Output Tables:
1545  *   WORK._flw1728966431888108_0_0_1
1546  *
1547  * Step name:        SAS Program
1548  * Step path:        /dataFlows/steps/a7190700-f59c-4a94-afe2-214ce639fcde
1549  * Step description: Run user written SAS code.
1550  *----------------------------------------------------------------------------*/
1551  
1552  /* region: Generated step setup */
1553  %_flw_action_start(id-1728966431888-1089);
MLOGIC(_FLW_ACTION_START):  Beginning execution.
MLOGIC(_FLW_ACTION_START):  Parameter NODES has value id-1728966431888-1089
MPRINT(_FLW_ACTION_START):   data _null_;
MPRINT(_FLW_ACTION_START):   dtEndStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966431888-1089
MPRINT(_FLW_ACTION_START):   put "_FLW_ACTION_START_|" dtEndStr +(-1) "|id-1728966431888-1089";
MPRINT(_FLW_ACTION_START):   run;

_FLW_ACTION_START_|2025-01-21T13:08:15+00:00|id-1728966431888-1089
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(_FLW_ACTION_START):  Ending execution.
1554  /* endregion */
1555  
1556  
1557  /* region: Generated macro initialization */
1558  %let _inputCount = 0;
1559  %let _outputCount = 1;
1560  %let _output1 = WORK._flw1728966431888108_0_0_1;
1561  
1562  /* endregion */
1563  
1564  FILENAME _flw_pr "/nfsshare/sashls2/mattb/XMB111/programs/autoexec.sas" encoding="UTF-8";
1565  %include _flw_pr / source2;
31                                                         The SAS System                      Tuesday, January 21, 2025 01:08:14 PM

NOTE: %INCLUDE (level 1) file _FLW_PR is file /nfsshare/sashls2/mattb/XMB111/programs/autoexec.sas.
1566 +********************************************************************************;
1567 +***
1568 +*** Program:        XMB111/programs/autoexec.sas
1569 +*** Programmer:     Matt Becker
1570 +*** Date Created:   02Jun2024
1571 +***
1572 +*** Input :         none
1573 +***
1574 +*** Output:         none
1575 +***
1576 +*** Purpose:        Assign project definitions, options, libnames and macro vars
1577 +***
1578 +*** Comments:
1579 +***
1580 +*** Software:       SAS Viya 4
1581 +***
1582 +*** Modifications:
1583 +***
1584 +*** Date       Programmer        Description
1585 +*** ---------  ----------------  --------------
1586 +*** 23Jul2024  matbec            Add a comment
1587 +*** Hi Jim
1588 +*** Hi Vertex Team
1589 +*** Made a change for Joe
1590 +********************************************************************************;
1591 +cas;
NOTE: The session CASAUTO connected successfully to Cloud Analytic Services sas-cas-server-default-client using port 5570. The UUID 
      is d957388a-615c-ff46-9d0a-c37fd7dca67e. The user is matbec and the active caslib is CASUSER(matbec).
NOTE: The SAS option SESSREF was updated with the value CASAUTO.
NOTE: The SAS macro _SESSREF_ was updated with the value CASAUTO.
NOTE: The session is using 4 workers.
1592 +caslib _all_ assign;
NOTE: A SAS Library associated with a caslib can only reference library member names that conform to SAS Library naming conventions.
NOTE: CASLIB BIOSPHX for session CASAUTO will be mapped to SAS Library BIOSPHX.
NOTE: CASLIB CASUSER(matbec) for session CASAUTO will be mapped to SAS Library CASUSER.
NOTE: CASLIB ChemL for session CASAUTO will be mapped to SAS Library CHEML.
NOTE: CASLIB Cohorent_EHR for session CASAUTO will not be mapped to SAS Library Cohorent_EHR. The CASLIB name is not valid for use 
      as a libref.
NOTE: CASLIB Formats for session CASAUTO will be mapped to SAS Library FORMATS.
NOTE: CASLIB GOVLAKE for session CASAUTO will be mapped to SAS Library GOVLAKE.
NOTE: CASLIB HLS_CDM for session CASAUTO will be mapped to SAS Library HLS_CDM.
NOTE: CASLIB HLS_CDM_2 for session CASAUTO will not be mapped to SAS Library HLS_CDM_2. The CASLIB name is not valid for use as a 
      libref.
NOTE: CASLIB KY for session CASAUTO will be mapped to SAS Library KY.
NOTE: CASLIB MAYO for session CASAUTO will be mapped to SAS Library MAYO.
NOTE: CASLIB MCO_INS for session CASAUTO will be mapped to SAS Library MCO_INS.
NOTE: CASLIB MDE for session CASAUTO will be mapped to SAS Library MDE.
NOTE: CASLIB MS for session CASAUTO will be mapped to SAS Library MS.
NOTE: CASLIB Mendeley for session CASAUTO will be mapped to SAS Library MENDELEY.
NOTE: CASLIB ModelPerformanceData for session CASAUTO will not be mapped to SAS Library ModelPerformanceData. The CASLIB name is 
      not valid for use as a libref.
NOTE: CASLIB Models for session CASAUTO will be mapped to SAS Library MODELS.
NOTE: CASLIB PANKAJ for session CASAUTO will be mapped to SAS Library PANKAJ.
NOTE: CASLIB Public for session CASAUTO will be mapped to SAS Library PUBLIC.
NOTE: CASLIB RSHIFT for session CASAUTO will be mapped to SAS Library RSHIFT.
NOTE: CASLIB SAS_API for session CASAUTO will be mapped to SAS Library SAS_API.
NOTE: CASLIB SNOWFLAKE_SCR_AWS for session CASAUTO will not be mapped to SAS Library SNOWFLAKE_SCR_AWS. The CASLIB name is not 
32                                                         The SAS System                      Tuesday, January 21, 2025 01:08:16 PM

      valid for use as a libref.
NOTE: CASLIB ST_MAPS for session CASAUTO will be mapped to SAS Library ST_MAPS.
NOTE: CASLIB Samples for session CASAUTO will be mapped to SAS Library SAMPLES.
NOTE: CASLIB SnowflakeHosted for session CASAUTO will not be mapped to SAS Library SnowflakeHosted. The CASLIB name is not valid 
      for use as a libref.
NOTE: CASLIB SystemData for session CASAUTO will not be mapped to SAS Library SystemData. The CASLIB name is not valid for use as a 
      libref.
NOTE: CASLIB TCOC for session CASAUTO will be mapped to SAS Library TCOC.
NOTE: CASLIB TN for session CASAUTO will be mapped to SAS Library TN.
NOTE: CASLIB XMB111_ADaM for session CASAUTO will not be mapped to SAS Library XMB111_ADaM. The CASLIB name is not valid for use as 
      a libref.
NOTE: CASLIB XMB_SDTM for session CASAUTO will be mapped to SAS Library XMB_SDTM.
NOTE: CASLIB emplben for session CASAUTO will be mapped to SAS Library EMPLBEN.
NOTE: CASLIB mass_synthea for session CASAUTO will not be mapped to SAS Library mass_synthea. The CASLIB name is not valid for use 
      as a libref.
1593 +
1594 +%let pathname=/nfsshare/sashls2/mattb/XMB111;
1595 +%let rootdir=/nfsshare/sashls2/mattb/XMB111;
1596 +
1597 +%let ptitle1=%str(ABCD, Inc.);
1598 +%let ptitle2=%str(XMB-111 Draft);
1599 +
1600 +%let ddt=&pathname./doc/ddt.xls;
SYMBOLGEN:  Macro variable PATHNAME resolves to /nfsshare/sashls2/mattb/XMB111
1601 +%let sdtm=&pathname./doc/sdtm.xls;
SYMBOLGEN:  Macro variable PATHNAME resolves to /nfsshare/sashls2/mattb/XMB111
1602 +
1603 +libname raw "&pathname./data/Rawdata";
SYMBOLGEN:  Macro variable PATHNAME resolves to /nfsshare/sashls2/mattb/XMB111
NOTE: Libref RAW was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /nfsshare/sashls2/mattb/XMB111/data/Rawdata
1604 +libname sdtm "&pathname./data/SDTM";
SYMBOLGEN:  Macro variable PATHNAME resolves to /nfsshare/sashls2/mattb/XMB111
NOTE: Libref SDTM was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /nfsshare/sashls2/mattb/XMB111/data/SDTM
1605 +*libname derived "&pathname./data/ADaM";
1606 +%sysfunc(ifc(%sysfunc(libref(derived)),libname derived "&pathname./data/ADaM",));
SYMBOLGEN:  Macro variable PATHNAME resolves to /nfsshare/sashls2/mattb/XMB111
NOTE: Libref DERIVED was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /nfsshare/sashls2/mattb/XMB111/data/ADaM
1607 +
1608 +libname psmac   "&pathname./macros" access=read;
SYMBOLGEN:  Macro variable PATHNAME resolves to /nfsshare/sashls2/mattb/XMB111
NOTE: Libref PSMAC was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /nfsshare/sashls2/mattb/XMB111/macros
1609 +libname fmtdata "&pathname./data/ADaM";
SYMBOLGEN:  Macro variable PATHNAME resolves to /nfsshare/sashls2/mattb/XMB111
NOTE: Libref FMTDATA refers to the same physical library as DERIVED.
NOTE: Libref FMTDATA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /nfsshare/sashls2/mattb/XMB111/data/ADaM
1610 +libname library "&pathname./data/ADaM";
SYMBOLGEN:  Macro variable PATHNAME resolves to /nfsshare/sashls2/mattb/XMB111
NOTE: Libref LIBRARY refers to the same physical library as FMTDATA.
33                                                         The SAS System                      Tuesday, January 21, 2025 01:08:16 PM

NOTE: Libref LIBRARY was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /nfsshare/sashls2/mattb/XMB111/data/ADaM
1611 +
1612 +%global rawdata derdata suppkeep;
1613 +%let rawdata=raw;
1614 +%let derdata=derived;
1615 +%let suppkeep=%str(studyid rdomain usubjid idvar idvarval qnam qlabel qval qorig qeval);
1616 +
1617 +%let output =&pathname./programs/Output;
SYMBOLGEN:  Macro variable PATHNAME resolves to /nfsshare/sashls2/mattb/XMB111
1618 +%let program=&pathname./programs/;
SYMBOLGEN:  Macro variable PATHNAME resolves to /nfsshare/sashls2/mattb/XMB111
1619 +
1620 +%*** set treatment variables used in MSS, MFREQ;
1621 +%global ovtrt tottrt;
1622 +%let ovtrt=6;
1623 +%let tottrt=6;
1624 +
1625 +*** set global macro vars;
1626 +%global study studynum keepdemo draft_final trtspace demovars ps ls;
1627 +%let study=;
1628 +%let studynum=;
1629 +%let keepdemo=;
1630 +%let draft_final=FINAL;
1631 +%let trtspace=4;
1632 +%let demovars=%str(usubjid age atrt rfendtc rfendtn rfstdtn rfstdtc cnstdtn q_safeas q_immuas race sex tbsa);
1633 +%let ps=50;
1634 +%let ls=130;
1635 +
1636 +options linesize=136 pagesize=50 formchar="|----|+|---+=|-/\<>*";
1637 +
1638 +options mautosource mrecall missing='';
1639 +options sasautos=("&pathname" "&pathname./macros" sasautos) fmtsearch=(fmtdata raw WORK);
SYMBOLGEN:  Macro variable PATHNAME resolves to /nfsshare/sashls2/mattb/XMB111
SYMBOLGEN:  Macro variable PATHNAME resolves to /nfsshare/sashls2/mattb/XMB111
1640 +
1641 +ods path sashelp.tmplmst(read); * &derdata..matt;
1642 +
1643 +%let options=mprint center ps=45 ls=132;
1644 +%let moptions=macrogen symbolgen /* mlogic */;
1645 +%let topdatef=date9.;
1646 +
1647 +%let fpgfln=%str(put '\b0\f4\fs16\pard\par '; );
1648 +%let border=%str(\brdrb\brdrs);
1649 +
1650 +%let ori=l;     *** landscape;
1651 +
34                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

1652 +data _null_;
1653 +   daytim=put("&sysdate"d,date9.)||" "||put("&systime"t,time8.);
SYMBOLGEN:  Macro variable SYSDATE resolves to 21JAN25
SYMBOLGEN:  Macro variable SYSTIME resolves to 18:08
1654 +   call symput("nowdate", daytim);
1655 +run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1656 +
1657 +options VARLENCHK = NOWARN;
NOTE: %INCLUDE (level 1) ending.
1658  filename _flw_pr clear;
NOTE: Fileref _FLW_PR has been deassigned.
1659  
1660  /* region: Generated macro cleanup */
1661  %symdel _inputCount / nowarn;
1662  %symdel _outputCount / nowarn;
1663  %symdel _output1 / nowarn;
1664  
1665  /* endregion */
1666  
1667  
1668  /* region: Generated step cleanup for autoexec.sas */
1669  %_flw_action_end(id-1728966431888-1089, WORK._flw1728966431888108_0_0_1, WORK, "_flw1728966431888108_0_0_1");
MLOGIC(_FLW_ACTION_END):  Beginning execution.
MLOGIC(_FLW_ACTION_END):  Parameter NODES has value id-1728966431888-1089
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_LIBS has value WORK._flw1728966431888108_0_0_1
MLOGIC(_FLW_ACTION_END):  Parameter LIBS has value WORK
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_NAMES has value "_flw1728966431888108_0_0_1"
MPRINT(_FLW_ACTION_END):   data _null_;
MPRINT(_FLW_ACTION_END):   attrib next_table_name length = $32 informat = $32. format = $32. dtStartStr length = $26 informat = $26. 
format = $26.;
MLOGIC(_FLW_ACTION_END):  %LOCAL  I NEXT_TABLE
SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966431888108_0_0_1
MLOGIC(_FLW_ACTION_END):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is 1.  
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE)
SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966431888108_0_0_1
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_LIB)
SYMBOLGEN:  Macro variable LIBS resolves to WORK
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE_NAME)
SYMBOLGEN:  Macro variable TABLE_NAMES resolves to "_flw1728966431888108_0_0_1"
SYMBOLGEN:  Macro variable I resolves to 1
35                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

SYMBOLGEN:  Macro variable NEXT_TABLE_NAME resolves to "_flw1728966431888108_0_0_1"
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(_FLW_ACTION_END):   next_table_name = kreverse(ksubstr(kreverse(ksubstr(kstrip(""_flw1728966431888108_0_0_1""),2)),2));
MLOGIC(_FLW_ACTION_END):  %LET (variable name is TABLE_EXISTS)
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966431888108_0_0_1
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966431888108_0_0_1
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_LIB resolves to WORK
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable TABLE_EXISTS resolves to 0
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_TABLE_|WORK|" next_table_name +(-1) "|0";
MLOGIC(_FLW_ACTION_END):  %DO loop index variable I is now 2; loop will not iterate again.
MPRINT(_FLW_ACTION_END):   dtStartStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966431888-1089
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_END_|" dtStartStr +(-1) "|id-1728966431888-1089";
MPRINT(_FLW_ACTION_END):   run;

_FLW_ACTION_TABLE_|WORK|_flw1728966431888108_0_0_1|0
_FLW_ACTION_END_|2025-01-21T13:08:16+00:00|id-1728966431888-1089
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(_FLW_ACTION_END):  Ending execution.
1670  /* endregion */
1671  
1672  /*===========================================================================*
1673  * Node name:        d0_dm.sas
1674  * Node ID:          id-1728966432005-1183
1675  *
1676  * Input Tables:
1677  *   WORK._flw1728966431888108_0_0_1
1678  *
1679  * Output Tables:
1680  *   WORK._flw1728966432005118_0_0_2
1681  *
1682  * Step name:        SAS Program
1683  * Step path:        /dataFlows/steps/a7190700-f59c-4a94-afe2-214ce639fcde
1684  * Step description: Run user written SAS code.
1685  *----------------------------------------------------------------------------*/
1686  
1687  /* region: Generated step setup */
1688  %_flw_action_start(id-1728966432005-1183);
MLOGIC(_FLW_ACTION_START):  Beginning execution.
MLOGIC(_FLW_ACTION_START):  Parameter NODES has value id-1728966432005-1183
MPRINT(_FLW_ACTION_START):   data _null_;
36                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

MPRINT(_FLW_ACTION_START):   dtEndStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966432005-1183
MPRINT(_FLW_ACTION_START):   put "_FLW_ACTION_START_|" dtEndStr +(-1) "|id-1728966432005-1183";
MPRINT(_FLW_ACTION_START):   run;

_FLW_ACTION_START_|2025-01-21T13:08:16+00:00|id-1728966432005-1183
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(_FLW_ACTION_START):  Ending execution.
1689  /* endregion */
1690  
1691  
1692  /* region: Generated macro initialization */
1693  %let _inputCount = 1;
1694  %let _outputCount = 1;
1695  %let _input1 = WORK._flw1728966431888108_0_0_1;
1696  %let _output1 = WORK._flw1728966432005118_0_0_2;
1697  
1698  /* endregion */
1699  
1700  FILENAME _flw_pr "/nfsshare/sashls2/mattb/XMB111/programs/d0_dm.sas" encoding="UTF-8";
1701  %include _flw_pr / source2;
NOTE: %INCLUDE (level 1) file _FLW_PR is file /nfsshare/sashls2/mattb/XMB111/programs/d0_dm.sas.
1702 +********************************************************************************;
1703 +***
1704 +*** Program:        XMB111/programs/d0_dm.sas
1705 +*** Programmer:     Matt Becker
1706 +*** Date Created:   02Jun2024
1707 +***
1708 +*** Input :         SDTM DM, DS, VS
1709 +***
1710 +*** Output:         Derived DM dataset
1711 +***
1712 +*** Purpose:        To create the derived DM dataset
1713 +***
1714 +*** Comments:
1715 +***
1716 +*** Software:       SAS Viya 4
1717 +***
1718 +*** Modifications:
1719 +***
1720 +*** Date       Programmer        Description
1721 +*** ---------  ----------------  --------------
1722 +***
1723 +********************************************************************************;
37                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

1724 +data dm;
SYMBOLGEN:  Macro variable RAWDATA resolves to raw
1725 +  set &rawdata..dm(drop=race);
NOTE: Data file RAW.DM.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. 
      Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
1726 +  length age atrt x_race dmdtn 8 x_raceot $70 domain $2 usubjid $25 subjid $14 ageu brthdtc dmdtc $10 race $100 arm $20 armcd $8
1727 +         country $3 sexn 4;
1728 +  format brthdtn dmdtn date9.;
1729 +  domain='DM';
1730 +  arm='Nicardopine';
1731 +  armcd='A';
1732 +  country='USA';
1733 +  studyid='XMB111';
1734 +  usubjid=trim(left(studyid))||'-'||trim(left(site))||'-'||trim(left(randomno));
1735 +  subjid=trim(left(site))||'-'||trim(left(randomno));
1736 +  brthdtc=put(brthdtn,yymmdd10.);
1737 +  dmdtn=dov;
1738 +  dmdtc=put(dmdtn,yymmdd10.);
1739 +  age=round((intck('month',brthdtn,dmdtn) - (day(dmdtn) < day(brthdtn))) / 12,.1);
1740 +  ageu='Years';
1741 +  atrt=(0<=age<=2.9)*1 + (3<=age<=6.9)*2 + (7<=age<=11.9)*3 + (12<=age<=17.9)*4;
1742 +  if atrt not in(1, 2, 3, 4) then put "Age does not fit in any age group" usubjid=;
1743 +  race=trim(left(racec));
1744 +  if upcase(racec)="AMERICAN INDIAN OR ALASKA NATIVE" then x_race=1;
1745 +  else if upcase(racec)="ASIAN" then x_race=2;
1746 +  else if upcase(racec)="BLACK OR AFRICAN AMERICAN" then x_race=3;
1747 +  else if upcase(racec)="HISPANIC" then x_race=4;
1748 +  else if upcase(racec)="NATIVE HAWAIIAN/PACIFIC ISLANDER" then x_race=5;
1749 +  else if upcase(racec)="WHITE" then x_race=6;
1750 +  else x_race=7;
1751 +  if sex='M' then sexn=1;
1752 +  else if sex='F' then sexn=2;
1753 +  if raceoth ne '' then x_raceot=raceoth;
1754 +run;

NOTE: There were 32 observations read from the data set RAW.DM.
NOTE: The data set WORK.DM has 32 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

1755 +
1756 +proc sort data=dm;
1757 +  by site randomno;
1758 +
1759 +%*** Get study drug start from SDA dataset;

38                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

NOTE: There were 32 observations read from the data set WORK.DM.
NOTE: The data set WORK.DM has 32 observations and 30 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1760 +proc sort data=&rawdata..sda out=sda(keep=site randomno exdtc);
SYMBOLGEN:  Macro variable RAWDATA resolves to raw
NOTE: Data file RAW.SDA.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. 
      Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
1761 +  by site randomno exdtc;
1762 +  where exyn='Y';
1763 +

NOTE: There were 30 observations read from the data set RAW.SDA.
      WHERE exyn='Y';
NOTE: The data set WORK.SDA has 30 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

1764 +data sda(rename=(exdtc=rfstdtn));
1765 +  set sda;
1766 +  by site randomno exdtc;
1767 +  if first.randomno;
1768 +run;

NOTE: There were 30 observations read from the data set WORK.SDA.
NOTE: The data set WORK.SDA has 30 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1769 +
1770 +data dm;
1771 +  merge dm(in=x) sda(in=y);
1772 +  length rfstdtc $10;
1773 +  by site randomno;
1774 +  if x;
1775 +  rfstdtc=put(rfstdtn,yymmdd10.);
1776 +run;

NOTE: There were 32 observations read from the data set WORK.DM.
NOTE: There were 30 observations read from the data set WORK.SDA.
NOTE: The data set WORK.DM has 32 observations and 32 variables.
39                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1777 +
1778 +%*** Get reference end date from DS dataset;
1779 +proc sort data=&rawdata..ds out=ds(keep=site randomno dsstdtc rename=(dsstdtc=rfendtn));
SYMBOLGEN:  Macro variable RAWDATA resolves to raw
NOTE: Data file RAW.DS.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. 
      Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
1780 +  by site randomno;
1781 +  where dsdecod not in(11,12);
1782 +

NOTE: There were 30 observations read from the data set RAW.DS.
      WHERE dsdecod not in (11, 12);
NOTE: The data set WORK.DS has 30 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

1783 +data dm;
1784 +  merge dm(in=x) ds(in=y);
1785 +  by site randomno;
1786 +  length rfendtc $10;
1787 +  if x;
1788 +  rfendtc=put(rfendtn,yymmdd10.);
1789 +run;

NOTE: There were 32 observations read from the data set WORK.DM.
NOTE: There were 30 observations read from the data set WORK.DS.
NOTE: The data set WORK.DM has 32 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1790 +
1791 +%*** Get date of consent, did subject meet all eligibility criteria from the OE panel;
1792 +proc sort data=&rawdata..oe out=oe(keep=site randomno cnstdtn oeelig rename=(oeelig=q_oeelig));
SYMBOLGEN:  Macro variable RAWDATA resolves to raw
NOTE: Data file RAW.OE.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. 
      Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
1793 +  by site randomno;
1794 +  where cnstdtn ne .;
1795 +
40                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM


NOTE: There were 32 observations read from the data set RAW.OE.
      WHERE cnstdtn not = .;
NOTE: The data set WORK.OE has 32 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

1796 +data oe;
1797 +  set oe;
1798 +  by site randomno;
1799 +  if first.randomno;
1800 +run;

NOTE: There were 32 observations read from the data set WORK.OE.
NOTE: The data set WORK.OE has 32 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1801 +
1802 +data dm;
1803 +  merge dm(in=x) oe(in=y);
1804 +  by site randomno;
1805 +  length dmdy 8 q_infcst q_noteli q_safeas $1;
1806 +  if x;
1807 +  if cnstdtn ne . then q_infcst='Y';
1808 +  else q_infcst='N';
1809 +  if q_infcst='Y' and q_oeelig='N' then q_noteli='Y';
1810 +  else q_noteli='N';
1811 +  if rfstdtn ne . then q_safeas='Y';
1812 +  else q_safeas='N';
1813 +  %mstudydy(todate=dmdtn,basedate=rfstdtn,studyday=dmdy);
MLOGIC:  Beginning compilation of MSTUDYDY using the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mstudydy.sas.
MLOGIC:  Ending compilation of MSTUDYDY.
MLOGIC(MSTUDYDY):  Beginning execution.
MLOGIC(MSTUDYDY):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mstudydy.sas
MLOGIC(MSTUDYDY):  Parameter TODATE has value dmdtn
MLOGIC(MSTUDYDY):  Parameter BASEDATE has value rfstdtn
MLOGIC(MSTUDYDY):  Parameter STUDYDAY has value dmdy
SYMBOLGEN:  Macro variable TODATE resolves to dmdtn
SYMBOLGEN:  Macro variable BASEDATE resolves to rfstdtn
MLOGIC(MSTUDYDY):  %IF condition &todate= |&basedate= is FALSE
SYMBOLGEN:  Macro variable STUDYDAY resolves to dmdy
SYMBOLGEN:  Macro variable TODATE resolves to dmdtn
SYMBOLGEN:  Macro variable BASEDATE resolves to rfstdtn
41                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

SYMBOLGEN:  Macro variable TODATE resolves to dmdtn
SYMBOLGEN:  Macro variable BASEDATE resolves to rfstdtn
MPRINT(MSTUDYDY):   dmdy=dmdtn-rfstdtn+(dmdtn ge rfstdtn);
MLOGIC(MSTUDYDY):  Ending execution.
1814 +run;

NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      2 at 1813:21   2 at 1813:31   
NOTE: There were 32 observations read from the data set WORK.DM.
NOTE: There were 32 observations read from the data set WORK.OE.
NOTE: The data set WORK.DM has 32 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

1815 +
1816 +%*** Get disposition information;
1817 +proc sort data=&rawdata..ds out=ds(keep=site randomno dsyn dsdecod dsdecodc dsrsntrc dsrsntr rename=(dsyn=q_comp));
SYMBOLGEN:  Macro variable RAWDATA resolves to raw
NOTE: Data file RAW.DS.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. 
      Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
1818 +  by site randomno;
1819 +

NOTE: There were 32 observations read from the data set RAW.DS.
NOTE: The data set WORK.DS has 32 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

1820 +data dm(rename=(dsdecodc=dsdecod));
1821 +  merge dm(in=x) ds(in=y);
1822 +  by site randomno;
1823 +  length q_eligmd $1 dsdecodn medrecn 8 medrecd $100;
1824 +  if x;
1825 +  if dsdecod=12 then q_eligmd='Y';
1826 +  else q_eligmd='N';
1827 +  dsdecodn=dsdecod;
1828 +  medrecd=dsrsntrc;
1829 +  medrecn=dsrsntr;
1830 +  drop dsdecod;
1831 +run;

NOTE: There were 32 observations read from the data set WORK.DM.
NOTE: There were 32 observations read from the data set WORK.DS.
42                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

NOTE: The data set WORK.DM has 32 observations and 48 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1832 +
1833 +%*** Get immunogenecity information;
1834 +proc sort data=&rawdata..spc out=spc(keep=site randomno visit);
SYMBOLGEN:  Macro variable RAWDATA resolves to raw
NOTE: Data file RAW.SPC.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. 
      Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
1835 +  by site randomno visit;
1836 +  where spyn='Y';
1837 +

NOTE: There were 58 observations read from the data set RAW.SPC.
      WHERE spyn='Y';
NOTE: The data set WORK.SPC has 58 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

1838 +data spc(drop=visit);
1839 +  set spc;
1840 +  by site randomno visit;
1841 +  length flagx $15 q_immuas $1;
1842 +  retain flagx;
1843 +  if first.randomno then flagx='';
1844 +  flagx=trim(left(flagx))||' '||trim(left(put(visit,3.)));
1845 +  if last.randomno then do;
1846 +    if index(flagx,'0 ') and (index(flagx,'1 ') or index(flagx,'2 ') or index(flagx,'29 ')) then q_immuas='Y';
1847 +	else q_immuas='N';
1848 +	output;
1849 +  end;
1850 +run;

NOTE: There were 58 observations read from the data set WORK.SPC.
NOTE: The data set WORK.SPC has 30 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1851 +
1852 +data dm;
1853 +  merge dm(in=x) spc(in=y);
43                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

1854 +  by site randomno;
1855 +  if x;
1856 +  if rfstdtn ne . and q_immuas='Y' then q_immuas='Y';
1857 +  else q_immuas='N';
1858 +run;

NOTE: There were 32 observations read from the data set WORK.DM.
NOTE: There were 30 observations read from the data set WORK.SPC.
NOTE: The data set WORK.DM has 32 observations and 50 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1859 +
1860 +%*** Get height and weight;
1861 +proc sort data=&rawdata..vs out=vs(keep=site randomno ornht ornwt ornhtu ornwtu);
SYMBOLGEN:  Macro variable RAWDATA resolves to raw
NOTE: Data file RAW.VS.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. 
      Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
1862 +  by site randomno;
1863 +  where visit=0;
1864 +

NOTE: There were 30 observations read from the data set RAW.VS.
      WHERE visit=0;
NOTE: The data set WORK.VS has 30 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

1865 +data dm(rename=(site=siteid));
1866 +  merge dm(in=x) vs(in=y);
1867 +  by site randomno;
1868 +  length height weight tbsa 8;
1869 +  if x;
1870 +  if upcase(ornhtu)='CM' then height=ornht;
1871 +  else if upcase(ornhtu)='IN' then height=ornht*2.54;
1872 +  if upcase(ornwtu)='KG' then weight=ornwt;
1873 +  else if upcase(ornwtu)='LBS' then weight=ornwt*0.454;
1874 +  tbsa=sqrt((height*weight)/3600);
1875 +run;

NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      2 at 1874:8    2 at 1874:20   2 at 1874:28   
NOTE: There were 32 observations read from the data set WORK.DM.
44                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

NOTE: There were 30 observations read from the data set WORK.VS.
NOTE: The data set WORK.DM has 32 observations and 57 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1876 +
1877 +proc casutil;
NOTE: The UUID 'd957388a-615c-ff46-9d0a-c37fd7dca67e' is connected using session CASAUTO.
1878 +   droptable casdata="XMB111_DM" incaslib="public" quiet;
NOTE: The Cloud Analytic Services server processed the request in 0.008467 seconds.
1879 +run;

1880 +

NOTE: PROCEDURE CASUTIL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

1881 +proc casutil;
NOTE: The UUID 'd957388a-615c-ff46-9d0a-c37fd7dca67e' is connected using session CASAUTO.
1882 +	
1882!+ load data=derived.dm outcaslib="public"
1883 +	casout="XMB111_DM" replace;
NOTE: DERIVED.DM was successfully added to the "Public" caslib as "XMB111_DM".
1884 +    promote incaslib="public" casdata="XMB111_DM" outcaslib="public";
NOTE: Cloud Analytic Services promoted table XMB111_DM in caslib Public to table XMB111_DM in caslib public.
NOTE: The Cloud Analytic Services server processed the request in 0.009978 seconds.
1885 +run;

1886 +
1887 +%mimpddt(micsv=DM, miin=dm, miout=&derdata..dm, mlbl=DM Analysis Dataset);
MLOGIC:  Beginning compilation of MIMPDDT using the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mimpddt.sas.
MLOGIC:  Ending compilation of MIMPDDT.
MLOGIC(MIMPDDT):  Beginning execution.
MLOGIC(MIMPDDT):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mimpddt.sas
SYMBOLGEN:  Macro variable DERDATA resolves to derived
MLOGIC(MIMPDDT):  Parameter MICSV has value DM
MLOGIC(MIMPDDT):  Parameter MIIN has value dm
MLOGIC(MIMPDDT):  Parameter MIOUT has value derived.dm
MLOGIC(MIMPDDT):  Parameter MLBL has value DM Analysis Dataset
MLOGIC(MIMPDDT):  Parameter MIKEEP has value Y
MLOGIC(MIMPDDT):  %LET (variable name is POPYN)
MPRINT(MIMPDDT):   *** get XLS file *** ;

NOTE: PROCEDURE CASUTIL used (Total process time):
45                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

      real time           0.14 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable DDT resolves to /nfsshare/sashls2/mattb/XMB111/doc/ddt.xls
MPRINT(MIMPDDT):   proc import out=oddt datafile="/nfsshare/sashls2/mattb/XMB111/doc/ddt.xls" dbms=xls replace;
MPRINT(MIMPDDT):   RXCL;
MPRINT(MIMPDDT):   sheet='Analysis Variable Metadata' ;
MPRINT(MIMPDDT):   run ;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options 
      MSGLEVEL=I.
NOTE: The import data set has 356 observations and 9 variables.
NOTE: WORK.ODDT data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.11 seconds
      cpu time            0.01 seconds
      

MPRINT(MIMPDDT):   *** define attribute variables *** ;
MPRINT(MIMPDDT):   data xls(keep=varname varlabel type clength fmtname) ;
MPRINT(MIMPDDT):   length varname $8 varlabel $40 type clength fmtname $15 ;
SYMBOLGEN:  Macro variable MICSV resolves to DM
MPRINT(MIMPDDT):   set oddt(where=(filename=upcase("DM"))) ;
MPRINT(MIMPDDT):   *varname=studyid;
MPRINT(MIMPDDT):   *varlabel=study_identifier;
MPRINT(MIMPDDT):   *type=char ;
MPRINT(MIMPDDT):   ;
MPRINT(MIMPDDT):   clength=put(length,best4.);
MPRINT(MIMPDDT):   *fmtname=_9_ ;
MPRINT(MIMPDDT):   if varname='Domain' then delete ;
MPRINT(MIMPDDT):   run ;

NOTE: There were 42 observations read from the data set WORK.ODDT.
      WHERE filename='DM';
NOTE: The data set WORK.XLS has 42 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(MIMPDDT):  %LET (variable name is MIKEEP)
SYMBOLGEN:  Macro variable MIKEEP resolves to Y
MPRINT(MIMPDDT):   *** Use ATTRIB statements to set the type, length and label *** ;
MPRINT(MIMPDDT):   data ce ;
MPRINT(MIMPDDT):   set xls (rename=(clength=length)) end=last ;
MPRINT(MIMPDDT):   retain allvars ;
MPRINT(MIMPDDT):   length allvars $1000 ;
46                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

MPRINT(MIMPDDT):   if _n_=1 then allvars=trim(varname) ;
MPRINT(MIMPDDT):   else allvars=trim(allvars) || ' ' || trim(varname) ;
SYMBOLGEN:  Macro variable MIOUT resolves to derived.dm
MPRINT(MIMPDDT):   if _n_=1 then call execute("data derived.dm (label='" || trim(varlabel) || "');") ;
MPRINT(MIMPDDT):   if _n_ ge 2 then do ;
MPRINT(MIMPDDT):   if upcase(type)='CHAR' then varlen=compress("$"||length) ;
MPRINT(MIMPDDT):   else varlen=compress(length) ;
MPRINT(MIMPDDT):   if fmtname="" then do ;
MPRINT(MIMPDDT):   call execute("attrib " || varname || " label='" || trim(varlabel) ||"' length=" || trim(varlen) || ";") ;
MPRINT(MIMPDDT):   end ;
MPRINT(MIMPDDT):   else do;
MPRINT(MIMPDDT):   call execute("attrib " || varname || " label='" || trim(varlabel) ||"' length=" || trim(varlen) || " format=" || 
trim(fmtname) || ";") ;
MPRINT(MIMPDDT):   end;
MPRINT(MIMPDDT):   end;
MPRINT(MIMPDDT):   if last then do;
MPRINT(MIMPDDT):   call symput('allvars',allvars) ;
SYMBOLGEN:  Macro variable MIIN resolves to dm
MPRINT(MIMPDDT):   call execute("set dm;");
SYMBOLGEN:  Macro variable MIKEEP resolves to Y
MLOGIC(MIMPDDT):  %IF condition &MIKEEP=Y is TRUE
MPRINT(MIMPDDT):   call execute("keep " || allvars || ";");
MPRINT(MIMPDDT):   call execute ("run;") ;
MPRINT(MIMPDDT):   end ;
MPRINT(MIMPDDT):   run ;

MPRINT(MIMPDDT):   data derived.dm (label='Study Identifier');
MPRINT(MIMPDDT):   attrib DOMAIN label='Domain Abbreviation' length=$2 format=$2.;
MPRINT(MIMPDDT):   attrib USUBJID label='Unique Subject Identifier' length=$25 format=$25.;
MPRINT(MIMPDDT):   attrib SUBJID label='Subject Identifier for the Study' length=$15 format=$15.;
MPRINT(MIMPDDT):   attrib AGE label='Age' length=8 format=8.1;
MPRINT(MIMPDDT):   attrib AGEU label='Age Units' length=$10 format=$10.;
MPRINT(MIMPDDT):   attrib ARM label='Description of Planned Arm' length=$20 format=$20.;
MPRINT(MIMPDDT):   attrib ARMCD label='Planned Arm Code' length=$8 format=$8.;
MPRINT(MIMPDDT):   attrib ATRT label='Age Group - numeric' length=8 format=8.;
MPRINT(MIMPDDT):   attrib BRTHDTC label='Date/Time of Birth' length=$10 format=$10.;
MPRINT(MIMPDDT):   attrib BRTHDTN label='Date/Time of Birth (Numeric)' length=8 format=DATE9.;
MPRINT(MIMPDDT):   attrib CNSTDTN label='Date of Informed Consent' length=8 format=DATE9.;
MPRINT(MIMPDDT):   attrib COUNTRY label='Country' length=$3 format=$3.;
MPRINT(MIMPDDT):   attrib DMDTC label='Date/Time of Collection' length=$10 format=$10.;
MPRINT(MIMPDDT):   attrib DMDTN label='Date/Time of Collection (Numeric)' length=8 format=DATE9.;
MPRINT(MIMPDDT):   attrib DMDY label='Study Day of Collection' length=8 format=12.;
MPRINT(MIMPDDT):   attrib DSDECOD label='Primary Reason for Not Completing Study' length=$28 format=$28.;
MPRINT(MIMPDDT):   attrib DSDECODN label='Primary Reason for Not Completing Study' length=8 format=8.;
MPRINT(MIMPDDT):   attrib HEIGHT label='Height (cm)' length=8 format=8.2;
MPRINT(MIMPDDT):   attrib MEDRECD label='Reason(s) Study Drug Not Received' length=$100 format=$100.;
MPRINT(MIMPDDT):   attrib MEDRECN label='Reason(s) Study Drug Not Received (Numer' length=8 format=8.;
MPRINT(MIMPDDT):   attrib Q_COMP label='Completed Study?' length=$1 format=$1.;
47                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

MPRINT(MIMPDDT):   attrib Q_ELIGMD label='Eligible But Did Not Receive Study Med' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib Q_IMMUAS label='Evaluable for Immunogenicity Analysis' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib Q_INFCST label='Provided Informed Consent' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib Q_NOTELI label='Informed Consent But Ineligible' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib Q_OEELIG label='Met All Eligibility Criteria?' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib Q_SAFEAS label='Evaluable for Safety Analysis' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib RACE label='Race' length=$100 format=$100.;
MPRINT(MIMPDDT):   attrib RANDOMNO label='Randomized Subject Number' length=$4 format=$4.;
MPRINT(MIMPDDT):   attrib RFENDTC label='Subject Reference End Date/Time' length=$14 format=$14.;
MPRINT(MIMPDDT):   attrib RFENDTN label='Subject Reference End Date/Time (Numeric' length=8 format=DATE9.;
MPRINT(MIMPDDT):   attrib RFSTDTC label='Subject Reference Start Date/Time' length=$14 format=$14.;
MPRINT(MIMPDDT):   attrib RFSTDTN label='Subject Reference Start Date/Time (Numer' length=8 format=DATE9.;
MPRINT(MIMPDDT):   attrib SEX label='Sex' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib SEXN label='Sex (Numeric)' length=4 format=SEXF.;
MPRINT(MIMPDDT):   attrib SITEID label='Study Site Identifier' length=$5 format=$5.;
MPRINT(MIMPDDT):   attrib TBSA label='Total Body Surface Area (TBSA)' length=8 format=8.2;
MPRINT(MIMPDDT):   attrib VISIT label='Visit' length=8 format=8.;
MPRINT(MIMPDDT):   attrib WEIGHT label='Weight (kg)' length=8 format=8.2;
MPRINT(MIMPDDT):   attrib X_RACE label='Race (Numeric)' length=8 format=RACEF.;
MPRINT(MIMPDDT):   attrib X_RACEOT label='Race - Other Specify' length=$70 format=$70.;
MPRINT(MIMPDDT):   set dm;
MPRINT(MIMPDDT):   keep STUDYID DOMAIN USUBJID SUBJID AGE AGEU ARM ARMCD ATRT BRTHDTC BRTHDTN CNSTDTN COUNTRY DMDTC DMDTN DMDY DSDECOD 
DSDECODN HEIGHT MEDRECD MEDRECN Q_COMP Q_ELIGMD Q_IMMUAS Q_INFCST Q_NOTELI Q_OEELIG Q_SAFEAS RACE RANDOMNO RFENDTC RFENDTN RFSTDTC 
RFSTDTN SEX SEXN SITEID TBSA VISIT WEIGHT X_RACE X_RACEOT ;
MPRINT(MIMPDDT):   run;
NOTE: There were 42 observations read from the data set WORK.XLS.
NOTE: The data set WORK.CE has 42 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: CALL EXECUTE generated line.
1    + data derived.dm (label='Study Identifier');
2    + attrib DOMAIN   label='Domain Abbreviation' length=$2 format=$2.;
MPRINT(MIMPDDT):  2
3    + attrib USUBJID  label='Unique Subject Identifier' length=$25 format=$25.;
MPRINT(MIMPDDT):  25
4    + attrib SUBJID   label='Subject Identifier for the Study' length=$15 format=$15.;
MPRINT(MIMPDDT):  15
5    + attrib AGE      label='Age' length=8 format=8.1;
6    + attrib AGEU     label='Age Units' length=$10 format=$10.;
MPRINT(MIMPDDT):  10
7    + attrib ARM      label='Description of Planned Arm' length=$20 format=$20.;
MPRINT(MIMPDDT):  20
8    + attrib ARMCD    label='Planned Arm Code' length=$8 format=$8.;
MPRINT(MIMPDDT):  8
9    + attrib ATRT     label='Age Group - numeric' length=8 format=8.;
48                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

10   + attrib BRTHDTC  label='Date/Time of Birth' length=$10 format=$10.;
MPRINT(MIMPDDT):  10
11   + attrib BRTHDTN  label='Date/Time of Birth (Numeric)' length=8 format=DATE9.;
12   + attrib CNSTDTN  label='Date of Informed Consent' length=8 format=DATE9.;
13   + attrib COUNTRY  label='Country' length=$3 format=$3.;
MPRINT(MIMPDDT):  3
14   + attrib DMDTC    label='Date/Time of Collection' length=$10 format=$10.;
MPRINT(MIMPDDT):  10
15   + attrib DMDTN    label='Date/Time of Collection (Numeric)' length=8 format=DATE9.;
16   + attrib DMDY     label='Study Day of Collection' length=8 format=12.;
17   + attrib DSDECOD  label='Primary Reason for Not Completing Study' length=$28 format=$28.;
MPRINT(MIMPDDT):  28
18   + attrib DSDECODN label='Primary Reason for Not Completing Study' length=8 format=8.;
19   + attrib HEIGHT   label='Height (cm)' length=8 format=8.2;
20   + attrib MEDRECD  label='Reason(s) Study Drug Not Received' length=$100 format=$100.;
MPRINT(MIMPDDT):  100
21   + attrib MEDRECN  label='Reason(s) Study Drug Not Received (Numer' length=8 format=8.;
22   + attrib Q_COMP   label='Completed Study?' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
23   + attrib Q_ELIGMD label='Eligible But Did Not Receive Study Med' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
24   + attrib Q_IMMUAS label='Evaluable for Immunogenicity Analysis' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
25   + attrib Q_INFCST label='Provided Informed Consent' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
26   + attrib Q_NOTELI label='Informed Consent But Ineligible' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
27   + attrib Q_OEELIG label='Met All Eligibility Criteria?' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
28   + attrib Q_SAFEAS label='Evaluable for Safety Analysis' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
29   + attrib RACE     label='Race' length=$100 format=$100.;
MPRINT(MIMPDDT):  100
30   + attrib RANDOMNO label='Randomized Subject Number' length=$4 format=$4.;
MPRINT(MIMPDDT):  4
31   + attrib RFENDTC  label='Subject Reference End Date/Time' length=$14 format=$14.;
MPRINT(MIMPDDT):  14
32   + attrib RFENDTN  label='Subject Reference End Date/Time (Numeric' length=8 format=DATE9.;
33   + attrib RFSTDTC  label='Subject Reference Start Date/Time' length=$14 format=$14.;
MPRINT(MIMPDDT):  14
34   + attrib RFSTDTN  label='Subject Reference Start Date/Time (Numer' length=8 format=DATE9.;
35   + attrib SEX      label='Sex' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
36   + attrib SEXN     label='Sex (Numeric)' length=4 format=SEXF.;
37   + attrib SITEID   label='Study Site Identifier' length=$5 format=$5.;
MPRINT(MIMPDDT):  5
38   + attrib TBSA     label='Total Body Surface Area (TBSA)' length=8 format=8.2;
39   + attrib VISIT    label='Visit' length=8 format=8.;
49                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

40   + attrib WEIGHT   label='Weight (kg)' length=8 format=8.2;
41   + attrib X_RACE   label='Race (Numeric)' length=8 format=RACEF.;
42   + attrib X_RACEOT label='Race - Other Specify' length=$70 format=$70.;
MPRINT(MIMPDDT):  70
43   + set dm;
44   + keep STUDYID DOMAIN USUBJID SUBJID AGE AGEU ARM ARMCD ATRT BRTHDTC BRTHDTN CNSTDTN COUNTRY DMDTC DMDTN DMDY DSDECOD DSDECODN 
HEIGHT MEDRECD MEDRECN Q_COMP Q_ELIGMD Q_IMMUAS Q_INFCST Q_NOTELI Q_OEELIG Q_SAFEAS RACE RANDOMNO RFENDTC RFENDTN RFSTDTC RFSTDTN
45   + SEX SEXN SITEID TBSA VISIT WEIGHT X_RACE X_RACEOT
46   +
47   +                                                                                                                                  
                                                                                                               ;
48   + run;

NOTE: There were 32 observations read from the data set WORK.DM.
NOTE: The data set DERIVED.DM has 32 observations and 42 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MIOUT resolves to derived.dm
SYMBOLGEN:  Macro variable MLBL resolves to DM Analysis Dataset
MPRINT(MIMPDDT):   data derived.dm(label=DM Analysis Dataset) ;
SYMBOLGEN:  Macro variable ALLVARS resolves to STUDYID DOMAIN USUBJID SUBJID AGE AGEU ARM ARMCD ATRT BRTHDTC BRTHDTN CNSTDTN COUNTRY 
            DMDTC DMDTN DMDY DSDECOD DSDECODN HEIGHT MEDRECD MEDRECN Q_COMP Q_ELIGMD Q_IMMUAS Q_INFCST Q_NOTELI Q_OEELIG Q_SAFEAS RACE 
            RANDOMNO RFENDTC RFENDTN RFSTDTC RFSTDTN SEX SEXN SITEID TBSA VISIT WEIGHT X_RACE X_RACEOT                                  
                                                                                                                                        
                                                                                                                                        
                                                                                                                                        
                                                                                                                                        
                                                                                                                                        
                                                           
MPRINT(MIMPDDT):   retain STUDYID DOMAIN USUBJID SUBJID AGE AGEU ARM ARMCD ATRT BRTHDTC BRTHDTN CNSTDTN COUNTRY DMDTC DMDTN DMDY 
DSDECOD DSDECODN HEIGHT MEDRECD MEDRECN Q_COMP Q_ELIGMD Q_IMMUAS Q_INFCST Q_NOTELI Q_OEELIG Q_SAFEAS RACE RANDOMNO RFENDTC RFENDTN 
RFSTDTC RFSTDTN SEX SEXN SITEID TBSA VISIT WEIGHT X_RACE X_RACEOT ;
SYMBOLGEN:  Macro variable MIOUT resolves to derived.dm
MPRINT(MIMPDDT):   set derived.dm ;
MPRINT(MIMPDDT):   run ;

NOTE: There were 32 observations read from the data set DERIVED.DM.
NOTE: The data set DERIVED.DM has 32 observations and 42 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
      

MLOGIC(MIMPDDT):  Ending execution.
1888 +
50                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

1889 +proc datasets lib=work nolist kill;
NOTE: Deleting WORK.CE (memtype=DATA).
NOTE: Deleting WORK.DM (memtype=DATA).
NOTE: Deleting WORK.DS (memtype=DATA).
NOTE: Deleting WORK.ODDT (memtype=DATA).
NOTE: Deleting WORK.OE (memtype=DATA).
NOTE: Deleting WORK.PROFILE (memtype=CATALOG).
NOTE: File WORK.PROFILE (memtype=CATALOG) cannot be deleted because it is in use.
NOTE: Deleting WORK.REGSTRY (memtype=ITEMSTOR).
NOTE: File WORK.REGSTRY (memtype=ITEMSTOR) cannot be deleted because it is in use.
NOTE: Deleting WORK.SASGOPT (memtype=CATALOG).
NOTE: File WORK.SASGOPT (memtype=CATALOG) cannot be deleted because it is in use.
NOTE: Deleting WORK.SASMAC3 (memtype=CATALOG).
NOTE: Deleting WORK.SASMACR (memtype=CATALOG).
NOTE: File WORK.SASMACR (memtype=CATALOG) cannot be deleted because it is in use.
NOTE: Deleting WORK.SDA (memtype=DATA).
NOTE: Deleting WORK.SPC (memtype=DATA).
NOTE: Deleting WORK.VS (memtype=DATA).
NOTE: Deleting WORK.XLS (memtype=DATA).
1890 +quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) ending.
1891  filename _flw_pr clear;
NOTE: Fileref _FLW_PR has been deassigned.
1892  
1893  /* region: Generated macro cleanup */
1894  %symdel _inputCount / nowarn;
1895  %symdel _outputCount / nowarn;
1896  %symdel _input1 / nowarn;
1897  %symdel _output1 / nowarn;
1898  
1899  /* endregion */
1900  
1901  
1902  /* region: Generated step cleanup for d0_dm.sas */
1903  %_flw_action_end(id-1728966432005-1183, WORK._flw1728966432005118_0_0_2, WORK, "_flw1728966432005118_0_0_2");
MLOGIC(_FLW_ACTION_END):  Beginning execution.
MLOGIC(_FLW_ACTION_END):  Parameter NODES has value id-1728966432005-1183
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_LIBS has value WORK._flw1728966432005118_0_0_2
MLOGIC(_FLW_ACTION_END):  Parameter LIBS has value WORK
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_NAMES has value "_flw1728966432005118_0_0_2"
MPRINT(_FLW_ACTION_END):   data _null_;
MPRINT(_FLW_ACTION_END):   attrib next_table_name length = $32 informat = $32. format = $32. dtStartStr length = $26 informat = $26. 
51                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

format = $26.;
MLOGIC(_FLW_ACTION_END):  %LOCAL  I NEXT_TABLE
SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966432005118_0_0_2
MLOGIC(_FLW_ACTION_END):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is 1.  
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE)
SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966432005118_0_0_2
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_LIB)
SYMBOLGEN:  Macro variable LIBS resolves to WORK
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE_NAME)
SYMBOLGEN:  Macro variable TABLE_NAMES resolves to "_flw1728966432005118_0_0_2"
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable NEXT_TABLE_NAME resolves to "_flw1728966432005118_0_0_2"
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(_FLW_ACTION_END):   next_table_name = kreverse(ksubstr(kreverse(ksubstr(kstrip(""_flw1728966432005118_0_0_2""),2)),2));
MLOGIC(_FLW_ACTION_END):  %LET (variable name is TABLE_EXISTS)
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966432005118_0_0_2
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966432005118_0_0_2
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_LIB resolves to WORK
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable TABLE_EXISTS resolves to 0
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_TABLE_|WORK|" next_table_name +(-1) "|0";
MLOGIC(_FLW_ACTION_END):  %DO loop index variable I is now 2; loop will not iterate again.
MPRINT(_FLW_ACTION_END):   dtStartStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966432005-1183
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_END_|" dtStartStr +(-1) "|id-1728966432005-1183";
MPRINT(_FLW_ACTION_END):   run;

_FLW_ACTION_TABLE_|WORK|_flw1728966432005118_0_0_2|0
_FLW_ACTION_END_|2025-01-21T13:08:17+00:00|id-1728966432005-1183
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(_FLW_ACTION_END):  Ending execution.
1904  /* endregion */
1905  
1906  /*===========================================================================*
1907  * Node name:        d1_ae.sas
1908  * Node ID:          id-1728966462042-1787
1909  *
1910  * Input Tables:
1911  *   WORK._flw1728966432005118_0_0_2
1912  *
52                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

1913  * Output Tables:
1914  *   WORK._flw1728966462042178_0_0_3
1915  *
1916  * Step name:        SAS Program
1917  * Step path:        /dataFlows/steps/a7190700-f59c-4a94-afe2-214ce639fcde
1918  * Step description: Run user written SAS code.
1919  *----------------------------------------------------------------------------*/
1920  
1921  /* region: Generated step setup */
1922  %_flw_action_start(id-1728966462042-1787);
MLOGIC(_FLW_ACTION_START):  Beginning execution.
MLOGIC(_FLW_ACTION_START):  Parameter NODES has value id-1728966462042-1787
MPRINT(_FLW_ACTION_START):   data _null_;
MPRINT(_FLW_ACTION_START):   dtEndStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966462042-1787
MPRINT(_FLW_ACTION_START):   put "_FLW_ACTION_START_|" dtEndStr +(-1) "|id-1728966462042-1787";
MPRINT(_FLW_ACTION_START):   run;

_FLW_ACTION_START_|2025-01-21T13:08:17+00:00|id-1728966462042-1787
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(_FLW_ACTION_START):  Ending execution.
1923  /* endregion */
1924  
1925  
1926  /* region: Generated macro initialization */
1927  %let _inputCount = 1;
1928  %let _outputCount = 1;
1929  %let _input1 = WORK._flw1728966432005118_0_0_2;
1930  %let _output1 = WORK._flw1728966462042178_0_0_3;
1931  
1932  /* endregion */
1933  
1934  FILENAME _flw_pr "/nfsshare/sashls2/mattb/XMB111/programs/d1_ae.sas" encoding="UTF-8";
1935  %include _flw_pr / source2;
NOTE: %INCLUDE (level 1) file _FLW_PR is file /nfsshare/sashls2/mattb/XMB111/programs/d1_ae.sas.
1936 +********************************************************************************;
1937 +***
1938 +*** Program:        XMB111/programs/d1_ae.sas
1939 +*** Programmer:     Matt Becker
1940 +*** Date Created:   02Jun2024
1941 +***
1942 +*** Input :         RAW AE, Derived DM
1943 +***
1944 +*** Output:         Derived AE dataset
53                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

1945 +***
1946 +*** Purpose:        To create the derived AE dataset
1947 +***
1948 +*** Comments:
1949 +***
1950 +*** Software:       SAS Viya 4
1951 +***
1952 +*** Modifications:
1953 +***
1954 +*** Date       Programmer        Description
1955 +*** ---------  ----------------  --------------
1956 +***
1957 +********************************************************************************;
1958 +data ae(drop=aeendtc aestdtc);
SYMBOLGEN:  Macro variable RAWDATA resolves to raw
1959 +  set &rawdata..ae(drop=aeout aerel rename=(aeacn=aeacnn));
NOTE: Data file RAW.AE.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. 
      Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
1960 +  length domain aecontrt $2 usubjid aeacn $25 aeacnoth $200 aeendtn aestdtn 8 aedur 4 aeout aerel aesev $50 q_addtrt $7
1961 +         q_aerslv $10;
1962 +  format aeendtn aestdtn date9.;
1963 +  domain='AE';
1964 +  usubjid=trim(left('XMB111'))||'-'||trim(left(site))||'-'||trim(left(randomno));
1965 +  aeacn=aeacnc;
1966 +  aeacnoth=aeacnosp;
1967 +  aecontrt=aecontr;
1968 +  aeendtn=aeendtc;
1969 +  aestdtn=aestdtc;
1970 +  aedur=aeendtn-aestdtn + (aeendtn>=aestdtn);
1971 +  aeout=aeoutc;
1972 +  aerel=aerelc;
1973 +  aesev=aetoxgrc;
1974 +  if upcase(aerel) in('POSSIBLY RELATED','PROBABLY RELATED','RELATED') then aetrtrel='Y';
1975 +  else aetrtrel='N';
1976 +  q_addtrt=aeaddyn;
1977 +  if aeongo='Y' then q_aerslv='ONGOING';
1978 +run;

NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      34 at 1970:16   34 at 1970:25   
NOTE: There were 101 observations read from the data set RAW.AE.
NOTE: The data set WORK.AE has 101 observations and 44 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

54                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

1979 +
1980 +data bc(rename=(bcspid=aespid bcnone=aenone bcterm=aeterm bcser=aeser));
SYMBOLGEN:  Macro variable RAWDATA resolves to raw
1981 +  set &rawdata..bc;
NOTE: Data file RAW.BC.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. 
      Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
1982 +  keep site randomno studyid domain usubjid bcnone bcterm bcspid bcser q_bcond aestdtn aeendtn aecontrt aesev q_addtrt
1983 +       q_aerslv;
1984 +  length domain aecontrt $2 usubjid $25 aeendtn aestdtn 8 aesev $50 q_bcond $1 q_addtrt $7 q_aerslv $10;
1985 +  format aeendtn aestdtn date9.;
1986 +  domain='AE';
1987 +  usubjid=trim(left('XMB111'))||'-'||trim(left(site))||'-'||trim(left(randomno));
1988 +  aecontrt=bccontr;
1989 +  aeendtn=bcendtc;
1990 +  aestdtn=bcstdtc;
1991 +  aesev=bctoxgrc;
1992 +  q_bcond='Y';
1993 +  q_addtrt=bcaddyn;
1994 +  if bcongo='Y' then q_aerslv='ONGOING';
1995 +run;

NOTE: There were 142 observations read from the data set RAW.BC.
NOTE: The data set WORK.BC has 142 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

1996 +
1997 +data ae;
1998 +  set ae bc;
1999 +run;

NOTE: There were 101 observations read from the data set WORK.AE.
NOTE: There were 142 observations read from the data set WORK.BC.
NOTE: The data set WORK.AE has 243 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2000 +
2001 +proc sort data=ae;
2002 +  by usubjid;
2003 +

NOTE: There were 243 observations read from the data set WORK.AE.
NOTE: The data set WORK.AE has 243 observations and 45 variables.
55                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2004 +proc sort data=&derdata..dm out=dm(keep=&demovars.);
SYMBOLGEN:  Macro variable DERDATA resolves to derived
SYMBOLGEN:  Macro variable DEMOVARS resolves to usubjid age atrt rfendtc rfendtn rfstdtn rfstdtc cnstdtn q_safeas q_immuas race sex tbsa
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
2005 +  by usubjid;
2006 +

NOTE: There were 32 observations read from the data set DERIVED.DM.
NOTE: The data set WORK.DM has 32 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

2007 +data ae;
2008 +  merge ae(in=x) dm(in=y);
2009 +  by usubjid;
2010 +  length aeendtc aestdtc $10;
2011 +  if x;
2012 +  aeendtc=put(aeendtn,yymmdd10.);
2013 +  aestdtc=put(aestdtn,yymmdd10.);
2014 +  if q_aerslv ne 'ONGOING' then q_aerslv=aestdtc;
2015 +  %mstudydy(todate=aestdtn,basedate=rfstdtn,studyday=aestdy);
MLOGIC(MSTUDYDY):  Beginning execution.
MLOGIC(MSTUDYDY):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mstudydy.sas
MLOGIC(MSTUDYDY):  Parameter TODATE has value aestdtn
MLOGIC(MSTUDYDY):  Parameter BASEDATE has value rfstdtn
MLOGIC(MSTUDYDY):  Parameter STUDYDAY has value aestdy
SYMBOLGEN:  Macro variable TODATE resolves to aestdtn
SYMBOLGEN:  Macro variable BASEDATE resolves to rfstdtn
MLOGIC(MSTUDYDY):  %IF condition &todate= |&basedate= is FALSE
SYMBOLGEN:  Macro variable STUDYDAY resolves to aestdy
SYMBOLGEN:  Macro variable TODATE resolves to aestdtn
SYMBOLGEN:  Macro variable BASEDATE resolves to rfstdtn
SYMBOLGEN:  Macro variable TODATE resolves to aestdtn
SYMBOLGEN:  Macro variable BASEDATE resolves to rfstdtn
MPRINT(MSTUDYDY):   aestdy=aestdtn-rfstdtn+(aestdtn ge rfstdtn);
MLOGIC(MSTUDYDY):  Ending execution.
2016 +  %mstudydy(todate=aeendtn,basedate=rfstdtn,studyday=aeendy);
MLOGIC(MSTUDYDY):  Beginning execution.
MLOGIC(MSTUDYDY):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mstudydy.sas
MLOGIC(MSTUDYDY):  Parameter TODATE has value aeendtn
MLOGIC(MSTUDYDY):  Parameter BASEDATE has value rfstdtn
56                                                           The SAS System                        Tuesday, January 21, 2025 01:08:16 PM

MLOGIC(MSTUDYDY):  Parameter STUDYDAY has value aeendy
SYMBOLGEN:  Macro variable TODATE resolves to aeendtn
SYMBOLGEN:  Macro variable BASEDATE resolves to rfstdtn
MLOGIC(MSTUDYDY):  %IF condition &todate= |&basedate= is FALSE
SYMBOLGEN:  Macro variable STUDYDAY resolves to aeendy
SYMBOLGEN:  Macro variable TODATE resolves to aeendtn
SYMBOLGEN:  Macro variable BASEDATE resolves to rfstdtn
SYMBOLGEN:  Macro variable TODATE resolves to aeendtn
SYMBOLGEN:  Macro variable BASEDATE resolves to rfstdtn
MPRINT(MSTUDYDY):   aeendy=aeendtn-rfstdtn+(aeendtn ge rfstdtn);
MLOGIC(MSTUDYDY):  Ending execution.
2017 +run;

NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      26 at 2015:21   26 at 2015:31   83 at 2016:21   83 at 2016:31   
NOTE: There were 243 observations read from the data set WORK.AE.
NOTE: There were 32 observations read from the data set WORK.DM.
NOTE: The data set WORK.AE has 243 observations and 61 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2018 +
2019 +proc sort data=ae out=allae;
2020 +  by aeterm;
2021 +  where q_bcond ne 'Y';

NOTE: There were 101 observations read from the data set WORK.AE.
      WHERE q_bcond not = 'Y';
NOTE: The data set WORK.ALLAE has 101 observations and 61 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2022 +proc sort data=raw.codeae out=codeae;
NOTE: Data file RAW.CODEAE.DATA is in a format that is native to another host, or the file encoding does not match the session 
      encoding. Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
2023 +  by aeterm;
2024 +

NOTE: There were 71 observations read from the data set RAW.CODEAE.
NOTE: The data set WORK.CODEAE has 71 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
57                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

      

2025 +data allae;
2026 +  merge allae(in=x) codeae(in=y);
2027 +  by aeterm;
2028 +  length aebodsys aedecod $200;
2029 +  if x;
2030 +  aebodsys=upcase(socterm);
2031 +  aedecod=upcase(prefterm);
2032 +run;

NOTE: There were 101 observations read from the data set WORK.ALLAE.
NOTE: There were 71 observations read from the data set WORK.CODEAE.
NOTE: The data set WORK.ALLAE has 101 observations and 73 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2033 +
2034 +proc sort data=ae out=allbc;
2035 +  by aeterm;
2036 +  where q_bcond eq 'Y';
2037 +

NOTE: There were 142 observations read from the data set WORK.AE.
      WHERE q_bcond='Y';
NOTE: The data set WORK.ALLBC has 142 observations and 61 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2038 +proc sort data=raw.codebc out=codebc(rename=(bcterm=aeterm));
NOTE: Data file RAW.CODEBC.DATA is in a format that is native to another host, or the file encoding does not match the session 
      encoding. Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
2039 +  by bcterm;
2040 +

NOTE: There were 81 observations read from the data set RAW.CODEBC.
NOTE: The data set WORK.CODEBC has 81 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

2041 +data allbc;
2042 +  merge allbc(in=x) codebc(in=y);
58                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

2043 +  by aeterm;
2044 +  length aebodsys aedecod $200;
2045 +  if x;
2046 +  aebodsys=upcase(socterm);
2047 +  aedecod=upcase(prefterm);
2048 +run;

NOTE: There were 142 observations read from the data set WORK.ALLBC.
NOTE: There were 81 observations read from the data set WORK.CODEBC.
NOTE: The data set WORK.ALLBC has 142 observations and 73 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2049 +
2050 +%*** Derive AETE, Subject Year;
2051 +data ae;
2052 +  set allae allbc;
2053 +  length subjyr 8;
2054 +  if aenone ne 'Y' and aestdtn>=rfstdtn then aete='Y';
2055 +  else aete='-';
2056 +  subjyr=((rfendtn-rfstdtn)+1)/365.25;
2057 +run;

NOTE: There were 101 observations read from the data set WORK.ALLAE.
NOTE: There were 142 observations read from the data set WORK.ALLBC.
NOTE: The data set WORK.AE has 243 observations and 75 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2058 +
2059 +/*
2060 +proc sort data=ae;
2061 +  by usubjid prefterm aestdtn aetoxgr;
2062 +
2063 +data ae;
2064 +  set ae;
2065 +  by usubjid prefterm aestdtn aetoxgr;
2066 +  if first.prefterm and aestdy<=0 and aete='-' and not last.prefterm and first.aetoxgr and not last.aetoxgr then aete='Y';
2067 +  else if aete='Y' then aete='Y';
2068 +  else aete='N';
2069 +run;
2070 +*/
2071 +
2072 +proc casutil;
59                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

NOTE: The UUID 'd957388a-615c-ff46-9d0a-c37fd7dca67e' is connected using session CASAUTO.
2073 +   droptable casdata="XMB111_AE" incaslib="public" quiet;
NOTE: The Cloud Analytic Services server processed the request in 0.009018 seconds.
2074 +run;

2075 +

NOTE: PROCEDURE CASUTIL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

2076 +proc casutil;
NOTE: The UUID 'd957388a-615c-ff46-9d0a-c37fd7dca67e' is connected using session CASAUTO.
2077 +	
2077!+ load data=derived.ae outcaslib="public"
2078 +	casout="XMB111_AE" replace;
NOTE: DERIVED.AE was successfully added to the "Public" caslib as "XMB111_AE".
2079 +    promote incaslib="public" casdata="XMB111_AE" outcaslib="public";
NOTE: Cloud Analytic Services promoted table XMB111_AE in caslib Public to table XMB111_AE in caslib public.
NOTE: The Cloud Analytic Services server processed the request in 0.010557 seconds.
2080 +run;

2081 +
2082 +%mimpddt(micsv=AE, miin=AE, miout=&derdata..AE, mlbl=Adverse Event Analysis Dataset);
MLOGIC(MIMPDDT):  Beginning execution.
MLOGIC(MIMPDDT):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mimpddt.sas
SYMBOLGEN:  Macro variable DERDATA resolves to derived
MLOGIC(MIMPDDT):  Parameter MICSV has value AE
MLOGIC(MIMPDDT):  Parameter MIIN has value AE
MLOGIC(MIMPDDT):  Parameter MIOUT has value derived.AE
MLOGIC(MIMPDDT):  Parameter MLBL has value Adverse Event Analysis Dataset
MLOGIC(MIMPDDT):  Parameter MIKEEP has value Y
MLOGIC(MIMPDDT):  %LET (variable name is POPYN)
MPRINT(MIMPDDT):   *** get XLS file *** ;

NOTE: PROCEDURE CASUTIL used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable DDT resolves to /nfsshare/sashls2/mattb/XMB111/doc/ddt.xls
MPRINT(MIMPDDT):   proc import out=oddt datafile="/nfsshare/sashls2/mattb/XMB111/doc/ddt.xls" dbms=xls replace;
MPRINT(MIMPDDT):   RXCL;
MPRINT(MIMPDDT):   sheet='Analysis Variable Metadata' ;
MPRINT(MIMPDDT):   run ;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options 
60                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

      MSGLEVEL=I.
NOTE: The import data set has 356 observations and 9 variables.
NOTE: WORK.ODDT data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
      

MPRINT(MIMPDDT):   *** define attribute variables *** ;
MPRINT(MIMPDDT):   data xls(keep=varname varlabel type clength fmtname) ;
MPRINT(MIMPDDT):   length varname $8 varlabel $40 type clength fmtname $15 ;
SYMBOLGEN:  Macro variable MICSV resolves to AE
MPRINT(MIMPDDT):   set oddt(where=(filename=upcase("AE"))) ;
MPRINT(MIMPDDT):   *varname=studyid;
MPRINT(MIMPDDT):   *varlabel=study_identifier;
MPRINT(MIMPDDT):   *type=char ;
MPRINT(MIMPDDT):   ;
MPRINT(MIMPDDT):   clength=put(length,best4.);
MPRINT(MIMPDDT):   *fmtname=_9_ ;
MPRINT(MIMPDDT):   if varname='Domain' then delete ;
MPRINT(MIMPDDT):   run ;

NOTE: There were 43 observations read from the data set WORK.ODDT.
      WHERE filename='AE';
NOTE: The data set WORK.XLS has 43 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MLOGIC(MIMPDDT):  %LET (variable name is MIKEEP)
SYMBOLGEN:  Macro variable MIKEEP resolves to Y
MPRINT(MIMPDDT):   *** Use ATTRIB statements to set the type, length and label *** ;
MPRINT(MIMPDDT):   data ce ;
MPRINT(MIMPDDT):   set xls (rename=(clength=length)) end=last ;
MPRINT(MIMPDDT):   retain allvars ;
MPRINT(MIMPDDT):   length allvars $1000 ;
MPRINT(MIMPDDT):   if _n_=1 then allvars=trim(varname) ;
MPRINT(MIMPDDT):   else allvars=trim(allvars) || ' ' || trim(varname) ;
SYMBOLGEN:  Macro variable MIOUT resolves to derived.AE
MPRINT(MIMPDDT):   if _n_=1 then call execute("data derived.AE (label='" || trim(varlabel) || "');") ;
MPRINT(MIMPDDT):   if _n_ ge 2 then do ;
MPRINT(MIMPDDT):   if upcase(type)='CHAR' then varlen=compress("$"||length) ;
MPRINT(MIMPDDT):   else varlen=compress(length) ;
MPRINT(MIMPDDT):   if fmtname="" then do ;
MPRINT(MIMPDDT):   call execute("attrib " || varname || " label='" || trim(varlabel) ||"' length=" || trim(varlen) || ";") ;
MPRINT(MIMPDDT):   end ;
MPRINT(MIMPDDT):   else do;
61                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

MPRINT(MIMPDDT):   call execute("attrib " || varname || " label='" || trim(varlabel) ||"' length=" || trim(varlen) || " format=" || 
trim(fmtname) || ";") ;
MPRINT(MIMPDDT):   end;
MPRINT(MIMPDDT):   end;
MPRINT(MIMPDDT):   if last then do;
MPRINT(MIMPDDT):   call symput('allvars',allvars) ;
SYMBOLGEN:  Macro variable MIIN resolves to AE
MPRINT(MIMPDDT):   call execute("set AE;");
SYMBOLGEN:  Macro variable MIKEEP resolves to Y
MLOGIC(MIMPDDT):  %IF condition &MIKEEP=Y is TRUE
MPRINT(MIMPDDT):   call execute("keep " || allvars || ";");
MPRINT(MIMPDDT):   call execute ("run;") ;
MPRINT(MIMPDDT):   end ;
MPRINT(MIMPDDT):   run ;

MPRINT(MIMPDDT):   data derived.AE (label='Study Identifier');
MPRINT(MIMPDDT):   attrib DOMAIN label='Domain Abbreviation' length=$2 format=$2.;
MPRINT(MIMPDDT):   attrib USUBJID label='Unique Subject Identifier' length=$25 format=$25.;
MPRINT(MIMPDDT):   attrib AGE label='Age' length=8 format=8.1;
MPRINT(MIMPDDT):   attrib ATRT label='Age Group - numeric' length=8 format=8.;
MPRINT(MIMPDDT):   attrib RFENDTC label='Subject Reference End Date/Time' length=$25 format=$25.;
MPRINT(MIMPDDT):   attrib RFENDTN label='Subject Reference End Date/Time (Numeric' length=8 format=DATE9.;
MPRINT(MIMPDDT):   attrib RFSTDTC label='Subject Reference Start Date/Time' length=$25 format=$25.;
MPRINT(MIMPDDT):   attrib RFSTDTN label='Subject Reference Start Date/Time (Numer' length=8 format=DATE9.;
MPRINT(MIMPDDT):   attrib CNSTDTN label='Informed Consent Date' length=8 format=DATE9.;
MPRINT(MIMPDDT):   attrib Q_SAFEAS label='Evaluable for Safety Analysis' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib Q_IMMUAS label='Evaluable for Immunogenicity Analysis' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib RACE label='Race' length=$33 format=$33.;
MPRINT(MIMPDDT):   attrib SEX label='Gender' length=$6 format=$6.;
MPRINT(MIMPDDT):   attrib TBSA label='Total Body Surface Area (TBSA)' length=8 format=8.2;
MPRINT(MIMPDDT):   attrib AENONE label='No Adverse Events?' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib AETERM label='AE Description' length=$200 format=$200.;
MPRINT(MIMPDDT):   attrib AEBODSYS label='Body System or Organ Class' length=$200 format=$200.;
MPRINT(MIMPDDT):   attrib AEDECOD label='Dictionary-Derived Term' length=$200 format=$200.;
MPRINT(MIMPDDT):   attrib AESTDTC label='Start Date/Time of Adverse Event' length=$14 format=$14.;
MPRINT(MIMPDDT):   attrib AESTDTN label='Start Date/Time of Adverse Event (Numeri' length=8 format=DATE9.;
MPRINT(MIMPDDT):   attrib AESTDY label='Study Day of Start of Adverse Event' length=4 format=4.;
MPRINT(MIMPDDT):   attrib AEENDTC label='End Date/Time of Adverse Event' length=$14 format=$14.;
MPRINT(MIMPDDT):   attrib AEENDTN label='End Date/Time of Adverse Event (Numeric)' length=8 format=DATE9.;
MPRINT(MIMPDDT):   attrib AEENDY label='Study Day of End of Adverse Event' length=4 format=4.;
MPRINT(MIMPDDT):   attrib AEACN label='Action Taken with Study Treatment' length=$25 format=$25.;
MPRINT(MIMPDDT):   attrib AEACNOTH label='Other Action Taken' length=$200 format=$200.;
MPRINT(MIMPDDT):   attrib AEACNN label='Action Taken with Study Treatment (Numer' length=4 format=4.;
MPRINT(MIMPDDT):   attrib AECONTRT label='Concomitant Medication Given?' length=$2 format=$2.;
MPRINT(MIMPDDT):   attrib AEDUR label='Duration of Adverse Event' length=4 format=4.;
MPRINT(MIMPDDT):   attrib AEHAYN label='Hypersensitivity AE' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib AEOUT label='Outcome of Adverse Event' length=$50 format=$50.;
MPRINT(MIMPDDT):   attrib AEREL label='Causality' length=$50 format=$50.;
62                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

MPRINT(MIMPDDT):   attrib AESER label='Serious Event' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib AESEV label='Severity/Intensity' length=$50 format=$50.;
MPRINT(MIMPDDT):   attrib AESPID label='Sponsor-Defined Identifier' length=$2 format=$2.;
MPRINT(MIMPDDT):   attrib AETE label='Treatment Emergent AE' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib AETOXGR label='Standard Toxicity Grade' length=8 format=4.;
MPRINT(MIMPDDT):   attrib AETRTREL label='Treatment Related AE' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib Q_ADDTRT label='Additional Treatment Given?' length=$7 format=$7.;
MPRINT(MIMPDDT):   attrib Q_AERSLV label='Resolve Date or Ongoing' length=$10 format=$10.;
MPRINT(MIMPDDT):   attrib Q_BCOND label='Baseline Condition?' length=$1 format=$1.;
MPRINT(MIMPDDT):   attrib SUBJYR label='Subject Year' length=8 format=8.4;
MPRINT(MIMPDDT):   set AE;
MPRINT(MIMPDDT):   keep STUDYID DOMAIN USUBJID AGE ATRT RFENDTC RFENDTN RFSTDTC RFSTDTN CNSTDTN Q_SAFEAS Q_IMMUAS RACE SEX TBSA AENONE 
AETERM AEBODSYS AEDECOD AESTDTC AESTDTN AESTDY AEENDTC AEENDTN AEENDY AEACN AEACNOTH AEACNN AECONTRT AEDUR AEHAYN AEOUT AEREL AESER 
AESEV AESPID AETE AETOXGR AETRTREL Q_ADDTRT Q_AERSLV Q_BCOND SUBJYR ;
MPRINT(MIMPDDT):   run;
NOTE: There were 43 observations read from the data set WORK.XLS.
NOTE: The data set WORK.CE has 43 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1    + data derived.AE (label='Study Identifier');
2    + attrib DOMAIN   label='Domain Abbreviation' length=$2 format=$2.;
MPRINT(MIMPDDT):  2
3    + attrib USUBJID  label='Unique Subject Identifier' length=$25 format=$25.;
MPRINT(MIMPDDT):  25
4    + attrib AGE      label='Age' length=8 format=8.1;
5    + attrib ATRT     label='Age Group - numeric' length=8 format=8.;
6    + attrib RFENDTC  label='Subject Reference End Date/Time' length=$25 format=$25.;
MPRINT(MIMPDDT):  25
7    + attrib RFENDTN  label='Subject Reference End Date/Time (Numeric' length=8 format=DATE9.;
8    + attrib RFSTDTC  label='Subject Reference Start Date/Time' length=$25 format=$25.;
MPRINT(MIMPDDT):  25
9    + attrib RFSTDTN  label='Subject Reference Start Date/Time (Numer' length=8 format=DATE9.;
10   + attrib CNSTDTN  label='Informed Consent Date' length=8 format=DATE9.;
11   + attrib Q_SAFEAS label='Evaluable for Safety Analysis' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
12   + attrib Q_IMMUAS label='Evaluable for Immunogenicity Analysis' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
13   + attrib RACE     label='Race' length=$33 format=$33.;
MPRINT(MIMPDDT):  33
14   + attrib SEX      label='Gender' length=$6 format=$6.;
MPRINT(MIMPDDT):  6
15   + attrib TBSA     label='Total Body Surface Area (TBSA)' length=8 format=8.2;
16   + attrib AENONE   label='No Adverse Events?' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
63                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

17   + attrib AETERM   label='AE Description' length=$200 format=$200.;
MPRINT(MIMPDDT):  200
18   + attrib AEBODSYS label='Body System or Organ Class' length=$200 format=$200.;
MPRINT(MIMPDDT):  200
19   + attrib AEDECOD  label='Dictionary-Derived Term' length=$200 format=$200.;
MPRINT(MIMPDDT):  200
20   + attrib AESTDTC  label='Start Date/Time of Adverse Event' length=$14 format=$14.;
MPRINT(MIMPDDT):  14
21   + attrib AESTDTN  label='Start Date/Time of Adverse Event (Numeri' length=8 format=DATE9.;
22   + attrib AESTDY   label='Study Day of Start of Adverse Event' length=4 format=4.;
23   + attrib AEENDTC  label='End Date/Time of Adverse Event' length=$14 format=$14.;
MPRINT(MIMPDDT):  14
24   + attrib AEENDTN  label='End Date/Time of Adverse Event (Numeric)' length=8 format=DATE9.;
25   + attrib AEENDY   label='Study Day of End of Adverse Event' length=4 format=4.;
26   + attrib AEACN    label='Action Taken with Study Treatment' length=$25 format=$25.;
MPRINT(MIMPDDT):  25
27   + attrib AEACNOTH label='Other Action Taken' length=$200 format=$200.;
MPRINT(MIMPDDT):  200
28   + attrib AEACNN   label='Action Taken with Study Treatment (Numer' length=4 format=4.;
29   + attrib AECONTRT label='Concomitant Medication Given?' length=$2 format=$2.;
MPRINT(MIMPDDT):  2
30   + attrib AEDUR    label='Duration of Adverse Event' length=4 format=4.;
31   + attrib AEHAYN   label='Hypersensitivity AE' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
32   + attrib AEOUT    label='Outcome of Adverse Event' length=$50 format=$50.;
MPRINT(MIMPDDT):  50
33   + attrib AEREL    label='Causality' length=$50 format=$50.;
MPRINT(MIMPDDT):  50
34   + attrib AESER    label='Serious Event' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
35   + attrib AESEV    label='Severity/Intensity' length=$50 format=$50.;
MPRINT(MIMPDDT):  50
36   + attrib AESPID   label='Sponsor-Defined Identifier' length=$2 format=$2.;
MPRINT(MIMPDDT):  2
37   + attrib AETE     label='Treatment Emergent AE' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
38   + attrib AETOXGR  label='Standard Toxicity Grade' length=8 format=4.;
39   + attrib AETRTREL label='Treatment Related AE' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
40   + attrib Q_ADDTRT label='Additional Treatment Given?' length=$7 format=$7.;
MPRINT(MIMPDDT):  7
41   + attrib Q_AERSLV label='Resolve Date or Ongoing' length=$10 format=$10.;
MPRINT(MIMPDDT):  10
42   + attrib Q_BCOND  label='Baseline Condition?' length=$1 format=$1.;
MPRINT(MIMPDDT):  1
43   + attrib SUBJYR   label='Subject Year' length=8 format=8.4;
44   + set AE;
45   + keep STUDYID DOMAIN USUBJID AGE ATRT RFENDTC RFENDTN RFSTDTC RFSTDTN CNSTDTN Q_SAFEAS Q_IMMUAS RACE SEX TBSA AENONE AETERM 
64                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

AEBODSYS AEDECOD AESTDTC AESTDTN AESTDY AEENDTC AEENDTN AEENDY AEACN AEACNOTH AEACNN AECONTRT AEDUR AEHAYN AEOUT AEREL AESER AESEV
46   + AESPID AETE AETOXGR AETRTREL Q_ADDTRT Q_AERSLV Q_BCOND SUBJYR
47   +
48   +                                                                                                                                  
                                                                                                                ;
49   + run;

NOTE: There were 243 observations read from the data set WORK.AE.
NOTE: The data set DERIVED.AE has 243 observations and 43 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MIOUT resolves to derived.AE
SYMBOLGEN:  Macro variable MLBL resolves to Adverse Event Analysis Dataset
MPRINT(MIMPDDT):   data derived.AE(label=Adverse Event Analysis Dataset) ;
SYMBOLGEN:  Macro variable ALLVARS resolves to STUDYID DOMAIN USUBJID AGE ATRT RFENDTC RFENDTN RFSTDTC RFSTDTN CNSTDTN Q_SAFEAS 
            Q_IMMUAS RACE SEX TBSA AENONE AETERM AEBODSYS AEDECOD AESTDTC AESTDTN AESTDY AEENDTC AEENDTN AEENDY AEACN AEACNOTH AEACNN 
            AECONTRT AEDUR AEHAYN AEOUT AEREL AESER AESEV AESPID AETE AETOXGR AETRTREL Q_ADDTRT Q_AERSLV Q_BCOND SUBJYR                 
                                                                                                                                        
                                                                                                                                        
                                                                                                                                        
                                                                                                                                        
                                                                                                                                        
                                                                 
MPRINT(MIMPDDT):   retain STUDYID DOMAIN USUBJID AGE ATRT RFENDTC RFENDTN RFSTDTC RFSTDTN CNSTDTN Q_SAFEAS Q_IMMUAS RACE SEX TBSA 
AENONE AETERM AEBODSYS AEDECOD AESTDTC AESTDTN AESTDY AEENDTC AEENDTN AEENDY AEACN AEACNOTH AEACNN AECONTRT AEDUR AEHAYN AEOUT AEREL 
AESER AESEV AESPID AETE AETOXGR AETRTREL Q_ADDTRT Q_AERSLV Q_BCOND SUBJYR ;
SYMBOLGEN:  Macro variable MIOUT resolves to derived.AE
MPRINT(MIMPDDT):   set derived.AE ;
MPRINT(MIMPDDT):   run ;

NOTE: There were 243 observations read from the data set DERIVED.AE.
NOTE: The data set DERIVED.AE has 243 observations and 43 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

MLOGIC(MIMPDDT):  Ending execution.
2083 +
2084 +proc datasets lib=work nolist kill;
NOTE: Deleting WORK.AE (memtype=DATA).
NOTE: Deleting WORK.ALLAE (memtype=DATA).
NOTE: Deleting WORK.ALLBC (memtype=DATA).
NOTE: Deleting WORK.BC (memtype=DATA).
NOTE: Deleting WORK.CE (memtype=DATA).
65                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

NOTE: Deleting WORK.CODEAE (memtype=DATA).
NOTE: Deleting WORK.CODEBC (memtype=DATA).
NOTE: Deleting WORK.DM (memtype=DATA).
NOTE: Deleting WORK.ODDT (memtype=DATA).
NOTE: Deleting WORK.PROFILE (memtype=CATALOG).
NOTE: File WORK.PROFILE (memtype=CATALOG) cannot be deleted because it is in use.
NOTE: Deleting WORK.REGSTRY (memtype=ITEMSTOR).
NOTE: File WORK.REGSTRY (memtype=ITEMSTOR) cannot be deleted because it is in use.
NOTE: Deleting WORK.SASGOPT (memtype=CATALOG).
NOTE: File WORK.SASGOPT (memtype=CATALOG) cannot be deleted because it is in use.
NOTE: Deleting WORK.SASMACR (memtype=CATALOG).
NOTE: File WORK.SASMACR (memtype=CATALOG) cannot be deleted because it is in use.
NOTE: Deleting WORK.XLS (memtype=DATA).
2085 +quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) ending.
2086  filename _flw_pr clear;
NOTE: Fileref _FLW_PR has been deassigned.
2087  
2088  /* region: Generated macro cleanup */
2089  %symdel _inputCount / nowarn;
2090  %symdel _outputCount / nowarn;
2091  %symdel _input1 / nowarn;
2092  %symdel _output1 / nowarn;
2093  
2094  /* endregion */
2095  
2096  
2097  /* region: Generated step cleanup for d1_ae.sas */
2098  %_flw_action_end(id-1728966462042-1787, WORK._flw1728966462042178_0_0_3, WORK, "_flw1728966462042178_0_0_3");
MLOGIC(_FLW_ACTION_END):  Beginning execution.
MLOGIC(_FLW_ACTION_END):  Parameter NODES has value id-1728966462042-1787
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_LIBS has value WORK._flw1728966462042178_0_0_3
MLOGIC(_FLW_ACTION_END):  Parameter LIBS has value WORK
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_NAMES has value "_flw1728966462042178_0_0_3"
MPRINT(_FLW_ACTION_END):   data _null_;
MPRINT(_FLW_ACTION_END):   attrib next_table_name length = $32 informat = $32. format = $32. dtStartStr length = $26 informat = $26. 
format = $26.;
MLOGIC(_FLW_ACTION_END):  %LOCAL  I NEXT_TABLE
SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966462042178_0_0_3
MLOGIC(_FLW_ACTION_END):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is 1.  
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE)
SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966462042178_0_0_3
66                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_LIB)
SYMBOLGEN:  Macro variable LIBS resolves to WORK
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE_NAME)
SYMBOLGEN:  Macro variable TABLE_NAMES resolves to "_flw1728966462042178_0_0_3"
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable NEXT_TABLE_NAME resolves to "_flw1728966462042178_0_0_3"
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(_FLW_ACTION_END):   next_table_name = kreverse(ksubstr(kreverse(ksubstr(kstrip(""_flw1728966462042178_0_0_3""),2)),2));
MLOGIC(_FLW_ACTION_END):  %LET (variable name is TABLE_EXISTS)
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966462042178_0_0_3
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966462042178_0_0_3
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_LIB resolves to WORK
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable TABLE_EXISTS resolves to 0
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_TABLE_|WORK|" next_table_name +(-1) "|0";
MLOGIC(_FLW_ACTION_END):  %DO loop index variable I is now 2; loop will not iterate again.
MPRINT(_FLW_ACTION_END):   dtStartStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966462042-1787
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_END_|" dtStartStr +(-1) "|id-1728966462042-1787";
MPRINT(_FLW_ACTION_END):   run;

_FLW_ACTION_TABLE_|WORK|_flw1728966462042178_0_0_3|0
_FLW_ACTION_END_|2025-01-21T13:08:17+00:00|id-1728966462042-1787
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(_FLW_ACTION_END):  Ending execution.
2099  /* endregion */
2100  
2101  /*===========================================================================*
2102  * Node name:        rldemo.sas
2103  * Node ID:          id-1728966431960-1132
2104  *
2105  * Input Tables:
2106  *   WORK._flw1728966462042178_0_0_3
2107  *
2108  * Output Tables:
2109  *   WORK._flw1728966431960113_0_0_4
2110  *
2111  * Step name:        SAS Program
2112  * Step path:        /dataFlows/steps/a7190700-f59c-4a94-afe2-214ce639fcde
2113  * Step description: Run user written SAS code.
67                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

2114  *----------------------------------------------------------------------------*/
2115  
2116  /* region: Generated step setup */
2117  %_flw_action_start(id-1728966431960-1132);
MLOGIC(_FLW_ACTION_START):  Beginning execution.
MLOGIC(_FLW_ACTION_START):  Parameter NODES has value id-1728966431960-1132
MPRINT(_FLW_ACTION_START):   data _null_;
MPRINT(_FLW_ACTION_START):   dtEndStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966431960-1132
MPRINT(_FLW_ACTION_START):   put "_FLW_ACTION_START_|" dtEndStr +(-1) "|id-1728966431960-1132";
MPRINT(_FLW_ACTION_START):   run;

_FLW_ACTION_START_|2025-01-21T13:08:17+00:00|id-1728966431960-1132
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(_FLW_ACTION_START):  Ending execution.
2118  /* endregion */
2119  
2120  
2121  /* region: Generated macro initialization */
2122  %let _inputCount = 1;
2123  %let _outputCount = 1;
2124  %let _input1 = WORK._flw1728966462042178_0_0_3;
2125  %let _output1 = WORK._flw1728966431960113_0_0_4;
2126  
2127  /* endregion */
2128  
2129  FILENAME _flw_pr "/nfsshare/sashls2/mattb/XMB111/programs/rldemo.sas" encoding="UTF-8";
2130  %include _flw_pr / source2;
NOTE: %INCLUDE (level 1) file _FLW_PR is file /nfsshare/sashls2/mattb/XMB111/programs/rldemo.sas.
2131 +********************************************************************************;
2132 +*** Program:        \biometrics\499\499H01\analyses_mjb\CSR\programs\prod\rldemo.sas
2133 +*** Programmer:     Matt Becker
2134 +*** Date Created:   31Mar2010
2135 +***
2136 +*** Input :         SDTM DM, STDM VS, SDTM SUPPDM
2137 +***
2138 +*** Output:         Listing 9:  Demographics and Subject Characteristics
2139 +***
2140 +*** Purpose:        To create the listing of demographics and subject characteristics
2141 +***
2142 +*** Comments:
2143 +***
2144 +*** Software:       SAS 9 (Windows)
2145 +***
68                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

2146 +*** Modifications:
2147 +***
2148 +*** Date       Programmer        Description
2149 +*** ---------  ----------------  --------------
2150 +***
2151 +********************************************************************************;
2152 +proc sort data=sdtm.vs out=vs;
NOTE: Data file SDTM.VS.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. 
      Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
2153 +  by usubjid;
2154 +  where visitnum=0 and vstestcd in('ORNHT','ORNWT');
2155 +

NOTE: There were 60 observations read from the data set SDTM.VS.
      WHERE (visitnum=0) and vstestcd in ('ORNHT', 'ORNWT');
NOTE: The data set WORK.VS has 60 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

2156 +proc transpose data=vs out=tranvs(drop=_name_);
2157 +  by usubjid;
2158 +  var vsstresn;
2159 +  id vstest;
2160 +run;

NOTE: There were 60 observations read from the data set WORK.VS.
NOTE: The data set WORK.TRANVS has 30 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2161 +
2162 +proc sort data=sdtm.dm out=dm;
NOTE: Data file SDTM.DM.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. 
      Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
2163 +  by usubjid;
2164 +

NOTE: There were 32 observations read from the data set SDTM.DM.
NOTE: The data set WORK.DM has 32 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

69                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

2165 +data dm;
2166 +  merge dm(in=x) tranvs(in=y);
2167 +  by usubjid;
2168 +  length tbsa 8;
2169 +  if x;
2170 +  tbsa=sqrt((height*weight)/3600);
2171 +run;

NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      2 at 2170:8    2 at 2170:20   2 at 2170:28   
NOTE: There were 32 observations read from the data set WORK.DM.
NOTE: There were 30 observations read from the data set WORK.TRANVS.
NOTE: The data set WORK.DM has 32 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2172 +
2173 +proc sort data=sdtm.suppdm out=suppdm(keep=usubjid qval);
NOTE: Data file SDTM.SUPPDM.DATA is in a format that is native to another host, or the file encoding does not match the session 
      encoding. Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
2174 +  by usubjid;
2175 +  where qnam='INIT';
2176 +

NOTE: There were 32 observations read from the data set SDTM.SUPPDM.
      WHERE qnam='INIT';
NOTE: The data set WORK.SUPPDM has 32 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

2177 +data dm(rename=(qval=init));
2178 +  merge dm(in=x) suppdm(in=y);
2179 +  by usubjid;
2180 +  if x;
2181 +  page=int(_n_/8)+1;
2182 +run;

NOTE: There were 32 observations read from the data set WORK.DM.
NOTE: There were 32 observations read from the data set WORK.SUPPDM.
NOTE: The data set WORK.DM has 32 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
70                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

      

2183 +
2184 +%mcase(inds=dm, exceptl=%str('USUBJID','INIT','BRTHDTC'));
MLOGIC:  Beginning compilation of MCASE using the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mcase.sas.
MLOGIC:  Ending compilation of MCASE.
MLOGIC(MCASE):  Beginning execution.
MLOGIC(MCASE):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mcase.sas
MLOGIC(MCASE):  Parameter INDS has value dm
MLOGIC(MCASE):  Parameter EXCEPTL has value 'USUBJID''INIT''BRTHDTC'
MLOGIC(MCASE):  Parameter FIX_ID has value Y
SYMBOLGEN:  Macro variable INDS resolves to dm
MLOGIC(MCASE):  %IF condition &inds= is FALSE
MPRINT(MCASE):   proc sql noprint;
SYMBOLGEN:  Macro variable INDS resolves to dm
SYMBOLGEN:  Macro variable EXCEPTL resolves to 'USUBJID','INIT','BRTHDTC'
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(MCASE):   select distinct name into :varlist separated by ' ' from dictionary.columns where libname='WORK' and memname="DM" and 
upcase(type)="CHAR" and upcase(name) not in('USUBJID','INIT','BRTHDTC');
MPRINT(MCASE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable VARLIST resolves to AGEU ARM ARMCD DMDTC DOMAIN RACE RFENDTC RFSTDTC SEX STUDYID _LABEL_
MLOGIC(MCASE):  %IF condition "&varlist" ne "" is TRUE
SYMBOLGEN:  Macro variable INDS resolves to dm
MPRINT(MCASE):   data dm;
SYMBOLGEN:  Macro variable INDS resolves to dm
MPRINT(MCASE):   set dm;
SYMBOLGEN:  Macro variable FIX_ID resolves to Y
MLOGIC(MCASE):  %IF condition %upcase(&fix_id)=Y is TRUE
MPRINT(MCASE):   usubjid=substr(usubjid,8);
MLOGIC(MCASE):  %LET (variable name is NUM)
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AGEU ARM ARMCD DMDTC DOMAIN RACE RFENDTC RFSTDTC SEX STUDYID _LABEL_
MLOGIC(MCASE):  %PUT &myval
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
AGEU
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
MLOGIC(MCASE):  %DO %WHILE(&myval ne) loop beginning; condition is TRUE.  
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
MPRINT(MCASE):   AGEU=propcase(AGEU);
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
MPRINT(MCASE):   AGEU=tranwrd(AGEU,'s:','S:');
71                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
MPRINT(MCASE):   AGEU=tranwrd(AGEU,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
MPRINT(MCASE):   AGEU=tranwrd(AGEU,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
MPRINT(MCASE):   AGEU=tranwrd(AGEU,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
MPRINT(MCASE):   AGEU=tranwrd(AGEU,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
SYMBOLGEN:  Macro variable MYVAL resolves to AGEU
MPRINT(MCASE):   AGEU=tranwrd(AGEU,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 1
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AGEU ARM ARMCD DMDTC DOMAIN RACE RFENDTC RFSTDTC SEX STUDYID _LABEL_
SYMBOLGEN:  Macro variable NUM resolves to 2
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
MPRINT(MCASE):   ARM=propcase(ARM);
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
MPRINT(MCASE):   ARM=tranwrd(ARM,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
MPRINT(MCASE):   ARM=tranwrd(ARM,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
MPRINT(MCASE):   ARM=tranwrd(ARM,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
MPRINT(MCASE):   ARM=tranwrd(ARM,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
MPRINT(MCASE):   ARM=tranwrd(ARM,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
SYMBOLGEN:  Macro variable MYVAL resolves to ARM
MPRINT(MCASE):   ARM=tranwrd(ARM,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 2
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AGEU ARM ARMCD DMDTC DOMAIN RACE RFENDTC RFSTDTC SEX STUDYID _LABEL_
SYMBOLGEN:  Macro variable NUM resolves to 3
72                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
MPRINT(MCASE):   ARMCD=propcase(ARMCD);
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
MPRINT(MCASE):   ARMCD=tranwrd(ARMCD,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
MPRINT(MCASE):   ARMCD=tranwrd(ARMCD,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
MPRINT(MCASE):   ARMCD=tranwrd(ARMCD,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
MPRINT(MCASE):   ARMCD=tranwrd(ARMCD,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
MPRINT(MCASE):   ARMCD=tranwrd(ARMCD,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
SYMBOLGEN:  Macro variable MYVAL resolves to ARMCD
MPRINT(MCASE):   ARMCD=tranwrd(ARMCD,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 3
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AGEU ARM ARMCD DMDTC DOMAIN RACE RFENDTC RFSTDTC SEX STUDYID _LABEL_
SYMBOLGEN:  Macro variable NUM resolves to 4
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
MPRINT(MCASE):   DMDTC=propcase(DMDTC);
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
MPRINT(MCASE):   DMDTC=tranwrd(DMDTC,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
MPRINT(MCASE):   DMDTC=tranwrd(DMDTC,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
MPRINT(MCASE):   DMDTC=tranwrd(DMDTC,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
MPRINT(MCASE):   DMDTC=tranwrd(DMDTC,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
MPRINT(MCASE):   DMDTC=tranwrd(DMDTC,'w:','W:');
73                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
SYMBOLGEN:  Macro variable MYVAL resolves to DMDTC
MPRINT(MCASE):   DMDTC=tranwrd(DMDTC,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 4
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AGEU ARM ARMCD DMDTC DOMAIN RACE RFENDTC RFSTDTC SEX STUDYID _LABEL_
SYMBOLGEN:  Macro variable NUM resolves to 5
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=propcase(DOMAIN);
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=tranwrd(DOMAIN,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=tranwrd(DOMAIN,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=tranwrd(DOMAIN,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=tranwrd(DOMAIN,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=tranwrd(DOMAIN,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=tranwrd(DOMAIN,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 5
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AGEU ARM ARMCD DMDTC DOMAIN RACE RFENDTC RFSTDTC SEX STUDYID _LABEL_
SYMBOLGEN:  Macro variable NUM resolves to 6
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
MPRINT(MCASE):   RACE=propcase(RACE);
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
MPRINT(MCASE):   RACE=tranwrd(RACE,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
MPRINT(MCASE):   RACE=tranwrd(RACE,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
74                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

SYMBOLGEN:  Macro variable MYVAL resolves to RACE
MPRINT(MCASE):   RACE=tranwrd(RACE,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
MPRINT(MCASE):   RACE=tranwrd(RACE,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
MPRINT(MCASE):   RACE=tranwrd(RACE,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
SYMBOLGEN:  Macro variable MYVAL resolves to RACE
MPRINT(MCASE):   RACE=tranwrd(RACE,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 6
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AGEU ARM ARMCD DMDTC DOMAIN RACE RFENDTC RFSTDTC SEX STUDYID _LABEL_
SYMBOLGEN:  Macro variable NUM resolves to 7
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
MPRINT(MCASE):   RFENDTC=propcase(RFENDTC);
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
MPRINT(MCASE):   RFENDTC=tranwrd(RFENDTC,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
MPRINT(MCASE):   RFENDTC=tranwrd(RFENDTC,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
MPRINT(MCASE):   RFENDTC=tranwrd(RFENDTC,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
MPRINT(MCASE):   RFENDTC=tranwrd(RFENDTC,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
MPRINT(MCASE):   RFENDTC=tranwrd(RFENDTC,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFENDTC
MPRINT(MCASE):   RFENDTC=tranwrd(RFENDTC,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 7
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AGEU ARM ARMCD DMDTC DOMAIN RACE RFENDTC RFSTDTC SEX STUDYID _LABEL_
SYMBOLGEN:  Macro variable NUM resolves to 8
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
75                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

MPRINT(MCASE):   RFSTDTC=propcase(RFSTDTC);
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
MPRINT(MCASE):   RFSTDTC=tranwrd(RFSTDTC,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
MPRINT(MCASE):   RFSTDTC=tranwrd(RFSTDTC,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
MPRINT(MCASE):   RFSTDTC=tranwrd(RFSTDTC,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
MPRINT(MCASE):   RFSTDTC=tranwrd(RFSTDTC,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
MPRINT(MCASE):   RFSTDTC=tranwrd(RFSTDTC,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to RFSTDTC
MPRINT(MCASE):   RFSTDTC=tranwrd(RFSTDTC,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 8
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AGEU ARM ARMCD DMDTC DOMAIN RACE RFENDTC RFSTDTC SEX STUDYID _LABEL_
SYMBOLGEN:  Macro variable NUM resolves to 9
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
MPRINT(MCASE):   SEX=propcase(SEX);
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
MPRINT(MCASE):   SEX=tranwrd(SEX,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
MPRINT(MCASE):   SEX=tranwrd(SEX,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
MPRINT(MCASE):   SEX=tranwrd(SEX,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
MPRINT(MCASE):   SEX=tranwrd(SEX,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
MPRINT(MCASE):   SEX=tranwrd(SEX,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
SYMBOLGEN:  Macro variable MYVAL resolves to SEX
MPRINT(MCASE):   SEX=tranwrd(SEX,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
76                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

SYMBOLGEN:  Macro variable NUM resolves to 9
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AGEU ARM ARMCD DMDTC DOMAIN RACE RFENDTC RFSTDTC SEX STUDYID _LABEL_
SYMBOLGEN:  Macro variable NUM resolves to 10
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=propcase(STUDYID);
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=tranwrd(STUDYID,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=tranwrd(STUDYID,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=tranwrd(STUDYID,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=tranwrd(STUDYID,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=tranwrd(STUDYID,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=tranwrd(STUDYID,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 10
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AGEU ARM ARMCD DMDTC DOMAIN RACE RFENDTC RFSTDTC SEX STUDYID _LABEL_
SYMBOLGEN:  Macro variable NUM resolves to 11
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
MPRINT(MCASE):   _LABEL_=propcase(_LABEL_);
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
MPRINT(MCASE):   _LABEL_=tranwrd(_LABEL_,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
MPRINT(MCASE):   _LABEL_=tranwrd(_LABEL_,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
MPRINT(MCASE):   _LABEL_=tranwrd(_LABEL_,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
77                                                           The SAS System                        Tuesday, January 21, 2025 01:08:17 PM

MPRINT(MCASE):   _LABEL_=tranwrd(_LABEL_,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
MPRINT(MCASE):   _LABEL_=tranwrd(_LABEL_,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
SYMBOLGEN:  Macro variable MYVAL resolves to _LABEL_
MPRINT(MCASE):   _LABEL_=tranwrd(_LABEL_,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 11
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AGEU ARM ARMCD DMDTC DOMAIN RACE RFENDTC RFSTDTC SEX STUDYID _LABEL_
SYMBOLGEN:  Macro variable NUM resolves to 12
SYMBOLGEN:  Macro variable MYVAL resolves to 
MLOGIC(MCASE):  %DO %WHILE() condition is FALSE; loop will not iterate again.
MPRINT(MCASE):   run;

NOTE: There were 32 observations read from the data set WORK.DM.
NOTE: The data set WORK.DM has 32 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MLOGIC(MCASE):  Ending execution.
2185 +
2186 +%mtitle(progid=ldemo);
MLOGIC:  Beginning compilation of MTITLE using the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mtitle.sas.
MLOGIC:  Ending compilation of MTITLE.
MLOGIC(MTITLE):  Beginning execution.
MLOGIC(MTITLE):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mtitle.sas
MLOGIC(MTITLE):  Parameter PROGID has value ldemo
MLOGIC(MTITLE):  Parameter TYPE has value html
MLOGIC(MTITLE):  Parameter ORIENT has value l
MLOGIC(MTITLE):  Parameter SASOPT has value nodate nonumber nobyline
MLOGIC(MTITLE):  Parameter BYVAR has value 
MLOGIC(MTITLE):  Parameter BYTXT has value 
MLOGIC(MTITLE):  Parameter TMNAME has value rtf
MLOGIC(MTITLE):  Parameter NOPAGE has value n
SYMBOLGEN:  Macro variable SASOPT resolves to nodate nonumber nobyline
MLOGIC(MTITLE):  %IF condition &sasopt ne is TRUE
SYMBOLGEN:  Macro variable SASOPT resolves to nodate nonumber nobyline
MPRINT(MTITLE):   options nodate nonumber nobyline;
MLOGIC(MTITLE):  %GLOBAL  OUTPUTNAME  
MPRINT(MTITLE):   options mprint;
MLOGIC(MTITLE):  %LET (variable name is MLS)
SYMBOLGEN:  Macro variable ORIENT resolves to l
MLOGIC(MTITLE):  %IF condition %upcase(&orient)=P is FALSE
MLOGIC(MTITLE):  %LET (variable name is ORIENTO)
                                                             The SAS System

SYMBOLGEN:  Macro variable ORIENTO resolves to Landscape
MPRINT(MTITLE):   options orientation=Landscape;
MLOGIC(MTITLE):  %GLOBAL  TABLNO NUMTITLE FOOTN1 FOOTN2 FOOTN3 FOOTN4 FOOTN5 FOOTN6 FOOTN7 FOOTN8 FOOTN9 SPAGENO SFOOTN1 SFOOTN2 
      SFOOTN3 SFOOTN8 SFOOTN9 SFOOTN10 SDATA NUMFOOT OUTPUTNAME         TABNUM TITLE1 TITLE2 TITLE3 TITLE4 TITLE5 TITLE6 OUTPUTF 
      L_SOURCE  FOOTN11
MLOGIC(MTITLE):  %LET (variable name is FSTLN)
MLOGIC(MTITLE):  %LET (variable name is CHGLN)
MLOGIC(MTITLE):  %LET (variable name is FOOTBR)
MPRINT(MTITLE):   data toc_prog;
SYMBOLGEN:  Macro variable DERDATA resolves to derived
MPRINT(MTITLE):   set derived.toc_prog;
NOTE: Data file DERIVED.TOC_PROG.DATA is in a format that is native to another host, or the file encoding does not match the session 
      encoding. Cross Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
SYMBOLGEN:  Macro variable PROGID resolves to ldemo
MPRINT(MTITLE):   if compress(upcase(progid))=upcase("ldemo");
MPRINT(MTITLE):   call symput('tabnum',trim(tabnum));
MPRINT(MTITLE):   if index(title1,'`{') then offset=9;
MPRINT(MTITLE):   else offset=0;
SYMBOLGEN:  Macro variable MLS resolves to 170
MPRINT(MTITLE):   call symput('title1',trim(title1)||repeat(" 
",(170-length(title1)-length(tabnum)-30-4+offset))||"[Page_00000_of_99999]");
MPRINT(MTITLE):   call symput('title2',trim(title2));
MPRINT(MTITLE):   call symput('title3',trim(title3));
MPRINT(MTITLE):   call symput('title4',trim(title4));
MPRINT(MTITLE):   call symput('title5',trim(title5));
MPRINT(MTITLE):   call symput('title6',trim(title6));
MPRINT(MTITLE):   call symput('outputname',trim(outname));
MPRINT(MTITLE):   call symput('numtitle',compress(put(numtitle,3.)));
MPRINT(MTITLE):   call symput('footn1',trim(footn1));
MPRINT(MTITLE):   call symput('footn2',trim(footn2));
MPRINT(MTITLE):   call symput('footn3',trim(footn3));
MPRINT(MTITLE):   call symput('footn4',trim(footn4));
MPRINT(MTITLE):   call symput('footn5',trim(footn5));
MPRINT(MTITLE):   call symput('footn6',trim(footn6));
MPRINT(MTITLE):   call symput('footn7',trim(footn7));
MPRINT(MTITLE):   call symput('footn8',trim(footn8));
MPRINT(MTITLE):   call symput('progname',trim(progname));
SYMBOLGEN:  Macro variable DRAFT_FINAL resolves to FINAL
SYMBOLGEN:  Macro variable SYSDATE9 resolves to 21JAN2025
SYMBOLGEN:  Macro variable SYSTIME resolves to 18:08
MPRINT(MTITLE):   if l_source ne '' then footn11="PROGRAM: " || trim(progname) || ".sas, " || "SOURCE: " || trim(l_source) || ", 
(FINAL) 21JAN2025 18:08";
SYMBOLGEN:  Macro variable DRAFT_FINAL resolves to FINAL
SYMBOLGEN:  Macro variable SYSDATE9 resolves to 21JAN2025
SYMBOLGEN:  Macro variable SYSTIME resolves to 18:08
MPRINT(MTITLE):   else footn11="PROGRAM: " || trim(progname) || ".sas, (FINAL) 21JAN2025 18:08";
MPRINT(MTITLE):   footn11l=trim(footn11);
MPRINT(MTITLE):   call symput('footn11',trim(footn11l));
                                                             The SAS System

MPRINT(MTITLE):   call symput('numfoot',compress(put(numfoot,3.)));
SYMBOLGEN:  Macro variable TYPE resolves to html
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition &TYPE=LST or &TYPE=PS is FALSE
SYMBOLGEN:  Macro variable BYVAR resolves to 
MLOGIC(MTITLE):  %IF condition &BYVAR NE is FALSE
MPRINT(MTITLE):   if index(tabnum,'Table') then call symput('outputf','tables');
MPRINT(MTITLE):   else if index(tabnum,'Appendix') then call symput('outputf','listings');
MPRINT(MTITLE):   else if index(tabnum,'Figure') then call symput('outputf','figures');
SYMBOLGEN:  Macro variable ORIENT resolves to l
MLOGIC(MTITLE):  %IF condition %UPCASE(&ORIENT)=P is FALSE
MPRINT(MTITLE):   run;

NOTE: There were 110 observations read from the data set DERIVED.TOC_PROG.
NOTE: The data set WORK.TOC_PROG has 1 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MLOGIC(MTITLE):  %LET (variable name is NUMOBS)
MPRINT(MTITLE):   proc sql noprint;
MPRINT(MTITLE):   select count(*) into: numobs from toc_prog;
MPRINT(MTITLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(MTITLE):  %GLOBAL  _OUTPUTNAME
MLOGIC(MTITLE):  %LET (variable name is _OUTPUTNAME)
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to listings
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to a16_02_04_01_ldemo
SYMBOLGEN:  Macro variable NUMOBS resolves to        1
MLOGIC(MTITLE):  %IF condition &numobs=0 is FALSE
SYMBOLGEN:  Macro variable NUMOBS resolves to        1
MLOGIC(MTITLE):  %IF condition &numobs>1 is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=RTF is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=HTML is TRUE
MPRINT(MTITLE):   ods listing close;
MPRINT(MTITLE):   ods path sashelp.tmplmst;
MPRINT(MTITLE):   * &derdata..matt;
SYMBOLGEN:  Macro variable TYPE resolves to html
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to listings
                                                             The SAS System

SYMBOLGEN:  Macro variable OUTPUTNAME resolves to a16_02_04_01_ldemo
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MTITLE):   ods html file="/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_04_01_ldemo.html";
NOTE: Writing HTML Body file: /nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_04_01_ldemo.html
MPRINT(MTITLE):   options linesize=160 pagesize=50;
SYMBOLGEN:  Macro variable PTITLE1 resolves to ABCD, Inc.
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(MTITLE):   title1 j=l "ABCD, Inc.";
SYMBOLGEN:  Macro variable PTITLE2 resolves to XMB-111 Draft
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(MTITLE):   title2 j=l "XMB-111 Draft";
SYMBOLGEN:  Macro variable TABNUM resolves to Appendix 16.2.4-1
SYMBOLGEN:  Macro variable TITLE1 resolves to Demographics and Subject Characteristics                                                                          
                  [Page_00000_of_99999]
MPRINT(MTITLE):   title4 j=l "Appendix 16.2.4-1:  Demographics and Subject Characteristics                                                                      
          [Page_00000_of_99999]";
SYMBOLGEN:  Macro variable NUMTITLE resolves to 1
MLOGIC(MTITLE):  %DO loop beginning; index variable I; start value is 2; stop value is 1; by value is 1.  Loop will not be executed.
SYMBOLGEN:  Macro variable BYVAR resolves to 
MLOGIC(MTITLE):  %IF condition &byvar ne is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=RTF is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=LST is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=HTML is TRUE
SYMBOLGEN:  Macro variable FOOTBR resolves to ''
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NUMFOOT resolves to 1
MLOGIC(MTITLE):  %IF condition &numfoot ne 0 is TRUE
SYMBOLGEN:  Macro variable NUMFOOT resolves to 1
MLOGIC(MTITLE):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is 1.  
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable FOOTN1 resolves to `{super a}Total Body Surface Area (mL/m`{super 2}) = square root of [Ht (cm) * Wt (kg) divided by 3600]
WARNING: The FOOTNOTE statement is ambiguous due to invalid options or unquoted text.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable NUMFOOT resolves to 1
MLOGIC(MTITLE):  %IF condition &i ^= &numfoot is FALSE
MLOGIC(MTITLE):  %DO loop index variable I is now 2; loop will not iterate again.
MPRINT(MTITLE):   footnote1 j=left '' "`{super a}Total Body Surface Area (mL/m`{super 2}) = square root of [Ht (cm) * Wt (kg) divided by 3600]";
MPRINT(MTITLE):   footnote2 " ";
SYMBOLGEN:  Macro variable FOOTN11 resolves to PROGRAM: rldemo.sas, (FINAL) 21JAN2025 18:08
MPRINT(MTITLE):   footnote3 j=l "PROGRAM: rldemo.sas, (FINAL) 21JAN2025 18:08";
MLOGIC(MTITLE):  Ending execution.
2187 +
2188 +proc report data=dm headline headskip nowindows split='|' missing spacing=1;
2189 +  column page usubjid brthdtc age sex race height weight tbsa;
                                                                         The SAS System

2190 +  define page / order noprint;
2191 +  define usubjid / order 'Subject' style={just=left cellwidth=7%};
2192 +  define brthdtc / display 'Date of Birth' style={just=left cellwidth=10%};
2193 +  define age / order 'Age|(Years)' format=4.1 style={just=center cellwidth=7%};
2194 +  define sex / display 'Gender' style={just=left cellwidth=7%};
2195 +  define race / display 'Race' style={just=left cellwidth=22%};
2196 +  define height / display 'Height|(cm)' format=3. style={just=left cellwidth=8%};
2197 +  define weight / display 'Weight|(kg)' format=3. style={just=left cellwidth=8%};
2198 +  define tbsa / display "TBSA`{super a}" format=4.1 style={just=left cellwidth=8%};
2199 +  break after page / page;
2200 +  compute before usubjid;
2201 +    line " ";
2202 +  endcomp;
2203 +run;

NOTE: There were 32 observations read from the data set WORK.DM.
NOTE: PROCEDURE REPORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.08 seconds
      

2204 +
2205 +ods html close;
2206 +ods listing;
2207 +
2208 +%mpageof;
MLOGIC:  Beginning compilation of MPAGEOF using the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mpageof.sas.
MLOGIC:  Ending compilation of MPAGEOF.
MLOGIC(MPAGEOF):  Beginning execution.
MLOGIC(MPAGEOF):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mpageof.sas
MLOGIC(MPAGEOF):  Parameter INFILE has value "&output/&outputf/&outputname..&type"
MLOGIC(MPAGEOF):  Parameter OUTFILE has value "&output/&outputf/&outputname..&type"
MLOGIC(MPAGEOF):  Parameter TYPE has value html
MLOGIC(MPAGEOF):  Parameter TEXT has value [Page_00000_of_99999]
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MPAGEOF):  %IF condition %upcase(&type)^=LST is TRUE
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   ods html close;
MPRINT(MPAGEOF):   data _null_;
SYMBOLGEN:  Macro variable INFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to listings
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to a16_02_04_01_ldemo
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_04_01_ldemo.html" lrecl=32767 end=_eof;
MPRINT(MPAGEOF):   input;
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   if index(_infile_,"[Page_00000_of_99999]") then pageno + 1;
                                                                         The SAS System

MPRINT(MPAGEOF):   if _eof then call symput('NUMPAGES',compress(put(pageno,14.)));
MPRINT(MPAGEOF):   run;

NOTE: The infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_04_01_ldemo.html" is:
      Filename=/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_04_01_ldemo.html,
      Owner Name=UNKNOWN,Group Name=UNKNOWN,
      Access Permission=-rwxrwxrwx,
      Last Modified=21Jan2025:13:08:17,
      File Size (bytes)=60100

NOTE: 2359 records were read from the infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_04_01_ldemo.html".
      The minimum record length was 0.
      The maximum record length was 193.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MLOGIC(MPAGEOF):  %LOCAL  NUMPAGEL LPAGEOF
MLOGIC(MPAGEOF):  %LET (variable name is NUMPAGEL)
SYMBOLGEN:  Macro variable NUMPAGES resolves to 5
MLOGIC(MPAGEOF):  %LET (variable name is LPAGEOF)
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   data _null_;
SYMBOLGEN:  Macro variable INFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to listings
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to a16_02_04_01_ldemo
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_04_01_ldemo.html" lrecl=32767 end=_eof;
SYMBOLGEN:  Macro variable LPAGEOF resolves to 21
MPRINT(MPAGEOF):   length pageof $ 21;
MPRINT(MPAGEOF):   input ;
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   if index(_infile_,"[Page_00000_of_99999]") then do;
MPRINT(MPAGEOF):   pageno + 1;
SYMBOLGEN:  Macro variable NUMPAGEL resolves to 1
SYMBOLGEN:  Macro variable NUMPAGES resolves to 5
MPRINT(MPAGEOF):   pageof = 'Page '|| put(pageno,1.) ||" of 5";
MPRINT(MPAGEOF):   pageof = compbl(pageof);
MPRINT(MPAGEOF):   pageof = right(pageof);
MPRINT(MPAGEOF):   pad="";
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   _infile_ = tranwrd(_infile_,"[Page_00000_of_99999]",pageof);
MPRINT(MPAGEOF):   end;
SYMBOLGEN:  Macro variable OUTFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to listings
                                                                         The SAS System

SYMBOLGEN:  Macro variable OUTPUTNAME resolves to a16_02_04_01_ldemo
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   file "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_04_01_ldemo.html" noprint lrecl=32767;
MPRINT(MPAGEOF):   put _infile_;
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MPAGEOF):  %IF condition &type=PDF is FALSE
MPRINT(MPAGEOF):   run;

NOTE: The file/infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_04_01_ldemo.html" is:
      Filename=/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_04_01_ldemo.html,
      Owner Name=UNKNOWN,Group Name=UNKNOWN,
      Access Permission=-rwxrwxrwx,
      Last Modified=21Jan2025:13:08:17,
      File Size (bytes)=60100

NOTE: 2359 records were read from the infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_04_01_ldemo.html".
      The minimum record length was 0.
      The maximum record length was 193.
NOTE: 2359 records were written to the file "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_04_01_ldemo.html".
      The minimum record length was 0.
      The maximum record length was 193.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MLOGIC(MPAGEOF):  Ending execution.
NOTE: %INCLUDE (level 1) ending.
2209  filename _flw_pr clear;
NOTE: Fileref _FLW_PR has been deassigned.
2210  
2211  /* region: Generated macro cleanup */
2212  %symdel _inputCount / nowarn;
2213  %symdel _outputCount / nowarn;
2214  %symdel _input1 / nowarn;
2215  %symdel _output1 / nowarn;
2216  
2217  /* endregion */
2218  
2219  
2220  /* region: Generated step cleanup for rldemo.sas */
2221  %_flw_action_end(id-1728966431960-1132, WORK._flw1728966431960113_0_0_4, WORK, "_flw1728966431960113_0_0_4");
MLOGIC(_FLW_ACTION_END):  Beginning execution.
MLOGIC(_FLW_ACTION_END):  Parameter NODES has value id-1728966431960-1132
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_LIBS has value WORK._flw1728966431960113_0_0_4
MLOGIC(_FLW_ACTION_END):  Parameter LIBS has value WORK
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_NAMES has value "_flw1728966431960113_0_0_4"
MPRINT(_FLW_ACTION_END):   data _null_;
                                                                         The SAS System

MPRINT(_FLW_ACTION_END):   attrib next_table_name length = $32 informat = $32. format = $32. dtStartStr length = $26 informat = $26. format = $26.;
MLOGIC(_FLW_ACTION_END):  %LOCAL  I NEXT_TABLE
SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966431960113_0_0_4
MLOGIC(_FLW_ACTION_END):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is 1.  
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE)
SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966431960113_0_0_4
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_LIB)
SYMBOLGEN:  Macro variable LIBS resolves to WORK
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE_NAME)
SYMBOLGEN:  Macro variable TABLE_NAMES resolves to "_flw1728966431960113_0_0_4"
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable NEXT_TABLE_NAME resolves to "_flw1728966431960113_0_0_4"
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(_FLW_ACTION_END):   next_table_name = kreverse(ksubstr(kreverse(ksubstr(kstrip(""_flw1728966431960113_0_0_4""),2)),2));
MLOGIC(_FLW_ACTION_END):  %LET (variable name is TABLE_EXISTS)
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966431960113_0_0_4
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966431960113_0_0_4
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_LIB resolves to WORK
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable TABLE_EXISTS resolves to 0
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_TABLE_|WORK|" next_table_name +(-1) "|0";
MLOGIC(_FLW_ACTION_END):  %DO loop index variable I is now 2; loop will not iterate again.
MPRINT(_FLW_ACTION_END):   dtStartStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966431960-1132
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_END_|" dtStartStr +(-1) "|id-1728966431960-1132";
MPRINT(_FLW_ACTION_END):   run;

_FLW_ACTION_TABLE_|WORK|_flw1728966431960113_0_0_4|0
_FLW_ACTION_END_|2025-01-21T13:08:18+00:00|id-1728966431960-1132
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MLOGIC(_FLW_ACTION_END):  Ending execution.
2222  /* endregion */
2223  
2224  /*===========================================================================*
2225  * Node name:        rlae.sas
2226  * Node ID:          id-1728966431971-1157
2227  *
2228  * Input Tables:
2229  *   WORK._flw1728966431960113_0_0_4
2230  *
                                                                         The SAS System

2231  * Output Tables:
2232  *   WORK._flw1728966431971115_0_0_5
2233  *
2234  * Step name:        SAS Program
2235  * Step path:        /dataFlows/steps/a7190700-f59c-4a94-afe2-214ce639fcde
2236  * Step description: Run user written SAS code.
2237  *----------------------------------------------------------------------------*/
2238  
2239  /* region: Generated step setup */
2240  %_flw_action_start(id-1728966431971-1157);
MLOGIC(_FLW_ACTION_START):  Beginning execution.
MLOGIC(_FLW_ACTION_START):  Parameter NODES has value id-1728966431971-1157
MPRINT(_FLW_ACTION_START):   data _null_;
MPRINT(_FLW_ACTION_START):   dtEndStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966431971-1157
MPRINT(_FLW_ACTION_START):   put "_FLW_ACTION_START_|" dtEndStr +(-1) "|id-1728966431971-1157";
MPRINT(_FLW_ACTION_START):   run;

_FLW_ACTION_START_|2025-01-21T13:08:18+00:00|id-1728966431971-1157
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(_FLW_ACTION_START):  Ending execution.
2241  /* endregion */
2242  
2243  
2244  /* region: Generated macro initialization */
2245  %let _inputCount = 1;
2246  %let _outputCount = 1;
2247  %let _input1 = WORK._flw1728966431960113_0_0_4;
2248  %let _output1 = WORK._flw1728966431971115_0_0_5;
2249  
2250  /* endregion */
2251  
2252  FILENAME _flw_pr "/nfsshare/sashls2/mattb/XMB111/programs/rlae.sas" encoding="UTF-8";
2253  %include _flw_pr / source2;
NOTE: %INCLUDE (level 1) file _FLW_PR is file /nfsshare/sashls2/mattb/XMB111/programs/rlae.sas.
2254 +********************************************************************************;
2255 +*** Program:        \biometrics\499\499H01\analyses_mjb\CSR\programs\prod\rlae.sas
2256 +*** Programmer:     Matt Becker
2257 +*** Date Created:   01Apr2010
2258 +***
2259 +*** Input :         SDTM DM, STDM AE
2260 +***
2261 +*** Output:         Listing 17:  Adverse Events
2262 +***
                                                                         The SAS System

2263 +*** Purpose:        To create the listing of adverse events
2264 +***
2265 +*** Comments:
2266 +***
2267 +*** Software:       SAS 9 (Windows)
2268 +***
2269 +*** Modifications:
2270 +***
2271 +*** Date       Programmer        Description
2272 +*** ---------  ----------------  --------------
2273 +***
2274 +********************************************************************************;
2275 +%macro listing(progid=tae1, subset=);
2276 +
2277 +proc sort data=sdtm.ae out=ae;
2278 +  by usubjid;
2279 +  %if &subset ne %then %do;
2280 +    where &subset;
2281 +  %end;
2282 +
2283 +proc sort data=sdtm.dm out=dm(keep=usubjid age);
2284 +  by usubjid;
2285 +
2286 +data ae;
2287 +  merge ae(in=x) dm(in=y);
2288 +  by usubjid;
2289 +  if x;
2290 +run;
2291 +
2292 +proc sort data=ae;
2293 +  by usubjid aespid;
2294 +run;
2295 +
2296 +data ae;
2297 +  set ae;
2298 +  by usubjid aespid;
2299 +  length aename date_str trt_str out_str $400 aedur 8;
2300 +  page=int(_n_/4)+1;
2301 +  if aeendtc='' and aeenrf ne '' then aeendtc=propcase(aeenrf);
2302 +  aedur=(aeendy-aestdy)+1;
2303 +  if aeoccur='N' then do;
2304 +    aename='None';
2305 +	date_str='';
2306 +	trt_str='';
2307 +	out_str='';
2308 +  end;
2309 +  else do;
2310 +    aename='V: '||trim(left(aeterm))||'`-2nP: '||trim(left(aedecod))||'`-2nS: '||trim(left(aebodsys));
                                                                         The SAS System

2311 +    date_str='Start Date: '||trim(left(aestdtc))||'`-2n'||'Start Day: '||trim(left(aestdy))||'`-2n `-2n'||'Stop Date:
2311!+'||trim(left(aeendtc))||'`-2n'||'Duration: '||trim(left(aedur));
2312 +	trt_str='Med: '||trim(left(put(aecontrt,$yesno.)))||'`-2n'||'Other: '||trim(left(put(aeaddyn,$yesno.)));
2313 +	out_str='O: '||trim(left(aeout))||'`-2n'||'A: '||trim(left(aeacn));
2314 +  end;
2315 +run;
2316 +
2317 +%mcase(inds=ae, exceptl=%str('USUBJID','DATE_STR','TRT_STR'));
2318 +
2319 +%mnumobs(inds=ae);
2320 +
2321 +%if &nobs=0 %then %do;
2322 +  data newae;
2323 +    aename='None Reported';
2324 +  run;
2325 +
2326 +  data ae;
2327 +    set ae newae;
2328 +  run;
2329 +%end;
2330 +
2331 +%mtitle(progid=&progid);
2332 +
2333 +footnote1;
2334 +
2335 +proc report data=ae headline headskip nowindows split='|' missing spacing=2;
2336 +  column page usubjid age aespid aename date_str aesev aerel trt_str out_str
2337 +    %if "&progid" ne "lae3" %then %do;
2338 +      aeser
2339 +    %end;
2340 +	%if "&progid" ne "lae6" %then %do;
2341 +      aehayn
2342 +    %end;
2343 +       ;
2344 +  define page / order noprint;
2345 +  define usubjid / order 'Subject' style={just=left cellwidth=6%};
2346 +  define age / order 'Age|(Years)' format=4.1 style={just=center cellwidth=5%};
2347 +  define aespid / order noprint;
2348 +  define aename / order 'V: AE Verbatim Term|P: Preferred Term`{super a}|S: System Organ Class' flow style={just=left cellwidth=22%};
2349 +  define date_str / display 'Start/Stop Date|Duration(Days)' style={just=left cellwidth=15%};
2350 +  define aesev / display 'Severity' style={just=left cellwidth=8%};
2351 +  define aerel / display 'Relationship|to Drug`{super b}' style={just=left cellwidth=8%};
2352 +  define trt_str / display 'Con Med/|Other Trt?' style={just=left cellwidth=7%};
2353 +  define out_str / display 'Outcome (O)/|Action Taken|with Study|Treatment(A)' flow style={just=left cellwidth=15%};
2354 +  %if "&progid" ne "lae3" %then %do;
2355 +    define aeser / display 'Serious?' format=$yesno. style={just=left cellwidth=6%};
2356 +  %end;
2357 +  %if "&progid" ne "lae6" %then %do;
                                                                         The SAS System

2358 +    define aehayn / display 'Hyper-|sensitivity`{super c}' format=$yesno. style={just=left cellwidth=7%};
2359 +  %end;
2360 +  compute after usubjid / style=[just=left];
2361 +     line 143*'_';
2362 +  endcomp;
2363 +  compute after aename;
2364 +    line "  ";
2365 +  endcomp;
2366 +  compute after page / style=[just=left];
2367 +	 line "&footn1";
2368 +	 line "&footn2";
2369 +	 line "&footn3";
2370 +	 line "&footn4";
2371 +	 line " ";
2372 +	 line "&footn11";
2373 +  endcomp;
2374 +  break after page / page;
2375 +run;
2376 +
2377 +ods html close;
2378 +ods listing;
2379 +
2380 +%mpageof;
2381 +
2382 +%mend listing;
2383 +%listing(progid=lae1);
MLOGIC(LISTING):  Beginning execution.
MLOGIC(LISTING):  Parameter PROGID has value lae1
MLOGIC(LISTING):  Parameter SUBSET has value 
NOTE: Data file SDTM.AE.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. Cross Environment Data 
      Access will be used, which might require additional CPU resources and might reduce performance.
MPRINT(LISTING):   proc sort data=sdtm.ae out=ae;
MPRINT(LISTING):   by usubjid;
SYMBOLGEN:  Macro variable SUBSET resolves to 
MLOGIC(LISTING):  %IF condition &subset ne is FALSE

NOTE: There were 101 observations read from the data set SDTM.AE.
NOTE: The data set WORK.AE has 101 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: Data file SDTM.DM.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. Cross Environment Data 
      Access will be used, which might require additional CPU resources and might reduce performance.
MPRINT(LISTING):   proc sort data=sdtm.dm out=dm(keep=usubjid age);
MPRINT(LISTING):   by usubjid;
NOTE: There were 32 observations read from the data set SDTM.DM.
                                                                         The SAS System

NOTE: The data set WORK.DM has 32 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(LISTING):   data ae;
MPRINT(LISTING):   merge ae(in=x) dm(in=y);
MPRINT(LISTING):   by usubjid;
MPRINT(LISTING):   if x;
MPRINT(LISTING):   run;
NOTE: There were 101 observations read from the data set WORK.AE.
NOTE: There were 32 observations read from the data set WORK.DM.
NOTE: The data set WORK.AE has 101 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LISTING):   proc sort data=ae;
MPRINT(LISTING):   by usubjid aespid;
MPRINT(LISTING):   run;

NOTE: There were 101 observations read from the data set WORK.AE.
NOTE: The data set WORK.AE has 101 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LISTING):   data ae;
MPRINT(LISTING):   set ae;
MPRINT(LISTING):   by usubjid aespid;
MPRINT(LISTING):   length aename date_str trt_str out_str $400 aedur 8;
MPRINT(LISTING):   page=int(_n_/4)+1;
MPRINT(LISTING):   if aeendtc='' and aeenrf ne '' then aeendtc=propcase(aeenrf);
MPRINT(LISTING):   aedur=(aeendy-aestdy)+1;
MPRINT(LISTING):   if aeoccur='N' then do;
MPRINT(LISTING):   aename='None';
MPRINT(LISTING):   date_str='';
MPRINT(LISTING):   trt_str='';
MPRINT(LISTING):   out_str='';
MPRINT(LISTING):   end;
MPRINT(LISTING):   else do;
MPRINT(LISTING):   aename='V: '||trim(left(aeterm))||'`-2nP: '||trim(left(aedecod))||'`-2nS: '||trim(left(aebodsys));
MPRINT(LISTING):   date_str='Start Date: '||trim(left(aestdtc))||'`-2n'||'Start Day: '||trim(left(aestdy))||'`-2n `-2n'||'Stop Date: 
'||trim(left(aeendtc))||'`-2n'||'Duration: '||trim(left(aedur));
MPRINT(LISTING):   trt_str='Med: '||trim(left(put(aecontrt,$yesno.)))||'`-2n'||'Other: '||trim(left(put(aeaddyn,$yesno.)));
                                                                         The SAS System

MPRINT(LISTING):   out_str='O: '||trim(left(aeout))||'`-2n'||'A: '||trim(left(aeacn));
MPRINT(LISTING):   end;
MPRINT(LISTING):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2383:185   2383:36    
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      34 at 2383:124   
NOTE: There were 101 observations read from the data set WORK.AE.
NOTE: The data set WORK.AE has 101 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MLOGIC(MCASE):  Beginning execution.
MLOGIC(MCASE):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mcase.sas
MLOGIC(MCASE):  Parameter INDS has value ae
MLOGIC(MCASE):  Parameter EXCEPTL has value 'USUBJID''DATE_STR''TRT_STR'
MLOGIC(MCASE):  Parameter FIX_ID has value Y
SYMBOLGEN:  Macro variable INDS resolves to ae
MLOGIC(MCASE):  %IF condition &inds= is FALSE
MPRINT(MCASE):   proc sql noprint;
SYMBOLGEN:  Macro variable INDS resolves to ae
SYMBOLGEN:  Macro variable EXCEPTL resolves to 'USUBJID','DATE_STR','TRT_STR'
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(MCASE):   select distinct name into :varlist separated by ' ' from dictionary.columns where libname='WORK' and memname="AE" and upcase(type)="CHAR" and 
upcase(name) not in('USUBJID','DATE_STR','TRT_STR');
MPRINT(MCASE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
MLOGIC(MCASE):  %IF condition "&varlist" ne "" is TRUE
SYMBOLGEN:  Macro variable INDS resolves to ae
MPRINT(MCASE):   data ae;
SYMBOLGEN:  Macro variable INDS resolves to ae
MPRINT(MCASE):   set ae;
SYMBOLGEN:  Macro variable FIX_ID resolves to Y
MLOGIC(MCASE):  %IF condition %upcase(&fix_id)=Y is TRUE
MPRINT(MCASE):   usubjid=substr(usubjid,8);
MLOGIC(MCASE):  %LET (variable name is NUM)
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
                                                                         The SAS System

            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
MLOGIC(MCASE):  %PUT &myval
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
AEACN
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
MLOGIC(MCASE):  %DO %WHILE(&myval ne) loop beginning; condition is TRUE.  
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
MPRINT(MCASE):   AEACN=propcase(AEACN);
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
MPRINT(MCASE):   AEACN=tranwrd(AEACN,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
MPRINT(MCASE):   AEACN=tranwrd(AEACN,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
MPRINT(MCASE):   AEACN=tranwrd(AEACN,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
MPRINT(MCASE):   AEACN=tranwrd(AEACN,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
MPRINT(MCASE):   AEACN=tranwrd(AEACN,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
SYMBOLGEN:  Macro variable MYVAL resolves to AEACN
MPRINT(MCASE):   AEACN=tranwrd(AEACN,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 1
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 2
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
MPRINT(MCASE):   AEADDTRT=propcase(AEADDTRT);
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
MPRINT(MCASE):   AEADDTRT=tranwrd(AEADDTRT,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
MPRINT(MCASE):   AEADDTRT=tranwrd(AEADDTRT,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
MPRINT(MCASE):   AEADDTRT=tranwrd(AEADDTRT,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
                                                                         The SAS System

SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
MPRINT(MCASE):   AEADDTRT=tranwrd(AEADDTRT,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
MPRINT(MCASE):   AEADDTRT=tranwrd(AEADDTRT,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDTRT
MPRINT(MCASE):   AEADDTRT=tranwrd(AEADDTRT,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 2
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 3
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
MPRINT(MCASE):   AEADDYN=propcase(AEADDYN);
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
MPRINT(MCASE):   AEADDYN=tranwrd(AEADDYN,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
MPRINT(MCASE):   AEADDYN=tranwrd(AEADDYN,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
MPRINT(MCASE):   AEADDYN=tranwrd(AEADDYN,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
MPRINT(MCASE):   AEADDYN=tranwrd(AEADDYN,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
MPRINT(MCASE):   AEADDYN=tranwrd(AEADDYN,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEADDYN
MPRINT(MCASE):   AEADDYN=tranwrd(AEADDYN,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 3
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 4
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
MPRINT(MCASE):   AEBODSYS=propcase(AEBODSYS);
                                                                         The SAS System

SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
MPRINT(MCASE):   AEBODSYS=tranwrd(AEBODSYS,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
MPRINT(MCASE):   AEBODSYS=tranwrd(AEBODSYS,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
MPRINT(MCASE):   AEBODSYS=tranwrd(AEBODSYS,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
MPRINT(MCASE):   AEBODSYS=tranwrd(AEBODSYS,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
MPRINT(MCASE):   AEBODSYS=tranwrd(AEBODSYS,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
SYMBOLGEN:  Macro variable MYVAL resolves to AEBODSYS
MPRINT(MCASE):   AEBODSYS=tranwrd(AEBODSYS,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 4
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 5
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
MPRINT(MCASE):   AECAT=propcase(AECAT);
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
MPRINT(MCASE):   AECAT=tranwrd(AECAT,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
MPRINT(MCASE):   AECAT=tranwrd(AECAT,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
MPRINT(MCASE):   AECAT=tranwrd(AECAT,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
MPRINT(MCASE):   AECAT=tranwrd(AECAT,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
MPRINT(MCASE):   AECAT=tranwrd(AECAT,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
SYMBOLGEN:  Macro variable MYVAL resolves to AECAT
MPRINT(MCASE):   AECAT=tranwrd(AECAT,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
                                                                         The SAS System

SYMBOLGEN:  Macro variable NUM resolves to 5
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 6
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
MPRINT(MCASE):   AECONTRT=propcase(AECONTRT);
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
MPRINT(MCASE):   AECONTRT=tranwrd(AECONTRT,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
MPRINT(MCASE):   AECONTRT=tranwrd(AECONTRT,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
MPRINT(MCASE):   AECONTRT=tranwrd(AECONTRT,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
MPRINT(MCASE):   AECONTRT=tranwrd(AECONTRT,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
MPRINT(MCASE):   AECONTRT=tranwrd(AECONTRT,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
SYMBOLGEN:  Macro variable MYVAL resolves to AECONTRT
MPRINT(MCASE):   AECONTRT=tranwrd(AECONTRT,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 6
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 7
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
MPRINT(MCASE):   AEDECOD=propcase(AEDECOD);
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
MPRINT(MCASE):   AEDECOD=tranwrd(AEDECOD,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
MPRINT(MCASE):   AEDECOD=tranwrd(AEDECOD,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
MPRINT(MCASE):   AEDECOD=tranwrd(AEDECOD,'v:','V:');
                                                                         The SAS System

SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
MPRINT(MCASE):   AEDECOD=tranwrd(AEDECOD,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
MPRINT(MCASE):   AEDECOD=tranwrd(AEDECOD,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
SYMBOLGEN:  Macro variable MYVAL resolves to AEDECOD
MPRINT(MCASE):   AEDECOD=tranwrd(AEDECOD,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 7
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 8
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
MPRINT(MCASE):   AEENDTC=propcase(AEENDTC);
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
MPRINT(MCASE):   AEENDTC=tranwrd(AEENDTC,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
MPRINT(MCASE):   AEENDTC=tranwrd(AEENDTC,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
MPRINT(MCASE):   AEENDTC=tranwrd(AEENDTC,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
MPRINT(MCASE):   AEENDTC=tranwrd(AEENDTC,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
MPRINT(MCASE):   AEENDTC=tranwrd(AEENDTC,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AEENDTC
MPRINT(MCASE):   AEENDTC=tranwrd(AEENDTC,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 8
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 9
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
                                                                         The SAS System

MPRINT(MCASE):   AEENRF=propcase(AEENRF);
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
MPRINT(MCASE):   AEENRF=tranwrd(AEENRF,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
MPRINT(MCASE):   AEENRF=tranwrd(AEENRF,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
MPRINT(MCASE):   AEENRF=tranwrd(AEENRF,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
MPRINT(MCASE):   AEENRF=tranwrd(AEENRF,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
MPRINT(MCASE):   AEENRF=tranwrd(AEENRF,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
SYMBOLGEN:  Macro variable MYVAL resolves to AEENRF
MPRINT(MCASE):   AEENRF=tranwrd(AEENRF,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 9
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 10
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
MPRINT(MCASE):   AEHAYN=propcase(AEHAYN);
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
MPRINT(MCASE):   AEHAYN=tranwrd(AEHAYN,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
MPRINT(MCASE):   AEHAYN=tranwrd(AEHAYN,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
MPRINT(MCASE):   AEHAYN=tranwrd(AEHAYN,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
MPRINT(MCASE):   AEHAYN=tranwrd(AEHAYN,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
MPRINT(MCASE):   AEHAYN=tranwrd(AEHAYN,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
SYMBOLGEN:  Macro variable MYVAL resolves to AEHAYN
MPRINT(MCASE):   AEHAYN=tranwrd(AEHAYN,'ongoing','Ongoing');
                                                                         The SAS System

MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 10
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 11
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
MPRINT(MCASE):   AEOCCUR=propcase(AEOCCUR);
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
MPRINT(MCASE):   AEOCCUR=tranwrd(AEOCCUR,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
MPRINT(MCASE):   AEOCCUR=tranwrd(AEOCCUR,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
MPRINT(MCASE):   AEOCCUR=tranwrd(AEOCCUR,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
MPRINT(MCASE):   AEOCCUR=tranwrd(AEOCCUR,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
MPRINT(MCASE):   AEOCCUR=tranwrd(AEOCCUR,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
SYMBOLGEN:  Macro variable MYVAL resolves to AEOCCUR
MPRINT(MCASE):   AEOCCUR=tranwrd(AEOCCUR,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 11
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 12
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
MPRINT(MCASE):   AEOUT=propcase(AEOUT);
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
MPRINT(MCASE):   AEOUT=tranwrd(AEOUT,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
MPRINT(MCASE):   AEOUT=tranwrd(AEOUT,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
                                                                         The SAS System

MPRINT(MCASE):   AEOUT=tranwrd(AEOUT,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
MPRINT(MCASE):   AEOUT=tranwrd(AEOUT,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
MPRINT(MCASE):   AEOUT=tranwrd(AEOUT,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
SYMBOLGEN:  Macro variable MYVAL resolves to AEOUT
MPRINT(MCASE):   AEOUT=tranwrd(AEOUT,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 12
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 13
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
MPRINT(MCASE):   AEREL=propcase(AEREL);
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
MPRINT(MCASE):   AEREL=tranwrd(AEREL,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
MPRINT(MCASE):   AEREL=tranwrd(AEREL,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
MPRINT(MCASE):   AEREL=tranwrd(AEREL,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
MPRINT(MCASE):   AEREL=tranwrd(AEREL,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
MPRINT(MCASE):   AEREL=tranwrd(AEREL,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
SYMBOLGEN:  Macro variable MYVAL resolves to AEREL
MPRINT(MCASE):   AEREL=tranwrd(AEREL,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 13
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 14
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
                                                                         The SAS System

SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
MPRINT(MCASE):   AESEQ=propcase(AESEQ);
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
MPRINT(MCASE):   AESEQ=tranwrd(AESEQ,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
MPRINT(MCASE):   AESEQ=tranwrd(AESEQ,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
MPRINT(MCASE):   AESEQ=tranwrd(AESEQ,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
MPRINT(MCASE):   AESEQ=tranwrd(AESEQ,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
MPRINT(MCASE):   AESEQ=tranwrd(AESEQ,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
SYMBOLGEN:  Macro variable MYVAL resolves to AESEQ
MPRINT(MCASE):   AESEQ=tranwrd(AESEQ,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 14
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 15
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
MPRINT(MCASE):   AESER=propcase(AESER);
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
MPRINT(MCASE):   AESER=tranwrd(AESER,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
MPRINT(MCASE):   AESER=tranwrd(AESER,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
MPRINT(MCASE):   AESER=tranwrd(AESER,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
MPRINT(MCASE):   AESER=tranwrd(AESER,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
MPRINT(MCASE):   AESER=tranwrd(AESER,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
SYMBOLGEN:  Macro variable MYVAL resolves to AESER
                                                                         The SAS System

MPRINT(MCASE):   AESER=tranwrd(AESER,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 15
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 16
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
MPRINT(MCASE):   AESEV=propcase(AESEV);
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
MPRINT(MCASE):   AESEV=tranwrd(AESEV,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
MPRINT(MCASE):   AESEV=tranwrd(AESEV,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
MPRINT(MCASE):   AESEV=tranwrd(AESEV,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
MPRINT(MCASE):   AESEV=tranwrd(AESEV,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
MPRINT(MCASE):   AESEV=tranwrd(AESEV,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
SYMBOLGEN:  Macro variable MYVAL resolves to AESEV
MPRINT(MCASE):   AESEV=tranwrd(AESEV,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 16
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 17
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
MPRINT(MCASE):   AESPID=propcase(AESPID);
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
MPRINT(MCASE):   AESPID=tranwrd(AESPID,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
MPRINT(MCASE):   AESPID=tranwrd(AESPID,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
                                                                         The SAS System

SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
MPRINT(MCASE):   AESPID=tranwrd(AESPID,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
MPRINT(MCASE):   AESPID=tranwrd(AESPID,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
MPRINT(MCASE):   AESPID=tranwrd(AESPID,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
SYMBOLGEN:  Macro variable MYVAL resolves to AESPID
MPRINT(MCASE):   AESPID=tranwrd(AESPID,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 17
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 18
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
MPRINT(MCASE):   AESTDTC=propcase(AESTDTC);
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
MPRINT(MCASE):   AESTDTC=tranwrd(AESTDTC,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
MPRINT(MCASE):   AESTDTC=tranwrd(AESTDTC,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
MPRINT(MCASE):   AESTDTC=tranwrd(AESTDTC,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
MPRINT(MCASE):   AESTDTC=tranwrd(AESTDTC,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
MPRINT(MCASE):   AESTDTC=tranwrd(AESTDTC,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
SYMBOLGEN:  Macro variable MYVAL resolves to AESTDTC
MPRINT(MCASE):   AESTDTC=tranwrd(AESTDTC,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 18
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 19
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
                                                                         The SAS System

SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
MPRINT(MCASE):   AETERM=propcase(AETERM);
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
MPRINT(MCASE):   AETERM=tranwrd(AETERM,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
MPRINT(MCASE):   AETERM=tranwrd(AETERM,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
MPRINT(MCASE):   AETERM=tranwrd(AETERM,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
MPRINT(MCASE):   AETERM=tranwrd(AETERM,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
MPRINT(MCASE):   AETERM=tranwrd(AETERM,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
SYMBOLGEN:  Macro variable MYVAL resolves to AETERM
MPRINT(MCASE):   AETERM=tranwrd(AETERM,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 19
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 20
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=propcase(DOMAIN);
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=tranwrd(DOMAIN,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=tranwrd(DOMAIN,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=tranwrd(DOMAIN,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=tranwrd(DOMAIN,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=tranwrd(DOMAIN,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
                                                                         The SAS System

SYMBOLGEN:  Macro variable MYVAL resolves to DOMAIN
MPRINT(MCASE):   DOMAIN=tranwrd(DOMAIN,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 20
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 21
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=propcase(STUDYID);
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=tranwrd(STUDYID,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=tranwrd(STUDYID,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=tranwrd(STUDYID,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=tranwrd(STUDYID,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=tranwrd(STUDYID,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
SYMBOLGEN:  Macro variable MYVAL resolves to STUDYID
MPRINT(MCASE):   STUDYID=tranwrd(STUDYID,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 21
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 22
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
MPRINT(MCASE):   VISIT=propcase(VISIT);
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
MPRINT(MCASE):   VISIT=tranwrd(VISIT,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
MPRINT(MCASE):   VISIT=tranwrd(VISIT,'p:','P:');
                                                                         The SAS System

SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
MPRINT(MCASE):   VISIT=tranwrd(VISIT,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
MPRINT(MCASE):   VISIT=tranwrd(VISIT,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
MPRINT(MCASE):   VISIT=tranwrd(VISIT,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
SYMBOLGEN:  Macro variable MYVAL resolves to VISIT
MPRINT(MCASE):   VISIT=tranwrd(VISIT,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 22
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 23
SYMBOLGEN:  Macro variable MYVAL resolves to aename
MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to aename
SYMBOLGEN:  Macro variable MYVAL resolves to aename
MPRINT(MCASE):   aename=propcase(aename);
SYMBOLGEN:  Macro variable MYVAL resolves to aename
SYMBOLGEN:  Macro variable MYVAL resolves to aename
MPRINT(MCASE):   aename=tranwrd(aename,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to aename
SYMBOLGEN:  Macro variable MYVAL resolves to aename
MPRINT(MCASE):   aename=tranwrd(aename,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to aename
SYMBOLGEN:  Macro variable MYVAL resolves to aename
MPRINT(MCASE):   aename=tranwrd(aename,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to aename
SYMBOLGEN:  Macro variable MYVAL resolves to aename
MPRINT(MCASE):   aename=tranwrd(aename,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to aename
SYMBOLGEN:  Macro variable MYVAL resolves to aename
MPRINT(MCASE):   aename=tranwrd(aename,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to aename
SYMBOLGEN:  Macro variable MYVAL resolves to aename
MPRINT(MCASE):   aename=tranwrd(aename,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 23
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 24
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
                                                                         The SAS System

MLOGIC(MCASE):  %DO %WHILE(&myval ne) condition is TRUE; loop will iterate again.
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
MPRINT(MCASE):   out_str=propcase(out_str);
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
MPRINT(MCASE):   out_str=tranwrd(out_str,'s:','S:');
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
MPRINT(MCASE):   out_str=tranwrd(out_str,'p:','P:');
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
MPRINT(MCASE):   out_str=tranwrd(out_str,'v:','V:');
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
MPRINT(MCASE):   out_str=tranwrd(out_str,'a:','A:');
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
MPRINT(MCASE):   out_str=tranwrd(out_str,'w:','W:');
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
SYMBOLGEN:  Macro variable MYVAL resolves to out_str
MPRINT(MCASE):   out_str=tranwrd(out_str,'ongoing','Ongoing');
MLOGIC(MCASE):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 24
MLOGIC(MCASE):  %LET (variable name is MYVAL)
SYMBOLGEN:  Macro variable VARLIST resolves to AEACN AEADDTRT AEADDYN AEBODSYS AECAT AECONTRT AEDECOD AEENDTC AEENRF AEHAYN AEOCCUR AEOUT AEREL AESEQ AESER 
            AESEV AESPID AESTDTC AETERM DOMAIN STUDYID VISIT aename out_str
SYMBOLGEN:  Macro variable NUM resolves to 25
SYMBOLGEN:  Macro variable MYVAL resolves to 
MLOGIC(MCASE):  %DO %WHILE() condition is FALSE; loop will not iterate again.
MPRINT(MCASE):   run;

NOTE: There were 101 observations read from the data set WORK.AE.
NOTE: The data set WORK.AE has 101 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MLOGIC(MCASE):  Ending execution.
MPRINT(LISTING):  ;
MPRINT(LISTING):  **************************************************************************************;
MPRINT(LISTING):  ** macro mnumobs - calculates number of observations in a SAS dataset ** must be called from OUTSIDE a data step ** parameters: ** inds 
(required) input dataset ** mjb 13apr2010 ** mods: ** **************************************************************************************;
MLOGIC(LISTING):  Beginning compilation of MNUMOBS using the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mnumobs.sas.
MLOGIC(LISTING):  Ending compilation of MNUMOBS.
MLOGIC(MNUMOBS):  Beginning execution.
MLOGIC(MNUMOBS):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mnumobs.sas
                                                                         The SAS System

MLOGIC(MNUMOBS):  Parameter INDS has value ae
MLOGIC(MNUMOBS):  %GLOBAL  NOBS
SYMBOLGEN:  Macro variable INDS resolves to ae
MLOGIC(MNUMOBS):  %IF condition &inds= is FALSE
MPRINT(MNUMOBS):   proc sql noprint;
SYMBOLGEN:  Macro variable INDS resolves to ae
MPRINT(MNUMOBS):   select nobs into :nobs separated by ' ' from dictionary.tables where libname='WORK' and memname="AE";
MPRINT(MNUMOBS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MLOGIC(MNUMOBS):  Ending execution.
MPRINT(LISTING):  ;
SYMBOLGEN:  Macro variable NOBS resolves to 101
MLOGIC(LISTING):  %IF condition &nobs=0 is FALSE
MLOGIC(MTITLE):  Beginning execution.
MLOGIC(MTITLE):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mtitle.sas
SYMBOLGEN:  Macro variable PROGID resolves to lae1
MLOGIC(MTITLE):  Parameter PROGID has value lae1
MLOGIC(MTITLE):  Parameter TYPE has value html
MLOGIC(MTITLE):  Parameter ORIENT has value l
MLOGIC(MTITLE):  Parameter SASOPT has value nodate nonumber nobyline
MLOGIC(MTITLE):  Parameter BYVAR has value 
MLOGIC(MTITLE):  Parameter BYTXT has value 
MLOGIC(MTITLE):  Parameter TMNAME has value rtf
MLOGIC(MTITLE):  Parameter NOPAGE has value n
SYMBOLGEN:  Macro variable SASOPT resolves to nodate nonumber nobyline
MLOGIC(MTITLE):  %IF condition &sasopt ne is TRUE
SYMBOLGEN:  Macro variable SASOPT resolves to nodate nonumber nobyline
MPRINT(MTITLE):   options nodate nonumber nobyline;
MLOGIC(MTITLE):  %GLOBAL  OUTPUTNAME  
MPRINT(MTITLE):   options mprint;
MLOGIC(MTITLE):  %LET (variable name is MLS)
SYMBOLGEN:  Macro variable ORIENT resolves to l
MLOGIC(MTITLE):  %IF condition %upcase(&orient)=P is FALSE
MLOGIC(MTITLE):  %LET (variable name is ORIENTO)
SYMBOLGEN:  Macro variable ORIENTO resolves to Landscape
MPRINT(MTITLE):   options orientation=Landscape;
MLOGIC(MTITLE):  %GLOBAL  TABLNO NUMTITLE FOOTN1 FOOTN2 FOOTN3 FOOTN4 FOOTN5 FOOTN6 FOOTN7 FOOTN8 FOOTN9 SPAGENO SFOOTN1 SFOOTN2 SFOOTN3 SFOOTN8 SFOOTN9 
      SFOOTN10 SDATA NUMFOOT OUTPUTNAME         TABNUM TITLE1 TITLE2 TITLE3 TITLE4 TITLE5 TITLE6 OUTPUTF L_SOURCE  FOOTN11
MLOGIC(MTITLE):  %LET (variable name is FSTLN)
MLOGIC(MTITLE):  %LET (variable name is CHGLN)
MLOGIC(MTITLE):  %LET (variable name is FOOTBR)
MPRINT(MTITLE):   data toc_prog;
SYMBOLGEN:  Macro variable DERDATA resolves to derived
MPRINT(MTITLE):   set derived.toc_prog;
                                                                         The SAS System

NOTE: Data file DERIVED.TOC_PROG.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. Cross 
      Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
SYMBOLGEN:  Macro variable PROGID resolves to lae1
MPRINT(MTITLE):   if compress(upcase(progid))=upcase("lae1");
MPRINT(MTITLE):   call symput('tabnum',trim(tabnum));
MPRINT(MTITLE):   if index(title1,'`{') then offset=9;
MPRINT(MTITLE):   else offset=0;
SYMBOLGEN:  Macro variable MLS resolves to 170
MPRINT(MTITLE):   call symput('title1',trim(title1)||repeat(" ",(170-length(title1)-length(tabnum)-30-4+offset))||"[Page_00000_of_99999]");
MPRINT(MTITLE):   call symput('title2',trim(title2));
MPRINT(MTITLE):   call symput('title3',trim(title3));
MPRINT(MTITLE):   call symput('title4',trim(title4));
MPRINT(MTITLE):   call symput('title5',trim(title5));
MPRINT(MTITLE):   call symput('title6',trim(title6));
MPRINT(MTITLE):   call symput('outputname',trim(outname));
MPRINT(MTITLE):   call symput('numtitle',compress(put(numtitle,3.)));
MPRINT(MTITLE):   call symput('footn1',trim(footn1));
MPRINT(MTITLE):   call symput('footn2',trim(footn2));
MPRINT(MTITLE):   call symput('footn3',trim(footn3));
MPRINT(MTITLE):   call symput('footn4',trim(footn4));
MPRINT(MTITLE):   call symput('footn5',trim(footn5));
MPRINT(MTITLE):   call symput('footn6',trim(footn6));
MPRINT(MTITLE):   call symput('footn7',trim(footn7));
MPRINT(MTITLE):   call symput('footn8',trim(footn8));
MPRINT(MTITLE):   call symput('progname',trim(progname));
SYMBOLGEN:  Macro variable DRAFT_FINAL resolves to FINAL
SYMBOLGEN:  Macro variable SYSDATE9 resolves to 21JAN2025
SYMBOLGEN:  Macro variable SYSTIME resolves to 18:08
MPRINT(MTITLE):   if l_source ne '' then footn11="PROGRAM: " || trim(progname) || ".sas, " || "SOURCE: " || trim(l_source) || ", (FINAL) 21JAN2025 18:08";
SYMBOLGEN:  Macro variable DRAFT_FINAL resolves to FINAL
SYMBOLGEN:  Macro variable SYSDATE9 resolves to 21JAN2025
SYMBOLGEN:  Macro variable SYSTIME resolves to 18:08
MPRINT(MTITLE):   else footn11="PROGRAM: " || trim(progname) || ".sas, (FINAL) 21JAN2025 18:08";
MPRINT(MTITLE):   footn11l=trim(footn11);
MPRINT(MTITLE):   call symput('footn11',trim(footn11l));
MPRINT(MTITLE):   call symput('numfoot',compress(put(numfoot,3.)));
SYMBOLGEN:  Macro variable TYPE resolves to html
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition &TYPE=LST or &TYPE=PS is FALSE
SYMBOLGEN:  Macro variable BYVAR resolves to 
MLOGIC(MTITLE):  %IF condition &BYVAR NE is FALSE
MPRINT(MTITLE):   if index(tabnum,'Table') then call symput('outputf','tables');
MPRINT(MTITLE):   else if index(tabnum,'Appendix') then call symput('outputf','listings');
MPRINT(MTITLE):   else if index(tabnum,'Figure') then call symput('outputf','figures');
SYMBOLGEN:  Macro variable ORIENT resolves to l
MLOGIC(MTITLE):  %IF condition %UPCASE(&ORIENT)=P is FALSE
MPRINT(MTITLE):   run;

                                                                         The SAS System

NOTE: There were 110 observations read from the data set DERIVED.TOC_PROG.
NOTE: The data set WORK.TOC_PROG has 1 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MLOGIC(MTITLE):  %LET (variable name is NUMOBS)
MPRINT(MTITLE):   proc sql noprint;
MPRINT(MTITLE):   select count(*) into: numobs from toc_prog;
MPRINT(MTITLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MLOGIC(MTITLE):  %GLOBAL  _OUTPUTNAME
MLOGIC(MTITLE):  %LET (variable name is _OUTPUTNAME)
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to listings
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to a16_02_07_01_lae1
SYMBOLGEN:  Macro variable NUMOBS resolves to        1
MLOGIC(MTITLE):  %IF condition &numobs=0 is FALSE
SYMBOLGEN:  Macro variable NUMOBS resolves to        1
MLOGIC(MTITLE):  %IF condition &numobs>1 is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=RTF is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=HTML is TRUE
MPRINT(MTITLE):   ods listing close;
MPRINT(MTITLE):   ods path sashelp.tmplmst;
MPRINT(MTITLE):   * &derdata..matt;
SYMBOLGEN:  Macro variable TYPE resolves to html
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to listings
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to a16_02_07_01_lae1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MTITLE):   ods html file="/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_07_01_lae1.html";
NOTE: Writing HTML Body file: /nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_07_01_lae1.html
MPRINT(MTITLE):   options linesize=160 pagesize=50;
SYMBOLGEN:  Macro variable PTITLE1 resolves to ABCD, Inc.
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(MTITLE):   title1 j=l "ABCD, Inc.";
SYMBOLGEN:  Macro variable PTITLE2 resolves to XMB-111 Draft
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(MTITLE):   title2 j=l "XMB-111 Draft";
SYMBOLGEN:  Macro variable TABNUM resolves to Appendix 16.2.7-1
SYMBOLGEN:  Macro variable TITLE1 resolves to Adverse Events                                                                                                    
                                                                         The SAS System

                  [Page_00000_of_99999]
MPRINT(MTITLE):   title4 j=l "Appendix 16.2.7-1:  Adverse Events                                                                                                
          [Page_00000_of_99999]";
SYMBOLGEN:  Macro variable NUMTITLE resolves to 1
MLOGIC(MTITLE):  %DO loop beginning; index variable I; start value is 2; stop value is 1; by value is 1.  Loop will not be executed.
SYMBOLGEN:  Macro variable BYVAR resolves to 
MLOGIC(MTITLE):  %IF condition &byvar ne is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=RTF is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=LST is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=HTML is TRUE
SYMBOLGEN:  Macro variable FOOTBR resolves to ''
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NUMFOOT resolves to 3
MLOGIC(MTITLE):  %IF condition &numfoot ne 0 is TRUE
SYMBOLGEN:  Macro variable NUMFOOT resolves to 3
MLOGIC(MTITLE):  %DO loop beginning; index variable I; start value is 1; stop value is 3; by value is 1.  
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable FOOTN1 resolves to `{super a}MedDRA version 12.1
WARNING: The FOOTNOTE statement is ambiguous due to invalid options or unquoted text.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable NUMFOOT resolves to 3
MLOGIC(MTITLE):  %IF condition &i ^= &numfoot is TRUE
SYMBOLGEN:  Macro variable CHGLN resolves to ''
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(MTITLE):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable FOOTN2 resolves to `{super b}Relationship to drug is determined by the investigator
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable NUMFOOT resolves to 3
MLOGIC(MTITLE):  %IF condition &i ^= &numfoot is TRUE
SYMBOLGEN:  Macro variable CHGLN resolves to ''
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(MTITLE):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable FOOTN3 resolves to `{super c}Hypersensitivity is determined by the investigator
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable NUMFOOT resolves to 3
MLOGIC(MTITLE):  %IF condition &i ^= &numfoot is FALSE
MLOGIC(MTITLE):  %DO loop index variable I is now 4; loop will not iterate again.
MPRINT(MTITLE):   footnote1 j=left '' "`{super a}MedDRA version 12.1" '' "`{super b}Relationship to drug is determined by the investigator" '' "`{super 
c}Hypersensitivity is determined by the investigator";
MPRINT(MTITLE):   footnote2 " ";
                                                                         The SAS System

SYMBOLGEN:  Macro variable FOOTN11 resolves to PROGRAM: rlae.sas, (FINAL) 21JAN2025 18:08
MPRINT(MTITLE):   footnote3 j=l "PROGRAM: rlae.sas, (FINAL) 21JAN2025 18:08";
MLOGIC(MTITLE):  Ending execution.
MPRINT(LISTING):  ;
MPRINT(LISTING):   footnote1;
MPRINT(LISTING):   proc report data=ae headline headskip nowindows split='|' missing spacing=2;
SYMBOLGEN:  Macro variable PROGID resolves to lae1
MLOGIC(LISTING):  %IF condition "&progid" ne "lae3" is TRUE
SYMBOLGEN:  Macro variable PROGID resolves to lae1
MLOGIC(LISTING):  %IF condition "&progid" ne "lae6" is TRUE
MPRINT(LISTING):   column page usubjid age aespid aename date_str aesev aerel trt_str out_str aeser aehayn ;
MPRINT(LISTING):   define page / order noprint;
MPRINT(LISTING):   define usubjid / order 'Subject' style={just=left cellwidth=6%};
MPRINT(LISTING):   define age / order 'Age|(Years)' format=4.1 style={just=center cellwidth=5%};
MPRINT(LISTING):   define aespid / order noprint;
MPRINT(LISTING):   define aename / order 'V: AE Verbatim Term|P: Preferred Term`{super a}|S: System Organ Class' flow style={just=left cellwidth=22%};
MPRINT(LISTING):   define date_str / display 'Start/Stop Date|Duration(Days)' style={just=left cellwidth=15%};
MPRINT(LISTING):   define aesev / display 'Severity' style={just=left cellwidth=8%};
MPRINT(LISTING):   define aerel / display 'Relationship|to Drug`{super b}' style={just=left cellwidth=8%};
MPRINT(LISTING):   define trt_str / display 'Con Med/|Other Trt?' style={just=left cellwidth=7%};
MPRINT(LISTING):   define out_str / display 'Outcome (O)/|Action Taken|with Study|Treatment(A)' flow style={just=left cellwidth=15%};
SYMBOLGEN:  Macro variable PROGID resolves to lae1
MLOGIC(LISTING):  %IF condition "&progid" ne "lae3" is TRUE
MPRINT(LISTING):   define aeser / display 'Serious?' format=$yesno. style={just=left cellwidth=6%};
SYMBOLGEN:  Macro variable PROGID resolves to lae1
MLOGIC(LISTING):  %IF condition "&progid" ne "lae6" is TRUE
MPRINT(LISTING):   define aehayn / display 'Hyper-|sensitivity`{super c}' format=$yesno. style={just=left cellwidth=7%};
MPRINT(LISTING):   compute after usubjid / style=[just=left];
MPRINT(LISTING):   line 143*'_';
MPRINT(LISTING):   endcomp;
MPRINT(LISTING):   compute after aename;
MPRINT(LISTING):   line "  ";
MPRINT(LISTING):   endcomp;
MPRINT(LISTING):   compute after page / style=[just=left];
SYMBOLGEN:  Macro variable FOOTN1 resolves to `{super a}MedDRA version 12.1
MPRINT(LISTING):   line "`{super a}MedDRA version 12.1";
SYMBOLGEN:  Macro variable FOOTN2 resolves to `{super b}Relationship to drug is determined by the investigator
MPRINT(LISTING):   line "`{super b}Relationship to drug is determined by the investigator";
SYMBOLGEN:  Macro variable FOOTN3 resolves to `{super c}Hypersensitivity is determined by the investigator
MPRINT(LISTING):   line "`{super c}Hypersensitivity is determined by the investigator";
SYMBOLGEN:  Macro variable FOOTN4 resolves to  
MPRINT(LISTING):   line " ";
MPRINT(LISTING):   line " ";
SYMBOLGEN:  Macro variable FOOTN11 resolves to PROGRAM: rlae.sas, (FINAL) 21JAN2025 18:08
MPRINT(LISTING):   line "PROGRAM: rlae.sas, (FINAL) 21JAN2025 18:08";
MPRINT(LISTING):   endcomp;
MPRINT(LISTING):   break after page / page;
MPRINT(LISTING):   run;
                                                                         The SAS System


NOTE: There were 101 observations read from the data set WORK.AE.
NOTE: PROCEDURE REPORT used (Total process time):
      real time           4.05 seconds
      cpu time            0.46 seconds
      

MPRINT(LISTING):   ods html close;
MPRINT(LISTING):   ods listing;
MLOGIC(MPAGEOF):  Beginning execution.
MLOGIC(MPAGEOF):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mpageof.sas
MLOGIC(MPAGEOF):  Parameter INFILE has value "&output/&outputf/&outputname..&type"
MLOGIC(MPAGEOF):  Parameter OUTFILE has value "&output/&outputf/&outputname..&type"
MLOGIC(MPAGEOF):  Parameter TYPE has value html
MLOGIC(MPAGEOF):  Parameter TEXT has value [Page_00000_of_99999]
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MPAGEOF):  %IF condition %upcase(&type)^=LST is TRUE
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   ods html close;
MPRINT(MPAGEOF):   data _null_;
SYMBOLGEN:  Macro variable INFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to listings
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to a16_02_07_01_lae1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_07_01_lae1.html" lrecl=32767 end=_eof;
MPRINT(MPAGEOF):   input;
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   if index(_infile_,"[Page_00000_of_99999]") then pageno + 1;
MPRINT(MPAGEOF):   if _eof then call symput('NUMPAGES',compress(put(pageno,14.)));
MPRINT(MPAGEOF):   run;

NOTE: The infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_07_01_lae1.html" is:
      Filename=/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_07_01_lae1.html,
      Owner Name=UNKNOWN,Group Name=UNKNOWN,
      Access Permission=-rwxrwxrwx,
      Last Modified=21Jan2025:13:08:22,
      File Size (bytes)=181351

NOTE: 4647 records were read from the infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_07_01_lae1.html".
      The minimum record length was 0.
      The maximum record length was 376.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MLOGIC(MPAGEOF):  %LOCAL  NUMPAGEL LPAGEOF
                                                                         The SAS System

MLOGIC(MPAGEOF):  %LET (variable name is NUMPAGEL)
SYMBOLGEN:  Macro variable NUMPAGES resolves to 26
MLOGIC(MPAGEOF):  %LET (variable name is LPAGEOF)
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   data _null_;
SYMBOLGEN:  Macro variable INFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to listings
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to a16_02_07_01_lae1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_07_01_lae1.html" lrecl=32767 end=_eof;
SYMBOLGEN:  Macro variable LPAGEOF resolves to 21
MPRINT(MPAGEOF):   length pageof $ 21;
MPRINT(MPAGEOF):   input ;
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   if index(_infile_,"[Page_00000_of_99999]") then do;
MPRINT(MPAGEOF):   pageno + 1;
SYMBOLGEN:  Macro variable NUMPAGEL resolves to 2
SYMBOLGEN:  Macro variable NUMPAGES resolves to 26
MPRINT(MPAGEOF):   pageof = 'Page '|| put(pageno,2.) ||" of 26";
MPRINT(MPAGEOF):   pageof = compbl(pageof);
MPRINT(MPAGEOF):   pageof = right(pageof);
MPRINT(MPAGEOF):   pad="";
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   _infile_ = tranwrd(_infile_,"[Page_00000_of_99999]",pageof);
MPRINT(MPAGEOF):   end;
SYMBOLGEN:  Macro variable OUTFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to listings
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to a16_02_07_01_lae1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   file "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_07_01_lae1.html" noprint lrecl=32767;
MPRINT(MPAGEOF):   put _infile_;
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MPAGEOF):  %IF condition &type=PDF is FALSE
MPRINT(MPAGEOF):   run;

NOTE: The file/infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_07_01_lae1.html" is:
      Filename=/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_07_01_lae1.html,
      Owner Name=UNKNOWN,Group Name=UNKNOWN,
      Access Permission=-rwxrwxrwx,
      Last Modified=21Jan2025:13:08:22,
      File Size (bytes)=181351

NOTE: 4647 records were read from the infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_07_01_lae1.html".
      The minimum record length was 0.
      The maximum record length was 376.
NOTE: 4647 records were written to the file "/nfsshare/sashls2/mattb/XMB111/programs/Output/listings/a16_02_07_01_lae1.html".
                                                                         The SAS System

      The minimum record length was 0.
      The maximum record length was 376.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.02 seconds
      

MLOGIC(MPAGEOF):  Ending execution.
MPRINT(LISTING):  ;
MLOGIC(LISTING):  Ending execution.
2384 +%*listing(progid=lae3, subset=%str(aeser='Y'));
2385 +%*listing(progid=lae4, subset=%str(aesev ne 'MILD' and aesev ne 'MODERATE' and aesev ne ''));
2386 +%*listing(progid=lae5, subset=%str(aerel ne '' and aerel ne 'NOT RELATED' and aerel ne 'UNLIKELY RELATED'));
2387 +%*listing(progid=lae6, subset=%str(aehayn='Y'));
NOTE: %INCLUDE (level 1) ending.
2388  filename _flw_pr clear;
NOTE: Fileref _FLW_PR has been deassigned.
2389  
2390  /* region: Generated macro cleanup */
2391  %symdel _inputCount / nowarn;
2392  %symdel _outputCount / nowarn;
2393  %symdel _input1 / nowarn;
2394  %symdel _output1 / nowarn;
2395  
2396  /* endregion */
2397  
2398  
2399  /* region: Generated step cleanup for rlae.sas */
2400  %_flw_action_end(id-1728966431971-1157, WORK._flw1728966431971115_0_0_5, WORK, "_flw1728966431971115_0_0_5");
MLOGIC(_FLW_ACTION_END):  Beginning execution.
MLOGIC(_FLW_ACTION_END):  Parameter NODES has value id-1728966431971-1157
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_LIBS has value WORK._flw1728966431971115_0_0_5
MLOGIC(_FLW_ACTION_END):  Parameter LIBS has value WORK
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_NAMES has value "_flw1728966431971115_0_0_5"
MPRINT(_FLW_ACTION_END):   data _null_;
MPRINT(_FLW_ACTION_END):   attrib next_table_name length = $32 informat = $32. format = $32. dtStartStr length = $26 informat = $26. format = $26.;
MLOGIC(_FLW_ACTION_END):  %LOCAL  I NEXT_TABLE
SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966431971115_0_0_5
MLOGIC(_FLW_ACTION_END):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is 1.  
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE)
SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966431971115_0_0_5
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_LIB)
SYMBOLGEN:  Macro variable LIBS resolves to WORK
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE_NAME)
SYMBOLGEN:  Macro variable TABLE_NAMES resolves to "_flw1728966431971115_0_0_5"
SYMBOLGEN:  Macro variable I resolves to 1
                                                                         The SAS System

SYMBOLGEN:  Macro variable NEXT_TABLE_NAME resolves to "_flw1728966431971115_0_0_5"
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(_FLW_ACTION_END):   next_table_name = kreverse(ksubstr(kreverse(ksubstr(kstrip(""_flw1728966431971115_0_0_5""),2)),2));
MLOGIC(_FLW_ACTION_END):  %LET (variable name is TABLE_EXISTS)
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966431971115_0_0_5
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966431971115_0_0_5
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_LIB resolves to WORK
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable TABLE_EXISTS resolves to 0
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_TABLE_|WORK|" next_table_name +(-1) "|0";
MLOGIC(_FLW_ACTION_END):  %DO loop index variable I is now 2; loop will not iterate again.
MPRINT(_FLW_ACTION_END):   dtStartStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966431971-1157
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_END_|" dtStartStr +(-1) "|id-1728966431971-1157";
MPRINT(_FLW_ACTION_END):   run;

_FLW_ACTION_TABLE_|WORK|_flw1728966431971115_0_0_5|0
_FLW_ACTION_END_|2025-01-21T13:08:22+00:00|id-1728966431971-1157
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(_FLW_ACTION_END):  Ending execution.
2401  /* endregion */
2402  
2403  /*===========================================================================*
2404  * Node name:        rtdemog.sas
2405  * Node ID:          id-1728966431952-1109
2406  *
2407  * Input Tables:
2408  *   WORK._flw1728966431971115_0_0_5
2409  *
2410  * Output Tables:
2411  *   WORK._flw1728966431952110_0_0_6
2412  *
2413  * Step name:        SAS Program
2414  * Step path:        /dataFlows/steps/a7190700-f59c-4a94-afe2-214ce639fcde
2415  * Step description: Run user written SAS code.
2416  *----------------------------------------------------------------------------*/
2417  
2418  /* region: Generated step setup */
2419  %_flw_action_start(id-1728966431952-1109);
MLOGIC(_FLW_ACTION_START):  Beginning execution.
MLOGIC(_FLW_ACTION_START):  Parameter NODES has value id-1728966431952-1109
MPRINT(_FLW_ACTION_START):   data _null_;
                                                                         The SAS System

MPRINT(_FLW_ACTION_START):   dtEndStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966431952-1109
MPRINT(_FLW_ACTION_START):   put "_FLW_ACTION_START_|" dtEndStr +(-1) "|id-1728966431952-1109";
MPRINT(_FLW_ACTION_START):   run;

_FLW_ACTION_START_|2025-01-21T13:08:22+00:00|id-1728966431952-1109
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(_FLW_ACTION_START):  Ending execution.
2420  /* endregion */
2421  
2422  
2423  /* region: Generated macro initialization */
2424  %let _inputCount = 1;
2425  %let _outputCount = 1;
2426  %let _input1 = WORK._flw1728966431971115_0_0_5;
2427  %let _output1 = WORK._flw1728966431952110_0_0_6;
2428  
2429  /* endregion */
2430  
2431  FILENAME _flw_pr "/nfsshare/sashls2/mattb/XMB111/programs/rtdemog.sas" encoding="UTF-8";
2432  %include _flw_pr / source2;
NOTE: %INCLUDE (level 1) file _FLW_PR is file /nfsshare/sashls2/mattb/XMB111/programs/rtdemog.sas.
2433 +********************************************************************************;
2434 +*** Program:        \biometrics\499\499H01\analyses_mjb\CSR\programs\prod\rtdemog.sas
2435 +*** Programmer:     Matt Becker
2436 +*** Date Created:   02Feb2010
2437 +***
2438 +*** Input :         Derived DMs
2439 +***
2440 +*** Output:         Demographic summary table
2441 +***
2442 +*** Purpose:        To create the demographic summary table
2443 +***
2444 +*** Comments:
2445 +***
2446 +*** Software:       SAS 9 (Windows)
2447 +***
2448 +*** Modifications:
2449 +***
2450 +*** Date       Programmer        Description
2451 +*** ---------  ----------------  --------------
2452 +***
2453 +********************************************************************************;
2454 +proc format;
                                                                         The SAS System

2455 +  value orderf 1="Age (years)"
2456 +               2="Gender, n(%)"
2457 +			   3="Race, n(%)"
2458 +			   4="Height (cm)"
2459 +			   5="Weight (kg)"
2460 +			   6="TBSA (m`{super 2})`{super a}";
NOTE: Format ORDERF has been output.
2461 +run;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2462 +
2463 +%macro rtdemog(progid=tdemog1, tcond=, up_limit=17, itprogid=4a);
2464 +
2465 +data dm;
2466 +  set &derdata..dm(where=(q_safeas='Y'));
2467 +  &tcond;
2468 +  output;
2469 +  if atrt in(2,3,4) then do;
2470 +    atrt=5;
2471 +	output;
2472 +  end;
2473 +  atrt=6;
2474 +  output;
2475 +run;
2476 +
2477 +%mtottrt(cond=%str(if q_safeas='Y';) &tcond);
2478 +
2479 +%mss(msdata=dm, msout=age, msvar=age, msstats=n meansd median range, msprec=1, msorder=1);
2480 +
2481 +%mfreq(mfdata=dm, mfout=gender, mfcntvar=sexn, mforder=2, mfdrng=%str(1,2), mffmt=sexf);
2482 +
2483 +%mfreq(mfdata=dm, mfout=race, mfcntvar=x_race, mforder=3, mffmt=racef);
2484 +
2485 +%mss(msdata=dm, msout=height, msvar=height, msstats=n meansd median range, msprec=0, msorder=4);
2486 +
2487 +%mss(msdata=dm, msout=weight, msvar=weight, msstats=n meansd median range, msprec=0, msorder=5);
2488 +
2489 +%mss(msdata=dm, msout=tbsa, msvar=tbsa, msstats=n meansd median range, msprec=1, msorder=6);
2490 +
2491 +data final;
2492 +  set age gender race height weight tbsa;
2493 +  length page 4;
2494 +  page=1;
2495 +run;
                                                                         The SAS System

2496 +
2497 +proc sort data=final;
2498 +  by page order sorder;
2499 +run;
2500 +
2501 +data final;
2502 +  set final;
2503 +  by page order sorder;
2504 +  length firstcol $30;
2505 +  if first.order then firstcol=put(order,orderf.);
2506 +  else firstcol='';
2507 +run;
2508 +
2509 +%mtitle(progid=&progid);
2510 +
2511 +proc report data=final headline headskip nowindows split='|' missing spacing=1;
2512 +  column  page order sorder firstcol text ("Age Group (years)" trt1 trt2 trt3 trt4 trt5) trt6;
2513 +  define page /order noprint;
2514 +  define order /order noprint;
2515 +  define sorder /order noprint;
2516 +  define firstcol / "" style={just=l cellwidth=12%};
2517 +  define text / "" style={just=l cellwidth=12%};
2518 +  define trt1 / "     0 - 2 |     (N=&pop1)" style={cellwidth=11%};
2519 +  define trt2 / "     3 - 6 |     (N=&pop2)" style={cellwidth=11%};
2520 +  define trt3 / "     7 - 11 |     (N=&pop3)" style={cellwidth=11%};
2521 +  define trt4 / "     12 - &up_limit |     (N=&pop4)" style={cellwidth=11%};
2522 +  define trt5 / "     3 - &up_limit   Total |     (N=&pop5)" style={cellwidth=11%};
2523 +  define trt6 / "     Total |     (N=&pop6)" style={cellwidth=11%};
2524 +  break after page / page;
2525 +  compute before order;
2526 +    line " ";
2527 +  endcomp;
2528 +run;
2529 +
2530 +ods rtf close;
2531 +ods listing;
2532 +
2533 +%mpageof;
2534 +
2535 +/*
2536 +%mtitle2(progid=&itprogid, orient=P);
2537 +
2538 +proc report data=final headline headskip nowindows split='|' missing spacing=1 style(header)=[protectspecialchars=off];
2539 +  column  page order sorder firstcol text ("Age Group (years)" trt1 trt2 trt3 trt4) trt6;
2540 +  define page /order noprint;
2541 +  define order /order noprint;
2542 +  define sorder /order noprint;
2543 +  define firstcol /" " style={just=l cellwidth=12%};
                                                                         The SAS System

2544 +  define text/ " " style={just=l cellwidth=12%};
2545 +  define trt1 / "     0 - 2 |     (N=&pop1)" style={cellwidth=11%};
2546 +  define trt2 / "     3 - 6 |     (N=&pop2)" style={cellwidth=11%};
2547 +  define trt3 / "     7 - 11 |     (N=&pop3)" style={cellwidth=11%};
2548 +  define trt4 / "     12 - &up_limit |     (N=&pop4)" style={cellwidth=11%};
2549 +  define trt6 / "     Total |     (N=&pop6)" style={cellwidth=11%};
2550 +  break after page / page;
2551 +  compute before order;
2552 +    line " ";
2553 +  endcomp;
2554 +run;
2555 +*/
2556 +
2557 +ods html close;
2558 +ods listing;
2559 +
2560 +%mpageof;
2561 +
2562 +%mend rtdemog;
2563 +%rtdemog(progid=tdemog1, tcond=, itprogid=tdemog4a);
MLOGIC(RTDEMOG):  Beginning execution.
MLOGIC(RTDEMOG):  Parameter PROGID has value tdemog1
MLOGIC(RTDEMOG):  Parameter TCOND has value 
MLOGIC(RTDEMOG):  Parameter ITPROGID has value tdemog4a
MLOGIC(RTDEMOG):  Parameter UP_LIMIT has value 17
MPRINT(RTDEMOG):   data dm;
SYMBOLGEN:  Macro variable DERDATA resolves to derived
MPRINT(RTDEMOG):   set derived.dm(where=(q_safeas='Y'));
SYMBOLGEN:  Macro variable TCOND resolves to 
MPRINT(RTDEMOG):   ;
MPRINT(RTDEMOG):   output;
MPRINT(RTDEMOG):   if atrt in(2,3,4) then do;
MPRINT(RTDEMOG):   atrt=5;
MPRINT(RTDEMOG):   output;
MPRINT(RTDEMOG):   end;
MPRINT(RTDEMOG):   atrt=6;
MPRINT(RTDEMOG):   output;
MPRINT(RTDEMOG):   run;

NOTE: There were 30 observations read from the data set DERIVED.DM.
      WHERE q_safeas='Y';
NOTE: The data set WORK.DM has 79 observations and 42 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      

MPRINT(RTDEMOG):  *********************************************************************************** Program: MTOTTRT.sas *** Programmer: Matt Becker *** Date 
                                                                         The SAS System

Created: 02FEB2010 *** *** Purpose: Macro to create population totals from age groups *** *** Comments: for Zymogenetics 499H01 *** *** *** Modification 
History: *** *** Date Programmer Description *** --------- ---------------- -------------- *** 
********************************************************************************;
MLOGIC(RTDEMOG):  Beginning compilation of MTOTTRT using the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mtottrt.sas.
MLOGIC(RTDEMOG):  Ending compilation of MTOTTRT.
MLOGIC(MTOTTRT):  Beginning execution.
MLOGIC(MTOTTRT):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mtottrt.sas
SYMBOLGEN:  Macro variable TCOND resolves to 
MLOGIC(MTOTTRT):  Parameter COND has value if q_safeas'Y'
MLOGIC(MTOTTRT):  Parameter POPTRT has value atrt
MLOGIC(MTOTTRT):  Parameter MPRINTEM has value N
MLOGIC(MTOTTRT):  Parameter INDATA has value &derdata..dm
MLOGIC(MTOTTRT):  %GLOBAL  POP1 POP2 POP3 POP4 POP5 POP6
MLOGIC(MTOTTRT):  %LET (variable name is POP1)
MLOGIC(MTOTTRT):  %LET (variable name is POP2)
MLOGIC(MTOTTRT):  %LET (variable name is POP3)
MLOGIC(MTOTTRT):  %LET (variable name is POP4)
MLOGIC(MTOTTRT):  %LET (variable name is POP5)
MLOGIC(MTOTTRT):  %LET (variable name is POP6)
MPRINT(MTOTTRT):   data _ftmp1a;
SYMBOLGEN:  Macro variable INDATA resolves to &derdata..dm
SYMBOLGEN:  Macro variable DERDATA resolves to derived
MPRINT(MTOTTRT):   set derived.dm;
SYMBOLGEN:  Macro variable COND resolves to if q_safeas='Y';
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(MTOTTRT):   if q_safeas='Y';
MPRINT(MTOTTRT):  ;
SYMBOLGEN:  Macro variable POPTRT resolves to atrt
MPRINT(MTOTTRT):   __trt=atrt;
MPRINT(MTOTTRT):   if __trt>.;
MPRINT(MTOTTRT):   run;

NOTE: There were 32 observations read from the data set DERIVED.DM.
NOTE: The data set WORK._FTMP1A has 30 observations and 43 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

MPRINT(MTOTTRT):   data _ftmp1;
MPRINT(MTOTTRT):   set _ftmp1a;
MPRINT(MTOTTRT):   output;
MPRINT(MTOTTRT):   if __trt in(2,3,4) then do;
MPRINT(MTOTTRT):   __trt=5;
MPRINT(MTOTTRT):   output;
MPRINT(MTOTTRT):   end;
MPRINT(MTOTTRT):   __trt=6;
MPRINT(MTOTTRT):   *** Total ***;
                                                                         The SAS System

MPRINT(MTOTTRT):   output;
MPRINT(MTOTTRT):   run;
NOTE: There were 30 observations read from the data set WORK._FTMP1A.
NOTE: The data set WORK._FTMP1 has 79 observations and 43 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(MTOTTRT):   proc freq data=_ftmp1 noprint;
MPRINT(MTOTTRT):   tables __trt / out=_ftmp2;
MPRINT(MTOTTRT):   run;

NOTE: There were 79 observations read from the data set WORK._FTMP1.
NOTE: The data set WORK._FTMP2 has 6 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MPRINTEM resolves to N
MLOGIC(MTOTTRT):  %IF condition &mprintem=Y is FALSE
MPRINT(MTOTTRT):   data _null_;
MPRINT(MTOTTRT):   set _ftmp2;
MPRINT(MTOTTRT):   call symput(compress('pop'||put(__trt,3.)),compress(put(count,4.)));
MPRINT(MTOTTRT):   run;

NOTE: There were 6 observations read from the data set WORK._FTMP2.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(MTOTTRT):  %PUT pop1 = &pop1
SYMBOLGEN:  Macro variable POP1 resolves to 11
pop1 = 11
MLOGIC(MTOTTRT):  %PUT pop2 = &pop2
SYMBOLGEN:  Macro variable POP2 resolves to 8
pop2 = 8
MLOGIC(MTOTTRT):  %PUT pop3 = &pop3
SYMBOLGEN:  Macro variable POP3 resolves to 3
pop3 = 3
MLOGIC(MTOTTRT):  %PUT pop4 = &pop4
SYMBOLGEN:  Macro variable POP4 resolves to 8
pop4 = 8
MLOGIC(MTOTTRT):  %PUT pop5 = &pop5
SYMBOLGEN:  Macro variable POP5 resolves to 19
pop5 = 19
                                                                         The SAS System

MLOGIC(MTOTTRT):  %PUT pop6 = &pop6
SYMBOLGEN:  Macro variable POP6 resolves to 30
pop6 = 30
MLOGIC(MTOTTRT):  Ending execution.
MPRINT(RTDEMOG):  ;
MPRINT(RTDEMOG):  **************************************************************************************** *** Program: MSS.sas *** Programmer: Matt Becker *** 
Date Created: 02Feb2010 *** *** Purpose: Macro to create summary stats for tables *** *** Comments: *** *** Macro Parameters : MSDATA - Input dataset *** MSOUT 
- Ouptut dataset *** MSVAR - Variable to be summarized *** MSWHERE - Subset condition, if required *** MSORDER - Order variable in output dataset *** MSSTATS - 
Summary stats required *** MSBY - By variable *** MSPREC - Precision of raw data (decimal places) *** MSORIENT - Specify L=landscape, P=portrait (determines 
*** which summary statistics are required) *** *** *** Modification History: *** *** Date Programmer Description *** ---------- ---------------------- 
--------------------- *** *** *************************************************************************************;
MLOGIC(RTDEMOG):  Beginning compilation of MSS using the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mss.sas.
MLOGIC(RTDEMOG):  Ending compilation of MSS.
MLOGIC(MSS):  Beginning execution.
MLOGIC(MSS):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mss.sas
MLOGIC(MSS):  Parameter MSDATA has value dm
MLOGIC(MSS):  Parameter MSOUT has value age
MLOGIC(MSS):  Parameter MSVAR has value age
MLOGIC(MSS):  Parameter MSSTATS has value n meansd median range
MLOGIC(MSS):  Parameter MSPREC has value 1
MLOGIC(MSS):  Parameter MSORDER has value 1
MLOGIC(MSS):  Parameter MSTRT has value atrt
MLOGIC(MSS):  Parameter MSWHERE has value 
MLOGIC(MSS):  Parameter MSBY has value 
MLOGIC(MSS):  Parameter MSORIENT has value l
MLOGIC(MSS):  Parameter MSSPACE has value &trtspace
MLOGIC(MSS):  Parameter MSPRT has value N
MPRINT(MSS):   ** (1) - IF THIS IS LEFT BLANK, THE STANDARD STATS ARE PRODUCED WHICH ARE N, MEAN (SE), STD, MEDIAN Q1, Q3, MIN and MAX. NMISS AND SUM ARE 
AVAILABLE USING THE STATS OPTION ;
MPRINT(MSS):   ** (2) - EXTRA BY VARIABLES CAN BE ADDED IN THE BY OPTION ;
MPRINT(MSS):   ** (3) - IF THIS IS USED, IT STATES THE PRECISION OF THE DATA HELD ON THE DATASET. MEANS AND MEDIANS ARE THEN PRESENTED TO +1 DP AND STD TO +2 
DP;
SYMBOLGEN:  Macro variable MSORDER resolves to 1
MPRINT(MSS):   data ms01;
SYMBOLGEN:  Macro variable MSDATA resolves to dm
MPRINT(MSS):   set dm;
SYMBOLGEN:  Macro variable MSSTATS resolves to n meansd median range
MPRINT(MSS):   if index(upcase("n meansd median range"),"GMEAN") then do;
SYMBOLGEN:  Macro variable MSVAR resolves to age
SYMBOLGEN:  Macro variable MSVAR resolves to age
SYMBOLGEN:  Macro variable MSVAR resolves to age
MPRINT(MSS):   if age gt 0 then age=log(age);
SYMBOLGEN:  Macro variable MSVAR resolves to age
SYMBOLGEN:  Macro variable MSVAR resolves to age
MPRINT(MSS):   else if age=0 then age=0;
MPRINT(MSS):   call symput("GMEAN","YES");
MPRINT(MSS):   end;
MPRINT(MSS):   else call symput("GMEAN","NO");
                                                                         The SAS System

MPRINT(MSS):   run;

NOTE: There were 79 observations read from the data set WORK.DM.
NOTE: The data set WORK.MS01 has 79 observations and 42 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MSORDER resolves to 1
SYMBOLGEN:  Macro variable MSPRT resolves to N
MLOGIC(MSS):  %IF condition %UPCASE(&MSPRT) NE Y is TRUE
MPRINT(MSS):   proc means data=ms01 nway noprint;
SYMBOLGEN:  Macro variable MSVAR resolves to age
MPRINT(MSS):   var age;
SYMBOLGEN:  Macro variable MSBY resolves to 
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MLOGIC(MSS):  %IF condition &MSBY NE or &MSTRT NE is TRUE
SYMBOLGEN:  Macro variable MSBY resolves to 
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MPRINT(MSS):   class atrt;
SYMBOLGEN:  Macro variable MSWHERE resolves to 
MLOGIC(MSS):  %IF condition &MSWHERE NE is FALSE
SYMBOLGEN:  Macro variable MSORDER resolves to 1
MPRINT(MSS):   output out=ms1 n=nn mean=nmean std=nstd median=nmedian min=nmin max=nmax nmiss=nnmiss sum=nsum stderr=nse q1=nq1 q3=nq3 var=nvar uclm=nuclm 
lclm=nlclm;
MPRINT(MSS):   run;

NOTE: There were 79 observations read from the data set WORK.MS01.
NOTE: The data set WORK.MS1 has 6 observations and 17 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MSS):   data _null_;
SYMBOLGEN:  Macro variable MSORDER resolves to 1
MPRINT(MSS):   if 0 then set ms1 nobs=count;
MPRINT(MSS):   call symput("numobs",left(put(count,10.)));
MPRINT(MSS):   stop;
MPRINT(MSS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable NUMOBS resolves to 6         
                                                                         The SAS System

MLOGIC(MSS):  %IF condition &numobs>=1 is TRUE
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &msprec ne is TRUE
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &msprec eq 0 is FALSE
MLOGIC(MSS):  %LET (variable name is ACC)
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSORDER resolves to 1
MPRINT(MSS):   data ms21;
SYMBOLGEN:  Macro variable MSORDER resolves to 1
MPRINT(MSS):   set ms1;
SYMBOLGEN:  Macro variable GMEAN resolves to NO
MLOGIC(MSS):  %IF condition &GMEAN=YES is FALSE
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &MSPREC NE is TRUE
MPRINT(MSS):   if nn ne . then n=put(nn,7.);
MPRINT(MSS):   if nnmiss ne . then nmiss=put(nnmiss,7.);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nmean ne . then mean=put(nmean,10.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nn>1 then std=put(nstd,11.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   else if nn=1 then std=repeat(' ',5-1)||'-';
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nn>1 then stderr=put(nse,11.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   else if nn=1 then se=repeat(' ',5-1)||' ';
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &msprec>0 is TRUE
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nmin ne . then min=put(nmin,9.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &msprec=0 is FALSE
MPRINT(MSS):  ;
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nmedian ne . then median=put(nmedian,10.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &msprec>0 is TRUE
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nmax ne . then max=put(nmax,9.1);
                                                                         The SAS System

SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &msprec=0 is FALSE
MPRINT(MSS):  ;
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nq1 ne . then q1=put(nq1,10.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nq3 ne . then q3=put(nq3,10.2);
MPRINT(MSS):   if nsum ne . then sum=put(nsum,7.);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nn>1 and nuclm ne . then uclm=put(nuclm,15.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   else if nn=1 then uclm=repeat(' ',5-1)||' ';
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nn>1 and nlclm ne . then lclm=put(nlclm,15.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   else if nn=1 then lclm=repeat(' ',5-1)||' ';
MPRINT(MSS):   gmean=mean;
MPRINT(MSS):   length meanse meansd quarts range ci95 $50 ;
MPRINT(MSS):   meanse=mean || ' (' || compress(se) || ')';
MPRINT(MSS):   meansd=mean || ' (' || compress(std) || ')';
MPRINT(MSS):   quarts=compress(q1) || ', ' || compress(q3);
MPRINT(MSS):   range=compress(min) || ', ' || compress(max);
MPRINT(MSS):   if n(nuclm,nlclm)=2 then ci95=compress(lclm) || ', ' || compress(uclm);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   else ci95=repeat(' ',5-1)||' ';
MPRINT(MSS):   if nn lt 1 then ci95='';
MPRINT(MSS):   run;

NOTE: There were 6 observations read from the data set WORK.MS1.
NOTE: The data set WORK.MS21 has 6 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MSORDER resolves to 1
SYMBOLGEN:  Macro variable MSORDER resolves to 1
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MLOGIC(MSS):  %IF condition &MSTRT NE is TRUE
MPRINT(MSS):   proc transpose data=ms21 out=ms31 prefix=trt;
SYMBOLGEN:  Macro variable MSBY resolves to 
MLOGIC(MSS):  %IF condition &MSBY NE is FALSE
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MLOGIC(MSS):  %IF condition &MSTRT NE is TRUE
                                                                         The SAS System

SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MPRINT(MSS):   id atrt;
SYMBOLGEN:  Macro variable MSSTATS resolves to n meansd median range
MLOGIC(MSS):  %IF condition &MSSTATS NE is TRUE
SYMBOLGEN:  Macro variable MSSTATS resolves to n meansd median range
MPRINT(MSS):   var n meansd median range;
MPRINT(MSS):   run;

NOTE: There were 6 observations read from the data set WORK.MS21.
NOTE: The data set WORK.MS31 has 4 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MSOUT resolves to age
MPRINT(MSS):   data age;
SYMBOLGEN:  Macro variable OVTRT resolves to 6
MLOGIC(MSS):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(MSS):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 2
MLOGIC(MSS):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 3
MLOGIC(MSS):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 4
MLOGIC(MSS):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 5
MLOGIC(MSS):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 6
MLOGIC(MSS):  %DO loop index variable I is now 7; loop will not iterate again.
MPRINT(MSS):   length trt1 trt2 trt3 trt4 trt5 trt6 $100;
SYMBOLGEN:  Macro variable MSORDER resolves to 1
MPRINT(MSS):   set ms31;
SYMBOLGEN:  Macro variable MSORDER resolves to 1
MPRINT(MSS):   order=1;
MPRINT(MSS):   length text $70;
MPRINT(MSS):   _name_=upcase(_name_);
MPRINT(MSS):   if _name_='STD' then text='SD';
MPRINT(MSS):   else if _name_='NMISS' then text='N Missing';
MPRINT(MSS):   else if _name_='MIN' then text='Min';
MPRINT(MSS):   else if _name_='MAX' then text='Max';
MPRINT(MSS):   else if _name_='CI95' then text='95% CI';
MPRINT(MSS):   else if _name_='RANGE' then text='Min, Max';
MPRINT(MSS):   else if _name_='QUARTS' then text='Quartiles';
MPRINT(MSS):   else if _name_='MEANSE' then text='Mean (SE)';
MPRINT(MSS):   else if _name_='MEANSD' then text='Mean (SD)';
MPRINT(MSS):   else if _name_='N' then text='n';
                                                                         The SAS System

MPRINT(MSS):   else if _name_='GMEAN' then text='Geometric Mean';
MPRINT(MSS):   else if _name_='LCLM' then text='95% CI: Lower';
MPRINT(MSS):   else if _name_='UCLM' then text='              Upper';
MPRINT(MSS):   else if _name_='Q1' then text='Quartiles: Q1';
MPRINT(MSS):   else if _name_='Q3' then text='                 Q3';
MPRINT(MSS):   else text=substr(_name_,1,1)||lowcase(substr(_name_,2));
MPRINT(MSS):   sorder=input(_name_,statord.);
MPRINT(MSS):   array medvrs _character_;
MPRINT(MSS):   do i=1 to dim(medvrs);
MPRINT(MSS):   if compress(medvrs(i))='.' then medvrs(i)='';
MPRINT(MSS):   end;
MPRINT(MSS):   drop i;
SYMBOLGEN:  Macro variable TOTTRT resolves to 6
MPRINT(MSS):   array trtvars $ trt1-trt6;
SYMBOLGEN:  Macro variable OVTRT resolves to 6
MLOGIC(MSS):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   if _name_='N' and trt1='' then trt1=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   space1=int((12+2 - length(trim(trt1)))/2);
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   if _name_='RANGE' and index(trt1,',') and space1 gt 0 then trt1=repeat(' ',space1+1) || trim(trt1);
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   drop space1;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   if _name_='N' and trt2='' then trt2=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   space2=int((12+2 - length(trim(trt2)))/2);
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   if _name_='RANGE' and index(trt2,',') and space2 gt 0 then trt2=repeat(' ',space2+1) || trim(trt2);
                                                                         The SAS System

SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   drop space2;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   if _name_='N' and trt3='' then trt3=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   space3=int((12+2 - length(trim(trt3)))/2);
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   if _name_='RANGE' and index(trt3,',') and space3 gt 0 then trt3=repeat(' ',space3+1) || trim(trt3);
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   drop space3;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   if _name_='N' and trt4='' then trt4=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   space4=int((12+2 - length(trim(trt4)))/2);
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   if _name_='RANGE' and index(trt4,',') and space4 gt 0 then trt4=repeat(' ',space4+1) || trim(trt4);
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   drop space4;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   if _name_='N' and trt5='' then trt5=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 5
                                                                         The SAS System

SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   space5=int((12+2 - length(trim(trt5)))/2);
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   if _name_='RANGE' and index(trt5,',') and space5 gt 0 then trt5=repeat(' ',space5+1) || trim(trt5);
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   drop space5;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   if _name_='N' and trt6='' then trt6=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   space6=int((12+2 - length(trim(trt6)))/2);
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   if _name_='RANGE' and index(trt6,',') and space6 gt 0 then trt6=repeat(' ',space6+1) || trim(trt6);
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   drop space6;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 7; loop will not iterate again.
MPRINT(MSS):   run;

NOTE: There were 4 observations read from the data set WORK.MS31.
NOTE: The data set WORK.AGE has 4 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MSOUT resolves to age
MPRINT(MSS):   proc sort data=age;
SYMBOLGEN:  Macro variable MSBY resolves to 
MPRINT(MSS):   by order sorder;
MPRINT(MSS):   run;
                                                                         The SAS System


NOTE: There were 4 observations read from the data set WORK.AGE.
NOTE: The data set WORK.AGE has 4 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(MSS):  Ending execution.
MPRINT(RTDEMOG):  ;
MPRINT(RTDEMOG):  **************************************************************************************** *** Program: MFREQ.sas *** Programmer: Matt Becker 
*** Date Created: 02Feb2010 *** *** Purpose: Macro to create frequency counts and percentages *** *** Comments: *** *** Macro Parameters : INSET - Input 
dataset *** OUTSET - Ouptut dataset *** CNTVAR - Variable to be counted *** MFFMT - Format to be applied to CNTVAR in output dataset *** WHFREQ - Subset to be 
applied *** BYFREQ - BY variable *** DEN - Macro variable of denominator (default=pop) *** MFORD - Order in output dataset *** MFPERC - Y/N on whether 
percentages are required *** MFMISS - The value of missings, to be omitted from the denominator *** when MFPERC=Y and DEN=missing *** MFSBS - Y/N on whether 
the count and denominator should be *** side by side (e.g. xxx/yyy (zz%) );
MPRINT(RTDEMOG):   *** MFCI95 - Y/N on whether confidence intervals are required *** MFCI95L - The value that the CI95 is based on *** MFDRNG - To force in 
missing values of CNTVAR, specify range of values *** in format %str(X to Y) or %str(X, Y, Z) *** MTOTTRT - Defaults to global macro variable MTOTTRT *** Can 
be set to OVTRT to allow overall totals *** *** Modification History: *** *** Date Programmer Description *** ---------- ---------------------- 
--------------------- *** *************************************************************************************;
MLOGIC(RTDEMOG):  Beginning compilation of MFREQ using the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mfreq.sas.
MLOGIC(RTDEMOG):  Ending compilation of MFREQ.
MLOGIC(MFREQ):  Beginning execution.
MLOGIC(MFREQ):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mfreq.sas
MLOGIC(MFREQ):  Parameter MFDATA has value dm
MLOGIC(MFREQ):  Parameter MFOUT has value gender
MLOGIC(MFREQ):  Parameter MFCNTVAR has value sexn
MLOGIC(MFREQ):  Parameter MFORDER has value 2
MLOGIC(MFREQ):  Parameter MFDRNG has value 12
MLOGIC(MFREQ):  Parameter MFFMT has value sexf
MLOGIC(MFREQ):  Parameter MFTRT has value atrt
MLOGIC(MFREQ):  Parameter MFWHERE has value 
MLOGIC(MFREQ):  Parameter MFDEN has value POP
MLOGIC(MFREQ):  Parameter MFBY has value 
MLOGIC(MFREQ):  Parameter MFPERC has value Y
MLOGIC(MFREQ):  Parameter MFMISS has value 
MLOGIC(MFREQ):  Parameter MTOTTRT has value &tottrt
MLOGIC(MFREQ):  Parameter MFSPACE has value &trtspace
MPRINT(MFREQ):   data _null_;
MPRINT(MFREQ):   length table $100;
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MPRINT(MFREQ):   if "atrt" ne " " then table="atrt";
MPRINT(MFREQ):   else table=" ";
SYMBOLGEN:  Macro variable MFBY resolves to 
SYMBOLGEN:  Macro variable MFBY resolves to 
MPRINT(MFREQ):   if "" ne " " then table=trim(table) || ' ' || trim("");
MPRINT(MFREQ):   call symput('mfoby',trim(table));
                                                                         The SAS System

MPRINT(MFREQ):   call symput('mfobyl',reverse(scan(reverse(table),1,' ')));
SYMBOLGEN:  Macro variable MFCNTVAR resolves to sexn
MPRINT(MFREQ):   table=trim(table) || ' ' || trim("sexn");
MPRINT(MFREQ):   call symput('mftable',translate(trim(left(table)),'*',' '));
MPRINT(MFREQ):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MFDATA resolves to dm
MPRINT(MFREQ):   proc freq data=dm noprint;
SYMBOLGEN:  Macro variable MFWHERE resolves to 
MLOGIC(MFREQ):  %IF condition &MFWHERE NE is FALSE
SYMBOLGEN:  Macro variable MFTABLE resolves to atrt*sexn
MPRINT(MFREQ):   tables atrt*sexn / out=mf2;
MPRINT(MFREQ):   run;

NOTE: There were 79 observations read from the data set WORK.DM.
NOTE: The data set WORK.MF2 has 11 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MFDRNG resolves to 1,2
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(MFREQ):  %IF condition &MFDRNG NE is TRUE
MPRINT(MFREQ):   data mfall0;
SYMBOLGEN:  Macro variable MFCNTVAR resolves to sexn
MPRINT(MFREQ):   set mf2 (drop=sexn);
SYMBOLGEN:  Macro variable MFOBY resolves to atrt
MPRINT(MFREQ):   by atrt;
SYMBOLGEN:  Macro variable MFOBYL resolves to atrt
SYMBOLGEN:  Macro variable MFCNTVAR resolves to sexn
SYMBOLGEN:  Macro variable MFDRNG resolves to 1,2
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(MFREQ):   if last.atrt then do sexn=1,2;
MPRINT(MFREQ):   count=0;
MPRINT(MFREQ):   output;
MPRINT(MFREQ):   end;
MPRINT(MFREQ):   run;

NOTE: There were 11 observations read from the data set WORK.MF2.
NOTE: The data set WORK.MFALL0 has 12 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
                                                                         The SAS System

      cpu time            0.00 seconds
      

MPRINT(MFREQ):   data mf3;
MPRINT(MFREQ):   merge mfall0 mf2;
SYMBOLGEN:  Macro variable MFOBY resolves to atrt
SYMBOLGEN:  Macro variable MFCNTVAR resolves to sexn
MPRINT(MFREQ):   by atrt sexn;
MPRINT(MFREQ):   run;

NOTE: There were 12 observations read from the data set WORK.MFALL0.
NOTE: There were 11 observations read from the data set WORK.MF2.
NOTE: The data set WORK.MF3 has 12 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MFMISS resolves to 
MLOGIC(MFREQ):  %IF condition &MFMISS NE is FALSE
MPRINT(MFREQ):   data mf5;
SYMBOLGEN:  Macro variable MFMISS resolves to 
MLOGIC(MFREQ):  %IF condition &MFMISS NE is FALSE
MPRINT(MFREQ):   merge mf3;
SYMBOLGEN:  Macro variable MFOBY resolves to atrt
MPRINT(MFREQ):   by atrt;
SYMBOLGEN:  Macro variable MFDEN resolves to POP
MLOGIC(MFREQ):  %IF condition &MFDEN ne is TRUE
SYMBOLGEN:  Macro variable MTOTTRT resolves to &tottrt
SYMBOLGEN:  Macro variable TOTTRT resolves to 6
MLOGIC(MFREQ):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable POP1 resolves to 11
MPRINT(MFREQ):   if atrt=1 then denom=11;
MLOGIC(MFREQ):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable POP2 resolves to 8
MPRINT(MFREQ):   if atrt=2 then denom=8;
MLOGIC(MFREQ):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
                                                                         The SAS System

SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable POP3 resolves to 3
MPRINT(MFREQ):   if atrt=3 then denom=3;
MLOGIC(MFREQ):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable POP4 resolves to 8
MPRINT(MFREQ):   if atrt=4 then denom=8;
MLOGIC(MFREQ):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable POP5 resolves to 19
MPRINT(MFREQ):   if atrt=5 then denom=19;
MLOGIC(MFREQ):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable POP6 resolves to 30
MPRINT(MFREQ):   if atrt=6 then denom=30;
MLOGIC(MFREQ):  %DO loop index variable I is now 7; loop will not iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((count/denom*100),perc.) ||'%)');
MPRINT(MFREQ):   length disp $50;
SYMBOLGEN:  Macro variable MFMISS resolves to 
MLOGIC(MFREQ):  %IF condition &MFMISS NE is FALSE
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if count >= 0 then disp=put(count,4.) || ' ' || right(perc);
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MPRINT(MFREQ):   else disp=put(count,4.);
MPRINT(MFREQ):   run;
                                                                         The SAS System


NOTE: There were 12 observations read from the data set WORK.MF3.
NOTE: The data set WORK.MF5 has 12 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(MFREQ):   proc sort data=mf5;
SYMBOLGEN:  Macro variable MFBY resolves to 
SYMBOLGEN:  Macro variable MFCNTVAR resolves to sexn
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MPRINT(MFREQ):   by sexn atrt;
MPRINT(MFREQ):   run;

NOTE: There were 12 observations read from the data set WORK.MF5.
NOTE: The data set WORK.MF5 has 12 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MLOGIC(MFREQ):  %IF condition &MFTRT NE is TRUE
MPRINT(MFREQ):   proc transpose data=mf5 out=mf6 prefix=trt;
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MPRINT(MFREQ):   id atrt;
SYMBOLGEN:  Macro variable MFBY resolves to 
SYMBOLGEN:  Macro variable MFCNTVAR resolves to sexn
MPRINT(MFREQ):   by sexn;
MPRINT(MFREQ):   var disp;
MPRINT(MFREQ):   run;

NOTE: There were 12 observations read from the data set WORK.MF5.
NOTE: The data set WORK.MF6 has 2 observations and 8 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MFOUT resolves to gender
MPRINT(MFREQ):   data gender;
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MLOGIC(MFREQ):  %IF condition &MFTRT NE is TRUE
SYMBOLGEN:  Macro variable MTOTTRT resolves to &tottrt
SYMBOLGEN:  Macro variable TOTTRT resolves to 6
MLOGIC(MFREQ):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable I resolves to 1
                                                                         The SAS System

MLOGIC(MFREQ):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 2
MLOGIC(MFREQ):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 3
MLOGIC(MFREQ):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 4
MLOGIC(MFREQ):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 5
MLOGIC(MFREQ):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 6
MLOGIC(MFREQ):  %DO loop index variable I is now 7; loop will not iterate again.
MPRINT(MFREQ):   length trt1 trt2 trt3 trt4 trt5 trt6 $50;
MPRINT(MFREQ):   set mf6;
SYMBOLGEN:  Macro variable MFORDER resolves to 2
MPRINT(MFREQ):   order=2;
SYMBOLGEN:  Macro variable MFCNTVAR resolves to sexn
MLOGIC(MFREQ):  %IF condition &MFCNTVAR NE is TRUE
SYMBOLGEN:  Macro variable MFCNTVAR resolves to sexn
MPRINT(MFREQ):   sorder=sexn;
MPRINT(MFREQ):   length text $200;
MPRINT(MFREQ):   text='';
SYMBOLGEN:  Macro variable MFFMT resolves to sexf
MLOGIC(MFREQ):  %IF condition &MFFMT NE is TRUE
SYMBOLGEN:  Macro variable MFFMT resolves to sexf
MPRINT(MFREQ):   text=put(sorder,sexf.);
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MLOGIC(MFREQ):  %IF condition &MFTRT NE is TRUE
SYMBOLGEN:  Macro variable MTOTTRT resolves to &tottrt
SYMBOLGEN:  Macro variable TOTTRT resolves to 6
MLOGIC(MFREQ):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt1='' then trt1=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  && resolves to &.
                                                                         The SAS System

SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt2='' then trt2=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt3='' then trt3=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt4='' then trt4=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt5='' then trt5=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  && resolves to &.
                                                                         The SAS System

SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt6='' then trt6=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 7; loop will not iterate again.
SYMBOLGEN:  Macro variable MFMISS resolves to 
MLOGIC(MFREQ):  %IF condition &MFMISS NE is FALSE
MPRINT(MFREQ):   run;

NOTE: There were 2 observations read from the data set WORK.MF6.
NOTE: The data set WORK.GENDER has 2 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MLOGIC(MFREQ):  Ending execution.
MPRINT(RTDEMOG):  ;
MLOGIC(MFREQ):  Beginning execution.
MLOGIC(MFREQ):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mfreq.sas
MLOGIC(MFREQ):  Parameter MFDATA has value dm
MLOGIC(MFREQ):  Parameter MFOUT has value race
MLOGIC(MFREQ):  Parameter MFCNTVAR has value x_race
MLOGIC(MFREQ):  Parameter MFORDER has value 3
MLOGIC(MFREQ):  Parameter MFFMT has value racef
MLOGIC(MFREQ):  Parameter MFTRT has value atrt
MLOGIC(MFREQ):  Parameter MFWHERE has value 
MLOGIC(MFREQ):  Parameter MFDEN has value POP
MLOGIC(MFREQ):  Parameter MFBY has value 
MLOGIC(MFREQ):  Parameter MFPERC has value Y
MLOGIC(MFREQ):  Parameter MFMISS has value 
MLOGIC(MFREQ):  Parameter MFDRNG has value 
MLOGIC(MFREQ):  Parameter MTOTTRT has value &tottrt
MLOGIC(MFREQ):  Parameter MFSPACE has value &trtspace
MPRINT(MFREQ):   data _null_;
MPRINT(MFREQ):   length table $100;
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MPRINT(MFREQ):   if "atrt" ne " " then table="atrt";
MPRINT(MFREQ):   else table=" ";
SYMBOLGEN:  Macro variable MFBY resolves to 
SYMBOLGEN:  Macro variable MFBY resolves to 
MPRINT(MFREQ):   if "" ne " " then table=trim(table) || ' ' || trim("");
MPRINT(MFREQ):   call symput('mfoby',trim(table));
MPRINT(MFREQ):   call symput('mfobyl',reverse(scan(reverse(table),1,' ')));
SYMBOLGEN:  Macro variable MFCNTVAR resolves to x_race
MPRINT(MFREQ):   table=trim(table) || ' ' || trim("x_race");
                                                                         The SAS System

MPRINT(MFREQ):   call symput('mftable',translate(trim(left(table)),'*',' '));
MPRINT(MFREQ):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MFDATA resolves to dm
MPRINT(MFREQ):   proc freq data=dm noprint;
SYMBOLGEN:  Macro variable MFWHERE resolves to 
MLOGIC(MFREQ):  %IF condition &MFWHERE NE is FALSE
SYMBOLGEN:  Macro variable MFTABLE resolves to atrt*x_race
MPRINT(MFREQ):   tables atrt*x_race / out=mf2;
MPRINT(MFREQ):   run;

NOTE: There were 79 observations read from the data set WORK.DM.
NOTE: The data set WORK.MF2 has 19 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MFDRNG resolves to 
MLOGIC(MFREQ):  %IF condition &MFDRNG NE is FALSE
MPRINT(MFREQ):   data mf3;
MPRINT(MFREQ):   set mf2;
MPRINT(MFREQ):   run;

NOTE: There were 19 observations read from the data set WORK.MF2.
NOTE: The data set WORK.MF3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MFMISS resolves to 
MLOGIC(MFREQ):  %IF condition &MFMISS NE is FALSE
MPRINT(MFREQ):   data mf5;
SYMBOLGEN:  Macro variable MFMISS resolves to 
MLOGIC(MFREQ):  %IF condition &MFMISS NE is FALSE
MPRINT(MFREQ):   merge mf3;
SYMBOLGEN:  Macro variable MFOBY resolves to atrt
MPRINT(MFREQ):   by atrt;
SYMBOLGEN:  Macro variable MFDEN resolves to POP
MLOGIC(MFREQ):  %IF condition &MFDEN ne is TRUE
SYMBOLGEN:  Macro variable MTOTTRT resolves to &tottrt
SYMBOLGEN:  Macro variable TOTTRT resolves to 6
                                                                         The SAS System

MLOGIC(MFREQ):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable POP1 resolves to 11
MPRINT(MFREQ):   if atrt=1 then denom=11;
MLOGIC(MFREQ):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable POP2 resolves to 8
MPRINT(MFREQ):   if atrt=2 then denom=8;
MLOGIC(MFREQ):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable POP3 resolves to 3
MPRINT(MFREQ):   if atrt=3 then denom=3;
MLOGIC(MFREQ):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable POP4 resolves to 8
MPRINT(MFREQ):   if atrt=4 then denom=8;
MLOGIC(MFREQ):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable POP5 resolves to 19
MPRINT(MFREQ):   if atrt=5 then denom=19;
MLOGIC(MFREQ):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable POP6 resolves to 30
MPRINT(MFREQ):   if atrt=6 then denom=30;
                                                                         The SAS System

MLOGIC(MFREQ):  %DO loop index variable I is now 7; loop will not iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((count/denom*100),perc.) ||'%)');
MPRINT(MFREQ):   length disp $50;
SYMBOLGEN:  Macro variable MFMISS resolves to 
MLOGIC(MFREQ):  %IF condition &MFMISS NE is FALSE
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if count >= 0 then disp=put(count,4.) || ' ' || right(perc);
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MPRINT(MFREQ):   else disp=put(count,4.);
MPRINT(MFREQ):   run;

NOTE: There were 19 observations read from the data set WORK.MF3.
NOTE: The data set WORK.MF5 has 19 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(MFREQ):   proc sort data=mf5;
SYMBOLGEN:  Macro variable MFBY resolves to 
SYMBOLGEN:  Macro variable MFCNTVAR resolves to x_race
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MPRINT(MFREQ):   by x_race atrt;
MPRINT(MFREQ):   run;

NOTE: There were 19 observations read from the data set WORK.MF5.
NOTE: The data set WORK.MF5 has 19 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MLOGIC(MFREQ):  %IF condition &MFTRT NE is TRUE
MPRINT(MFREQ):   proc transpose data=mf5 out=mf6 prefix=trt;
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MPRINT(MFREQ):   id atrt;
SYMBOLGEN:  Macro variable MFBY resolves to 
SYMBOLGEN:  Macro variable MFCNTVAR resolves to x_race
MPRINT(MFREQ):   by x_race;
                                                                         The SAS System

MPRINT(MFREQ):   var disp;
MPRINT(MFREQ):   run;

NOTE: There were 19 observations read from the data set WORK.MF5.
NOTE: The data set WORK.MF6 has 4 observations and 8 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MFOUT resolves to race
MPRINT(MFREQ):   data race;
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MLOGIC(MFREQ):  %IF condition &MFTRT NE is TRUE
SYMBOLGEN:  Macro variable MTOTTRT resolves to &tottrt
SYMBOLGEN:  Macro variable TOTTRT resolves to 6
MLOGIC(MFREQ):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(MFREQ):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 2
MLOGIC(MFREQ):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 3
MLOGIC(MFREQ):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 4
MLOGIC(MFREQ):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 5
MLOGIC(MFREQ):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 6
MLOGIC(MFREQ):  %DO loop index variable I is now 7; loop will not iterate again.
MPRINT(MFREQ):   length trt1 trt2 trt3 trt4 trt5 trt6 $50;
MPRINT(MFREQ):   set mf6;
SYMBOLGEN:  Macro variable MFORDER resolves to 3
MPRINT(MFREQ):   order=3;
SYMBOLGEN:  Macro variable MFCNTVAR resolves to x_race
MLOGIC(MFREQ):  %IF condition &MFCNTVAR NE is TRUE
SYMBOLGEN:  Macro variable MFCNTVAR resolves to x_race
MPRINT(MFREQ):   sorder=x_race;
MPRINT(MFREQ):   length text $200;
MPRINT(MFREQ):   text='';
SYMBOLGEN:  Macro variable MFFMT resolves to racef
MLOGIC(MFREQ):  %IF condition &MFFMT NE is TRUE
SYMBOLGEN:  Macro variable MFFMT resolves to racef
MPRINT(MFREQ):   text=put(sorder,racef.);
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MLOGIC(MFREQ):  %IF condition &MFTRT NE is TRUE
SYMBOLGEN:  Macro variable MTOTTRT resolves to &tottrt
SYMBOLGEN:  Macro variable TOTTRT resolves to 6
MLOGIC(MFREQ):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
                                                                         The SAS System

SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt1='' then trt1=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt2='' then trt2=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt3='' then trt3=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt4='' then trt4=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 5; loop will iterate again.
                                                                         The SAS System

SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt5='' then trt5=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt6='' then trt6=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 7; loop will not iterate again.
SYMBOLGEN:  Macro variable MFMISS resolves to 
MLOGIC(MFREQ):  %IF condition &MFMISS NE is FALSE
MPRINT(MFREQ):   run;

NOTE: There were 4 observations read from the data set WORK.MF6.
NOTE: The data set WORK.RACE has 4 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MLOGIC(MFREQ):  Ending execution.
MPRINT(RTDEMOG):  ;
MLOGIC(MSS):  Beginning execution.
MLOGIC(MSS):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mss.sas
MLOGIC(MSS):  Parameter MSDATA has value dm
MLOGIC(MSS):  Parameter MSOUT has value height
MLOGIC(MSS):  Parameter MSVAR has value height
MLOGIC(MSS):  Parameter MSSTATS has value n meansd median range
MLOGIC(MSS):  Parameter MSPREC has value 0
MLOGIC(MSS):  Parameter MSORDER has value 4
MLOGIC(MSS):  Parameter MSTRT has value atrt
MLOGIC(MSS):  Parameter MSWHERE has value 
MLOGIC(MSS):  Parameter MSBY has value 
                                                                         The SAS System

MLOGIC(MSS):  Parameter MSORIENT has value l
MLOGIC(MSS):  Parameter MSSPACE has value &trtspace
MLOGIC(MSS):  Parameter MSPRT has value N
MPRINT(MSS):   ** (1) - IF THIS IS LEFT BLANK, THE STANDARD STATS ARE PRODUCED WHICH ARE N, MEAN (SE), STD, MEDIAN Q1, Q3, MIN and MAX. NMISS AND SUM ARE 
AVAILABLE USING THE STATS OPTION ;
MPRINT(MSS):   ** (2) - EXTRA BY VARIABLES CAN BE ADDED IN THE BY OPTION ;
MPRINT(MSS):   ** (3) - IF THIS IS USED, IT STATES THE PRECISION OF THE DATA HELD ON THE DATASET. MEANS AND MEDIANS ARE THEN PRESENTED TO +1 DP AND STD TO +2 
DP;
SYMBOLGEN:  Macro variable MSORDER resolves to 4
MPRINT(MSS):   data ms04;
SYMBOLGEN:  Macro variable MSDATA resolves to dm
MPRINT(MSS):   set dm;
SYMBOLGEN:  Macro variable MSSTATS resolves to n meansd median range
MPRINT(MSS):   if index(upcase("n meansd median range"),"GMEAN") then do;
SYMBOLGEN:  Macro variable MSVAR resolves to height
SYMBOLGEN:  Macro variable MSVAR resolves to height
SYMBOLGEN:  Macro variable MSVAR resolves to height
MPRINT(MSS):   if height gt 0 then height=log(height);
SYMBOLGEN:  Macro variable MSVAR resolves to height
SYMBOLGEN:  Macro variable MSVAR resolves to height
MPRINT(MSS):   else if height=0 then height=0;
MPRINT(MSS):   call symput("GMEAN","YES");
MPRINT(MSS):   end;
MPRINT(MSS):   else call symput("GMEAN","NO");
MPRINT(MSS):   run;

NOTE: There were 79 observations read from the data set WORK.DM.
NOTE: The data set WORK.MS04 has 79 observations and 42 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MSORDER resolves to 4
SYMBOLGEN:  Macro variable MSPRT resolves to N
MLOGIC(MSS):  %IF condition %UPCASE(&MSPRT) NE Y is TRUE
MPRINT(MSS):   proc means data=ms04 nway noprint;
SYMBOLGEN:  Macro variable MSVAR resolves to height
MPRINT(MSS):   var height;
SYMBOLGEN:  Macro variable MSBY resolves to 
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MLOGIC(MSS):  %IF condition &MSBY NE or &MSTRT NE is TRUE
SYMBOLGEN:  Macro variable MSBY resolves to 
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MPRINT(MSS):   class atrt;
SYMBOLGEN:  Macro variable MSWHERE resolves to 
MLOGIC(MSS):  %IF condition &MSWHERE NE is FALSE
SYMBOLGEN:  Macro variable MSORDER resolves to 4
                                                                         The SAS System

MPRINT(MSS):   output out=ms4 n=nn mean=nmean std=nstd median=nmedian min=nmin max=nmax nmiss=nnmiss sum=nsum stderr=nse q1=nq1 q3=nq3 var=nvar uclm=nuclm 
lclm=nlclm;
MPRINT(MSS):   run;

NOTE: There were 79 observations read from the data set WORK.MS04.
NOTE: The data set WORK.MS4 has 6 observations and 17 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MSS):   data _null_;
SYMBOLGEN:  Macro variable MSORDER resolves to 4
MPRINT(MSS):   if 0 then set ms4 nobs=count;
MPRINT(MSS):   call symput("numobs",left(put(count,10.)));
MPRINT(MSS):   stop;
MPRINT(MSS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable NUMOBS resolves to 6         
MLOGIC(MSS):  %IF condition &numobs>=1 is TRUE
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MLOGIC(MSS):  %IF condition &msprec ne is TRUE
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MLOGIC(MSS):  %IF condition &msprec eq 0 is TRUE
MLOGIC(MSS):  %LET (variable name is ACC)
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MSORDER resolves to 4
MPRINT(MSS):   data ms24;
SYMBOLGEN:  Macro variable MSORDER resolves to 4
MPRINT(MSS):   set ms4;
SYMBOLGEN:  Macro variable GMEAN resolves to NO
MLOGIC(MSS):  %IF condition &GMEAN=YES is FALSE
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MLOGIC(MSS):  %IF condition &MSPREC NE is TRUE
MPRINT(MSS):   if nn ne . then n=put(nn,7.);
MPRINT(MSS):   if nnmiss ne . then nmiss=put(nnmiss,7.);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nmean ne . then mean=put(nmean,9.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nn>1 then std=put(nstd,10.1);
                                                                         The SAS System

SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   else if nn=1 then std=repeat(' ',5-0)||'-';
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nn>1 then stderr=put(nse,10.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   else if nn=1 then se=repeat(' ',5-0)||' ';
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MLOGIC(MSS):  %IF condition &msprec>0 is FALSE
MPRINT(MSS):  ;
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MLOGIC(MSS):  %IF condition &msprec=0 is TRUE
MPRINT(MSS):   if nmin ne . then min=put(nmin,7.);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nmedian ne . then median=put(nmedian,9.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MLOGIC(MSS):  %IF condition &msprec>0 is FALSE
MPRINT(MSS):  ;
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MLOGIC(MSS):  %IF condition &msprec=0 is TRUE
MPRINT(MSS):   if nmax ne . then max=put(nmax,7.);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nq1 ne . then q1=put(nq1,9.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nq3 ne . then q3=put(nq3,9.1);
MPRINT(MSS):   if nsum ne . then sum=put(nsum,7.);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nn>1 and nuclm ne . then uclm=put(nuclm,14.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   else if nn=1 then uclm=repeat(' ',5-0)||' ';
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nn>1 and nlclm ne . then lclm=put(nlclm,14.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   else if nn=1 then lclm=repeat(' ',5-0)||' ';
MPRINT(MSS):   gmean=mean;
MPRINT(MSS):   length meanse meansd quarts range ci95 $50 ;
MPRINT(MSS):   meanse=mean || ' (' || compress(se) || ')';
MPRINT(MSS):   meansd=mean || ' (' || compress(std) || ')';
MPRINT(MSS):   quarts=compress(q1) || ', ' || compress(q3);
MPRINT(MSS):   range=compress(min) || ', ' || compress(max);
MPRINT(MSS):   if n(nuclm,nlclm)=2 then ci95=compress(lclm) || ', ' || compress(uclm);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   else ci95=repeat(' ',5-0)||' ';
                                                                         The SAS System

MPRINT(MSS):   if nn lt 1 then ci95='';
MPRINT(MSS):   run;

NOTE: There were 6 observations read from the data set WORK.MS4.
NOTE: The data set WORK.MS24 has 6 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MSORDER resolves to 4
SYMBOLGEN:  Macro variable MSORDER resolves to 4
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MLOGIC(MSS):  %IF condition &MSTRT NE is TRUE
MPRINT(MSS):   proc transpose data=ms24 out=ms34 prefix=trt;
SYMBOLGEN:  Macro variable MSBY resolves to 
MLOGIC(MSS):  %IF condition &MSBY NE is FALSE
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MLOGIC(MSS):  %IF condition &MSTRT NE is TRUE
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MPRINT(MSS):   id atrt;
SYMBOLGEN:  Macro variable MSSTATS resolves to n meansd median range
MLOGIC(MSS):  %IF condition &MSSTATS NE is TRUE
SYMBOLGEN:  Macro variable MSSTATS resolves to n meansd median range
MPRINT(MSS):   var n meansd median range;
MPRINT(MSS):   run;

NOTE: There were 6 observations read from the data set WORK.MS24.
NOTE: The data set WORK.MS34 has 4 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MSOUT resolves to height
MPRINT(MSS):   data height;
SYMBOLGEN:  Macro variable OVTRT resolves to 6
MLOGIC(MSS):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(MSS):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 2
MLOGIC(MSS):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 3
MLOGIC(MSS):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 4
MLOGIC(MSS):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 5
MLOGIC(MSS):  %DO loop index variable I is now 6; loop will iterate again.
                                                                         The SAS System

SYMBOLGEN:  Macro variable I resolves to 6
MLOGIC(MSS):  %DO loop index variable I is now 7; loop will not iterate again.
MPRINT(MSS):   length trt1 trt2 trt3 trt4 trt5 trt6 $100;
SYMBOLGEN:  Macro variable MSORDER resolves to 4
MPRINT(MSS):   set ms34;
SYMBOLGEN:  Macro variable MSORDER resolves to 4
MPRINT(MSS):   order=4;
MPRINT(MSS):   length text $70;
MPRINT(MSS):   _name_=upcase(_name_);
MPRINT(MSS):   if _name_='STD' then text='SD';
MPRINT(MSS):   else if _name_='NMISS' then text='N Missing';
MPRINT(MSS):   else if _name_='MIN' then text='Min';
MPRINT(MSS):   else if _name_='MAX' then text='Max';
MPRINT(MSS):   else if _name_='CI95' then text='95% CI';
MPRINT(MSS):   else if _name_='RANGE' then text='Min, Max';
MPRINT(MSS):   else if _name_='QUARTS' then text='Quartiles';
MPRINT(MSS):   else if _name_='MEANSE' then text='Mean (SE)';
MPRINT(MSS):   else if _name_='MEANSD' then text='Mean (SD)';
MPRINT(MSS):   else if _name_='N' then text='n';
MPRINT(MSS):   else if _name_='GMEAN' then text='Geometric Mean';
MPRINT(MSS):   else if _name_='LCLM' then text='95% CI: Lower';
MPRINT(MSS):   else if _name_='UCLM' then text='              Upper';
MPRINT(MSS):   else if _name_='Q1' then text='Quartiles: Q1';
MPRINT(MSS):   else if _name_='Q3' then text='                 Q3';
MPRINT(MSS):   else text=substr(_name_,1,1)||lowcase(substr(_name_,2));
MPRINT(MSS):   sorder=input(_name_,statord.);
MPRINT(MSS):   array medvrs _character_;
MPRINT(MSS):   do i=1 to dim(medvrs);
MPRINT(MSS):   if compress(medvrs(i))='.' then medvrs(i)='';
MPRINT(MSS):   end;
MPRINT(MSS):   drop i;
SYMBOLGEN:  Macro variable TOTTRT resolves to 6
MPRINT(MSS):   array trtvars $ trt1-trt6;
SYMBOLGEN:  Macro variable OVTRT resolves to 6
MLOGIC(MSS):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   if _name_='N' and trt1='' then trt1=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   space1=int((12+0 - length(trim(trt1)))/2);
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   if _name_='RANGE' and index(trt1,',') and space1 gt 0 then trt1=repeat(' ',space1+1) || trim(trt1);
                                                                         The SAS System

SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   drop space1;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   if _name_='N' and trt2='' then trt2=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   space2=int((12+0 - length(trim(trt2)))/2);
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   if _name_='RANGE' and index(trt2,',') and space2 gt 0 then trt2=repeat(' ',space2+1) || trim(trt2);
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   drop space2;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   if _name_='N' and trt3='' then trt3=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   space3=int((12+0 - length(trim(trt3)))/2);
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   if _name_='RANGE' and index(trt3,',') and space3 gt 0 then trt3=repeat(' ',space3+1) || trim(trt3);
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   drop space3;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   if _name_='N' and trt4='' then trt4=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 4
                                                                         The SAS System

SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   space4=int((12+0 - length(trim(trt4)))/2);
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   if _name_='RANGE' and index(trt4,',') and space4 gt 0 then trt4=repeat(' ',space4+1) || trim(trt4);
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   drop space4;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   if _name_='N' and trt5='' then trt5=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   space5=int((12+0 - length(trim(trt5)))/2);
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   if _name_='RANGE' and index(trt5,',') and space5 gt 0 then trt5=repeat(' ',space5+1) || trim(trt5);
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   drop space5;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   if _name_='N' and trt6='' then trt6=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   space6=int((12+0 - length(trim(trt6)))/2);
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   if _name_='RANGE' and index(trt6,',') and space6 gt 0 then trt6=repeat(' ',space6+1) || trim(trt6);
SYMBOLGEN:  Macro variable I resolves to 6
                                                                         The SAS System

MPRINT(MSS):   drop space6;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 7; loop will not iterate again.
MPRINT(MSS):   run;

NOTE: There were 4 observations read from the data set WORK.MS34.
NOTE: The data set WORK.HEIGHT has 4 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MSOUT resolves to height
MPRINT(MSS):   proc sort data=height;
SYMBOLGEN:  Macro variable MSBY resolves to 
MPRINT(MSS):   by order sorder;
MPRINT(MSS):   run;

NOTE: There were 4 observations read from the data set WORK.HEIGHT.
NOTE: The data set WORK.HEIGHT has 4 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(MSS):  Ending execution.
MPRINT(RTDEMOG):  ;
MLOGIC(MSS):  Beginning execution.
MLOGIC(MSS):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mss.sas
MLOGIC(MSS):  Parameter MSDATA has value dm
MLOGIC(MSS):  Parameter MSOUT has value weight
MLOGIC(MSS):  Parameter MSVAR has value weight
MLOGIC(MSS):  Parameter MSSTATS has value n meansd median range
MLOGIC(MSS):  Parameter MSPREC has value 0
MLOGIC(MSS):  Parameter MSORDER has value 5
MLOGIC(MSS):  Parameter MSTRT has value atrt
MLOGIC(MSS):  Parameter MSWHERE has value 
MLOGIC(MSS):  Parameter MSBY has value 
MLOGIC(MSS):  Parameter MSORIENT has value l
MLOGIC(MSS):  Parameter MSSPACE has value &trtspace
MLOGIC(MSS):  Parameter MSPRT has value N
MPRINT(MSS):   ** (1) - IF THIS IS LEFT BLANK, THE STANDARD STATS ARE PRODUCED WHICH ARE N, MEAN (SE), STD, MEDIAN Q1, Q3, MIN and MAX. NMISS AND SUM ARE 
AVAILABLE USING THE STATS OPTION ;
MPRINT(MSS):   ** (2) - EXTRA BY VARIABLES CAN BE ADDED IN THE BY OPTION ;
MPRINT(MSS):   ** (3) - IF THIS IS USED, IT STATES THE PRECISION OF THE DATA HELD ON THE DATASET. MEANS AND MEDIANS ARE THEN PRESENTED TO +1 DP AND STD TO +2 
DP;
                                                                         The SAS System

SYMBOLGEN:  Macro variable MSORDER resolves to 5
MPRINT(MSS):   data ms05;
SYMBOLGEN:  Macro variable MSDATA resolves to dm
MPRINT(MSS):   set dm;
SYMBOLGEN:  Macro variable MSSTATS resolves to n meansd median range
MPRINT(MSS):   if index(upcase("n meansd median range"),"GMEAN") then do;
SYMBOLGEN:  Macro variable MSVAR resolves to weight
SYMBOLGEN:  Macro variable MSVAR resolves to weight
SYMBOLGEN:  Macro variable MSVAR resolves to weight
MPRINT(MSS):   if weight gt 0 then weight=log(weight);
SYMBOLGEN:  Macro variable MSVAR resolves to weight
SYMBOLGEN:  Macro variable MSVAR resolves to weight
MPRINT(MSS):   else if weight=0 then weight=0;
MPRINT(MSS):   call symput("GMEAN","YES");
MPRINT(MSS):   end;
MPRINT(MSS):   else call symput("GMEAN","NO");
MPRINT(MSS):   run;

NOTE: There were 79 observations read from the data set WORK.DM.
NOTE: The data set WORK.MS05 has 79 observations and 42 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MSORDER resolves to 5
SYMBOLGEN:  Macro variable MSPRT resolves to N
MLOGIC(MSS):  %IF condition %UPCASE(&MSPRT) NE Y is TRUE
MPRINT(MSS):   proc means data=ms05 nway noprint;
SYMBOLGEN:  Macro variable MSVAR resolves to weight
MPRINT(MSS):   var weight;
SYMBOLGEN:  Macro variable MSBY resolves to 
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MLOGIC(MSS):  %IF condition &MSBY NE or &MSTRT NE is TRUE
SYMBOLGEN:  Macro variable MSBY resolves to 
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MPRINT(MSS):   class atrt;
SYMBOLGEN:  Macro variable MSWHERE resolves to 
MLOGIC(MSS):  %IF condition &MSWHERE NE is FALSE
SYMBOLGEN:  Macro variable MSORDER resolves to 5
MPRINT(MSS):   output out=ms5 n=nn mean=nmean std=nstd median=nmedian min=nmin max=nmax nmiss=nnmiss sum=nsum stderr=nse q1=nq1 q3=nq3 var=nvar uclm=nuclm 
lclm=nlclm;
MPRINT(MSS):   run;

NOTE: There were 79 observations read from the data set WORK.MS05.
NOTE: The data set WORK.MS5 has 6 observations and 17 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.00 seconds
                                                                         The SAS System

      cpu time            0.01 seconds
      

MPRINT(MSS):   data _null_;
SYMBOLGEN:  Macro variable MSORDER resolves to 5
MPRINT(MSS):   if 0 then set ms5 nobs=count;
MPRINT(MSS):   call symput("numobs",left(put(count,10.)));
MPRINT(MSS):   stop;
MPRINT(MSS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable NUMOBS resolves to 6         
MLOGIC(MSS):  %IF condition &numobs>=1 is TRUE
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MLOGIC(MSS):  %IF condition &msprec ne is TRUE
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MLOGIC(MSS):  %IF condition &msprec eq 0 is TRUE
MLOGIC(MSS):  %LET (variable name is ACC)
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MSORDER resolves to 5
MPRINT(MSS):   data ms25;
SYMBOLGEN:  Macro variable MSORDER resolves to 5
MPRINT(MSS):   set ms5;
SYMBOLGEN:  Macro variable GMEAN resolves to NO
MLOGIC(MSS):  %IF condition &GMEAN=YES is FALSE
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MLOGIC(MSS):  %IF condition &MSPREC NE is TRUE
MPRINT(MSS):   if nn ne . then n=put(nn,7.);
MPRINT(MSS):   if nnmiss ne . then nmiss=put(nnmiss,7.);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nmean ne . then mean=put(nmean,9.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nn>1 then std=put(nstd,10.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   else if nn=1 then std=repeat(' ',5-0)||'-';
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nn>1 then stderr=put(nse,10.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   else if nn=1 then se=repeat(' ',5-0)||' ';
SYMBOLGEN:  Macro variable MSPREC resolves to 0
                                                                         The SAS System

MLOGIC(MSS):  %IF condition &msprec>0 is FALSE
MPRINT(MSS):  ;
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MLOGIC(MSS):  %IF condition &msprec=0 is TRUE
MPRINT(MSS):   if nmin ne . then min=put(nmin,7.);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nmedian ne . then median=put(nmedian,9.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MLOGIC(MSS):  %IF condition &msprec>0 is FALSE
MPRINT(MSS):  ;
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MLOGIC(MSS):  %IF condition &msprec=0 is TRUE
MPRINT(MSS):   if nmax ne . then max=put(nmax,7.);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nq1 ne . then q1=put(nq1,9.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nq3 ne . then q3=put(nq3,9.1);
MPRINT(MSS):   if nsum ne . then sum=put(nsum,7.);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nn>1 and nuclm ne . then uclm=put(nuclm,14.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   else if nn=1 then uclm=repeat(' ',5-0)||' ';
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   if nn>1 and nlclm ne . then lclm=put(nlclm,14.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   else if nn=1 then lclm=repeat(' ',5-0)||' ';
MPRINT(MSS):   gmean=mean;
MPRINT(MSS):   length meanse meansd quarts range ci95 $50 ;
MPRINT(MSS):   meanse=mean || ' (' || compress(se) || ')';
MPRINT(MSS):   meansd=mean || ' (' || compress(std) || ')';
MPRINT(MSS):   quarts=compress(q1) || ', ' || compress(q3);
MPRINT(MSS):   range=compress(min) || ', ' || compress(max);
MPRINT(MSS):   if n(nuclm,nlclm)=2 then ci95=compress(lclm) || ', ' || compress(uclm);
SYMBOLGEN:  Macro variable MSPREC resolves to 0
MPRINT(MSS):   else ci95=repeat(' ',5-0)||' ';
MPRINT(MSS):   if nn lt 1 then ci95='';
MPRINT(MSS):   run;

NOTE: There were 6 observations read from the data set WORK.MS5.
NOTE: The data set WORK.MS25 has 6 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
                                                                         The SAS System

      

SYMBOLGEN:  Macro variable MSORDER resolves to 5
SYMBOLGEN:  Macro variable MSORDER resolves to 5
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MLOGIC(MSS):  %IF condition &MSTRT NE is TRUE
MPRINT(MSS):   proc transpose data=ms25 out=ms35 prefix=trt;
SYMBOLGEN:  Macro variable MSBY resolves to 
MLOGIC(MSS):  %IF condition &MSBY NE is FALSE
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MLOGIC(MSS):  %IF condition &MSTRT NE is TRUE
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MPRINT(MSS):   id atrt;
SYMBOLGEN:  Macro variable MSSTATS resolves to n meansd median range
MLOGIC(MSS):  %IF condition &MSSTATS NE is TRUE
SYMBOLGEN:  Macro variable MSSTATS resolves to n meansd median range
MPRINT(MSS):   var n meansd median range;
MPRINT(MSS):   run;

NOTE: There were 6 observations read from the data set WORK.MS25.
NOTE: The data set WORK.MS35 has 4 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MSOUT resolves to weight
MPRINT(MSS):   data weight;
SYMBOLGEN:  Macro variable OVTRT resolves to 6
MLOGIC(MSS):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(MSS):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 2
MLOGIC(MSS):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 3
MLOGIC(MSS):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 4
MLOGIC(MSS):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 5
MLOGIC(MSS):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 6
MLOGIC(MSS):  %DO loop index variable I is now 7; loop will not iterate again.
MPRINT(MSS):   length trt1 trt2 trt3 trt4 trt5 trt6 $100;
SYMBOLGEN:  Macro variable MSORDER resolves to 5
MPRINT(MSS):   set ms35;
SYMBOLGEN:  Macro variable MSORDER resolves to 5
MPRINT(MSS):   order=5;
MPRINT(MSS):   length text $70;
                                                                         The SAS System

MPRINT(MSS):   _name_=upcase(_name_);
MPRINT(MSS):   if _name_='STD' then text='SD';
MPRINT(MSS):   else if _name_='NMISS' then text='N Missing';
MPRINT(MSS):   else if _name_='MIN' then text='Min';
MPRINT(MSS):   else if _name_='MAX' then text='Max';
MPRINT(MSS):   else if _name_='CI95' then text='95% CI';
MPRINT(MSS):   else if _name_='RANGE' then text='Min, Max';
MPRINT(MSS):   else if _name_='QUARTS' then text='Quartiles';
MPRINT(MSS):   else if _name_='MEANSE' then text='Mean (SE)';
MPRINT(MSS):   else if _name_='MEANSD' then text='Mean (SD)';
MPRINT(MSS):   else if _name_='N' then text='n';
MPRINT(MSS):   else if _name_='GMEAN' then text='Geometric Mean';
MPRINT(MSS):   else if _name_='LCLM' then text='95% CI: Lower';
MPRINT(MSS):   else if _name_='UCLM' then text='              Upper';
MPRINT(MSS):   else if _name_='Q1' then text='Quartiles: Q1';
MPRINT(MSS):   else if _name_='Q3' then text='                 Q3';
MPRINT(MSS):   else text=substr(_name_,1,1)||lowcase(substr(_name_,2));
MPRINT(MSS):   sorder=input(_name_,statord.);
MPRINT(MSS):   array medvrs _character_;
MPRINT(MSS):   do i=1 to dim(medvrs);
MPRINT(MSS):   if compress(medvrs(i))='.' then medvrs(i)='';
MPRINT(MSS):   end;
MPRINT(MSS):   drop i;
SYMBOLGEN:  Macro variable TOTTRT resolves to 6
MPRINT(MSS):   array trtvars $ trt1-trt6;
SYMBOLGEN:  Macro variable OVTRT resolves to 6
MLOGIC(MSS):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   if _name_='N' and trt1='' then trt1=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   space1=int((12+0 - length(trim(trt1)))/2);
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   if _name_='RANGE' and index(trt1,',') and space1 gt 0 then trt1=repeat(' ',space1+1) || trim(trt1);
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   drop space1;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
                                                                         The SAS System

MPRINT(MSS):   if _name_='N' and trt2='' then trt2=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   space2=int((12+0 - length(trim(trt2)))/2);
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   if _name_='RANGE' and index(trt2,',') and space2 gt 0 then trt2=repeat(' ',space2+1) || trim(trt2);
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   drop space2;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   if _name_='N' and trt3='' then trt3=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   space3=int((12+0 - length(trim(trt3)))/2);
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   if _name_='RANGE' and index(trt3,',') and space3 gt 0 then trt3=repeat(' ',space3+1) || trim(trt3);
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   drop space3;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   if _name_='N' and trt4='' then trt4=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   space4=int((12+0 - length(trim(trt4)))/2);
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
                                                                         The SAS System

MPRINT(MSS):   if _name_='RANGE' and index(trt4,',') and space4 gt 0 then trt4=repeat(' ',space4+1) || trim(trt4);
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   drop space4;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   if _name_='N' and trt5='' then trt5=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   space5=int((12+0 - length(trim(trt5)))/2);
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   if _name_='RANGE' and index(trt5,',') and space5 gt 0 then trt5=repeat(' ',space5+1) || trim(trt5);
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   drop space5;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   if _name_='N' and trt6='' then trt6=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable MSPREC resolves to 0
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   space6=int((12+0 - length(trim(trt6)))/2);
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   if _name_='RANGE' and index(trt6,',') and space6 gt 0 then trt6=repeat(' ',space6+1) || trim(trt6);
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   drop space6;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 7; loop will not iterate again.
MPRINT(MSS):   run;

NOTE: There were 4 observations read from the data set WORK.MS35.
                                                                         The SAS System

NOTE: The data set WORK.WEIGHT has 4 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MSOUT resolves to weight
MPRINT(MSS):   proc sort data=weight;
SYMBOLGEN:  Macro variable MSBY resolves to 
MPRINT(MSS):   by order sorder;
MPRINT(MSS):   run;

NOTE: There were 4 observations read from the data set WORK.WEIGHT.
NOTE: The data set WORK.WEIGHT has 4 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(MSS):  Ending execution.
MPRINT(RTDEMOG):  ;
MLOGIC(MSS):  Beginning execution.
MLOGIC(MSS):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mss.sas
MLOGIC(MSS):  Parameter MSDATA has value dm
MLOGIC(MSS):  Parameter MSOUT has value tbsa
MLOGIC(MSS):  Parameter MSVAR has value tbsa
MLOGIC(MSS):  Parameter MSSTATS has value n meansd median range
MLOGIC(MSS):  Parameter MSPREC has value 1
MLOGIC(MSS):  Parameter MSORDER has value 6
MLOGIC(MSS):  Parameter MSTRT has value atrt
MLOGIC(MSS):  Parameter MSWHERE has value 
MLOGIC(MSS):  Parameter MSBY has value 
MLOGIC(MSS):  Parameter MSORIENT has value l
MLOGIC(MSS):  Parameter MSSPACE has value &trtspace
MLOGIC(MSS):  Parameter MSPRT has value N
MPRINT(MSS):   ** (1) - IF THIS IS LEFT BLANK, THE STANDARD STATS ARE PRODUCED WHICH ARE N, MEAN (SE), STD, MEDIAN Q1, Q3, MIN and MAX. NMISS AND SUM ARE 
AVAILABLE USING THE STATS OPTION ;
MPRINT(MSS):   ** (2) - EXTRA BY VARIABLES CAN BE ADDED IN THE BY OPTION ;
MPRINT(MSS):   ** (3) - IF THIS IS USED, IT STATES THE PRECISION OF THE DATA HELD ON THE DATASET. MEANS AND MEDIANS ARE THEN PRESENTED TO +1 DP AND STD TO +2 
DP;
SYMBOLGEN:  Macro variable MSORDER resolves to 6
MPRINT(MSS):   data ms06;
SYMBOLGEN:  Macro variable MSDATA resolves to dm
MPRINT(MSS):   set dm;
SYMBOLGEN:  Macro variable MSSTATS resolves to n meansd median range
MPRINT(MSS):   if index(upcase("n meansd median range"),"GMEAN") then do;
SYMBOLGEN:  Macro variable MSVAR resolves to tbsa
SYMBOLGEN:  Macro variable MSVAR resolves to tbsa
                                                                         The SAS System

SYMBOLGEN:  Macro variable MSVAR resolves to tbsa
MPRINT(MSS):   if tbsa gt 0 then tbsa=log(tbsa);
SYMBOLGEN:  Macro variable MSVAR resolves to tbsa
SYMBOLGEN:  Macro variable MSVAR resolves to tbsa
MPRINT(MSS):   else if tbsa=0 then tbsa=0;
MPRINT(MSS):   call symput("GMEAN","YES");
MPRINT(MSS):   end;
MPRINT(MSS):   else call symput("GMEAN","NO");
MPRINT(MSS):   run;

NOTE: There were 79 observations read from the data set WORK.DM.
NOTE: The data set WORK.MS06 has 79 observations and 42 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MSORDER resolves to 6
SYMBOLGEN:  Macro variable MSPRT resolves to N
MLOGIC(MSS):  %IF condition %UPCASE(&MSPRT) NE Y is TRUE
MPRINT(MSS):   proc means data=ms06 nway noprint;
SYMBOLGEN:  Macro variable MSVAR resolves to tbsa
MPRINT(MSS):   var tbsa;
SYMBOLGEN:  Macro variable MSBY resolves to 
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MLOGIC(MSS):  %IF condition &MSBY NE or &MSTRT NE is TRUE
SYMBOLGEN:  Macro variable MSBY resolves to 
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MPRINT(MSS):   class atrt;
SYMBOLGEN:  Macro variable MSWHERE resolves to 
MLOGIC(MSS):  %IF condition &MSWHERE NE is FALSE
SYMBOLGEN:  Macro variable MSORDER resolves to 6
MPRINT(MSS):   output out=ms6 n=nn mean=nmean std=nstd median=nmedian min=nmin max=nmax nmiss=nnmiss sum=nsum stderr=nse q1=nq1 q3=nq3 var=nvar uclm=nuclm 
lclm=nlclm;
MPRINT(MSS):   run;

NOTE: There were 79 observations read from the data set WORK.MS06.
NOTE: The data set WORK.MS6 has 6 observations and 17 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MSS):   data _null_;
SYMBOLGEN:  Macro variable MSORDER resolves to 6
MPRINT(MSS):   if 0 then set ms6 nobs=count;
MPRINT(MSS):   call symput("numobs",left(put(count,10.)));
MPRINT(MSS):   stop;
                                                                         The SAS System

MPRINT(MSS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable NUMOBS resolves to 6         
MLOGIC(MSS):  %IF condition &numobs>=1 is TRUE
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &msprec ne is TRUE
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &msprec eq 0 is FALSE
MLOGIC(MSS):  %LET (variable name is ACC)
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSORDER resolves to 6
MPRINT(MSS):   data ms26;
SYMBOLGEN:  Macro variable MSORDER resolves to 6
MPRINT(MSS):   set ms6;
SYMBOLGEN:  Macro variable GMEAN resolves to NO
MLOGIC(MSS):  %IF condition &GMEAN=YES is FALSE
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &MSPREC NE is TRUE
MPRINT(MSS):   if nn ne . then n=put(nn,7.);
MPRINT(MSS):   if nnmiss ne . then nmiss=put(nnmiss,7.);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nmean ne . then mean=put(nmean,10.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nn>1 then std=put(nstd,11.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   else if nn=1 then std=repeat(' ',5-1)||'-';
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nn>1 then stderr=put(nse,11.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   else if nn=1 then se=repeat(' ',5-1)||' ';
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &msprec>0 is TRUE
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nmin ne . then min=put(nmin,9.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &msprec=0 is FALSE
MPRINT(MSS):  ;
                                                                         The SAS System

SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nmedian ne . then median=put(nmedian,10.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &msprec>0 is TRUE
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nmax ne . then max=put(nmax,9.1);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MLOGIC(MSS):  %IF condition &msprec=0 is FALSE
MPRINT(MSS):  ;
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nq1 ne . then q1=put(nq1,10.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nq3 ne . then q3=put(nq3,10.2);
MPRINT(MSS):   if nsum ne . then sum=put(nsum,7.);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nn>1 and nuclm ne . then uclm=put(nuclm,15.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   else if nn=1 then uclm=repeat(' ',5-1)||' ';
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   if nn>1 and nlclm ne . then lclm=put(nlclm,15.2);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   else if nn=1 then lclm=repeat(' ',5-1)||' ';
MPRINT(MSS):   gmean=mean;
MPRINT(MSS):   length meanse meansd quarts range ci95 $50 ;
MPRINT(MSS):   meanse=mean || ' (' || compress(se) || ')';
MPRINT(MSS):   meansd=mean || ' (' || compress(std) || ')';
MPRINT(MSS):   quarts=compress(q1) || ', ' || compress(q3);
MPRINT(MSS):   range=compress(min) || ', ' || compress(max);
MPRINT(MSS):   if n(nuclm,nlclm)=2 then ci95=compress(lclm) || ', ' || compress(uclm);
SYMBOLGEN:  Macro variable MSPREC resolves to 1
MPRINT(MSS):   else ci95=repeat(' ',5-1)||' ';
MPRINT(MSS):   if nn lt 1 then ci95='';
MPRINT(MSS):   run;

NOTE: There were 6 observations read from the data set WORK.MS6.
NOTE: The data set WORK.MS26 has 6 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MSORDER resolves to 6
                                                                         The SAS System

SYMBOLGEN:  Macro variable MSORDER resolves to 6
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MLOGIC(MSS):  %IF condition &MSTRT NE is TRUE
MPRINT(MSS):   proc transpose data=ms26 out=ms36 prefix=trt;
SYMBOLGEN:  Macro variable MSBY resolves to 
MLOGIC(MSS):  %IF condition &MSBY NE is FALSE
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MLOGIC(MSS):  %IF condition &MSTRT NE is TRUE
SYMBOLGEN:  Macro variable MSTRT resolves to atrt
MPRINT(MSS):   id atrt;
SYMBOLGEN:  Macro variable MSSTATS resolves to n meansd median range
MLOGIC(MSS):  %IF condition &MSSTATS NE is TRUE
SYMBOLGEN:  Macro variable MSSTATS resolves to n meansd median range
MPRINT(MSS):   var n meansd median range;
MPRINT(MSS):   run;

NOTE: There were 6 observations read from the data set WORK.MS26.
NOTE: The data set WORK.MS36 has 4 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MSOUT resolves to tbsa
MPRINT(MSS):   data tbsa;
SYMBOLGEN:  Macro variable OVTRT resolves to 6
MLOGIC(MSS):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(MSS):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 2
MLOGIC(MSS):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 3
MLOGIC(MSS):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 4
MLOGIC(MSS):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 5
MLOGIC(MSS):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 6
MLOGIC(MSS):  %DO loop index variable I is now 7; loop will not iterate again.
MPRINT(MSS):   length trt1 trt2 trt3 trt4 trt5 trt6 $100;
SYMBOLGEN:  Macro variable MSORDER resolves to 6
MPRINT(MSS):   set ms36;
SYMBOLGEN:  Macro variable MSORDER resolves to 6
MPRINT(MSS):   order=6;
MPRINT(MSS):   length text $70;
MPRINT(MSS):   _name_=upcase(_name_);
MPRINT(MSS):   if _name_='STD' then text='SD';
MPRINT(MSS):   else if _name_='NMISS' then text='N Missing';
                                                                         The SAS System

MPRINT(MSS):   else if _name_='MIN' then text='Min';
MPRINT(MSS):   else if _name_='MAX' then text='Max';
MPRINT(MSS):   else if _name_='CI95' then text='95% CI';
MPRINT(MSS):   else if _name_='RANGE' then text='Min, Max';
MPRINT(MSS):   else if _name_='QUARTS' then text='Quartiles';
MPRINT(MSS):   else if _name_='MEANSE' then text='Mean (SE)';
MPRINT(MSS):   else if _name_='MEANSD' then text='Mean (SD)';
MPRINT(MSS):   else if _name_='N' then text='n';
MPRINT(MSS):   else if _name_='GMEAN' then text='Geometric Mean';
MPRINT(MSS):   else if _name_='LCLM' then text='95% CI: Lower';
MPRINT(MSS):   else if _name_='UCLM' then text='              Upper';
MPRINT(MSS):   else if _name_='Q1' then text='Quartiles: Q1';
MPRINT(MSS):   else if _name_='Q3' then text='                 Q3';
MPRINT(MSS):   else text=substr(_name_,1,1)||lowcase(substr(_name_,2));
MPRINT(MSS):   sorder=input(_name_,statord.);
MPRINT(MSS):   array medvrs _character_;
MPRINT(MSS):   do i=1 to dim(medvrs);
MPRINT(MSS):   if compress(medvrs(i))='.' then medvrs(i)='';
MPRINT(MSS):   end;
MPRINT(MSS):   drop i;
SYMBOLGEN:  Macro variable TOTTRT resolves to 6
MPRINT(MSS):   array trtvars $ trt1-trt6;
SYMBOLGEN:  Macro variable OVTRT resolves to 6
MLOGIC(MSS):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   if _name_='N' and trt1='' then trt1=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   space1=int((12+2 - length(trim(trt1)))/2);
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   if _name_='RANGE' and index(trt1,',') and space1 gt 0 then trt1=repeat(' ',space1+1) || trim(trt1);
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(MSS):   drop space1;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   if _name_='N' and trt2='' then trt2=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable MSPREC resolves to 1
                                                                         The SAS System

SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   space2=int((12+2 - length(trim(trt2)))/2);
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   if _name_='RANGE' and index(trt2,',') and space2 gt 0 then trt2=repeat(' ',space2+1) || trim(trt2);
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(MSS):   drop space2;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   if _name_='N' and trt3='' then trt3=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   space3=int((12+2 - length(trim(trt3)))/2);
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   if _name_='RANGE' and index(trt3,',') and space3 gt 0 then trt3=repeat(' ',space3+1) || trim(trt3);
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(MSS):   drop space3;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   if _name_='N' and trt4='' then trt4=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   space4=int((12+2 - length(trim(trt4)))/2);
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   if _name_='RANGE' and index(trt4,',') and space4 gt 0 then trt4=repeat(' ',space4+1) || trim(trt4);
SYMBOLGEN:  Macro variable I resolves to 4
MPRINT(MSS):   drop space4;
                                                                         The SAS System

SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   if _name_='N' and trt5='' then trt5=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   space5=int((12+2 - length(trim(trt5)))/2);
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   if _name_='RANGE' and index(trt5,',') and space5 gt 0 then trt5=repeat(' ',space5+1) || trim(trt5);
SYMBOLGEN:  Macro variable I resolves to 5
MPRINT(MSS):   drop space5;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   if _name_='N' and trt6='' then trt6=put(0,7.);
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable MSPREC resolves to 1
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   space6=int((12+2 - length(trim(trt6)))/2);
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   if _name_='RANGE' and index(trt6,',') and space6 gt 0 then trt6=repeat(' ',space6+1) || trim(trt6);
SYMBOLGEN:  Macro variable I resolves to 6
MPRINT(MSS):   drop space6;
SYMBOLGEN:  Macro variable MSSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MLOGIC(MSS):  %IF condition %eval(&msspace) gt 4 is FALSE
MLOGIC(MSS):  %DO loop index variable I is now 7; loop will not iterate again.
MPRINT(MSS):   run;

NOTE: There were 4 observations read from the data set WORK.MS36.
NOTE: The data set WORK.TBSA has 4 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
                                                                         The SAS System

      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MSOUT resolves to tbsa
MPRINT(MSS):   proc sort data=tbsa;
SYMBOLGEN:  Macro variable MSBY resolves to 
MPRINT(MSS):   by order sorder;
MPRINT(MSS):   run;

NOTE: There were 4 observations read from the data set WORK.TBSA.
NOTE: The data set WORK.TBSA has 4 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(MSS):  Ending execution.
MPRINT(RTDEMOG):  ;
MPRINT(RTDEMOG):   data final;
MPRINT(RTDEMOG):   set age gender race height weight tbsa;
MPRINT(RTDEMOG):   length page 4;
MPRINT(RTDEMOG):   page=1;
MPRINT(RTDEMOG):   run;

NOTE: There were 4 observations read from the data set WORK.AGE.
NOTE: There were 2 observations read from the data set WORK.GENDER.
NOTE: There were 4 observations read from the data set WORK.RACE.
NOTE: There were 4 observations read from the data set WORK.HEIGHT.
NOTE: There were 4 observations read from the data set WORK.WEIGHT.
NOTE: There were 4 observations read from the data set WORK.TBSA.
NOTE: The data set WORK.FINAL has 22 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(RTDEMOG):   proc sort data=final;
MPRINT(RTDEMOG):   by page order sorder;
MPRINT(RTDEMOG):   run;

NOTE: There were 22 observations read from the data set WORK.FINAL.
NOTE: The data set WORK.FINAL has 22 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(RTDEMOG):   data final;
                                                                         The SAS System

MPRINT(RTDEMOG):   set final;
MPRINT(RTDEMOG):   by page order sorder;
MPRINT(RTDEMOG):   length firstcol $30;
MPRINT(RTDEMOG):   if first.order then firstcol=put(order,orderf.);
MPRINT(RTDEMOG):   else firstcol='';
MPRINT(RTDEMOG):   run;

NOTE: There were 22 observations read from the data set WORK.FINAL.
NOTE: The data set WORK.FINAL has 22 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      

MLOGIC(MTITLE):  Beginning execution.
MLOGIC(MTITLE):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mtitle.sas
SYMBOLGEN:  Macro variable PROGID resolves to tdemog1
MLOGIC(MTITLE):  Parameter PROGID has value tdemog1
MLOGIC(MTITLE):  Parameter TYPE has value html
MLOGIC(MTITLE):  Parameter ORIENT has value l
MLOGIC(MTITLE):  Parameter SASOPT has value nodate nonumber nobyline
MLOGIC(MTITLE):  Parameter BYVAR has value 
MLOGIC(MTITLE):  Parameter BYTXT has value 
MLOGIC(MTITLE):  Parameter TMNAME has value rtf
MLOGIC(MTITLE):  Parameter NOPAGE has value n
SYMBOLGEN:  Macro variable SASOPT resolves to nodate nonumber nobyline
MLOGIC(MTITLE):  %IF condition &sasopt ne is TRUE
SYMBOLGEN:  Macro variable SASOPT resolves to nodate nonumber nobyline
MPRINT(MTITLE):   options nodate nonumber nobyline;
MLOGIC(MTITLE):  %GLOBAL  OUTPUTNAME  
MPRINT(MTITLE):   options mprint;
MLOGIC(MTITLE):  %LET (variable name is MLS)
SYMBOLGEN:  Macro variable ORIENT resolves to l
MLOGIC(MTITLE):  %IF condition %upcase(&orient)=P is FALSE
MLOGIC(MTITLE):  %LET (variable name is ORIENTO)
SYMBOLGEN:  Macro variable ORIENTO resolves to Landscape
MPRINT(MTITLE):   options orientation=Landscape;
MLOGIC(MTITLE):  %GLOBAL  TABLNO NUMTITLE FOOTN1 FOOTN2 FOOTN3 FOOTN4 FOOTN5 FOOTN6 FOOTN7 FOOTN8 FOOTN9 SPAGENO SFOOTN1 SFOOTN2 SFOOTN3 SFOOTN8 SFOOTN9 
      SFOOTN10 SDATA NUMFOOT OUTPUTNAME         TABNUM TITLE1 TITLE2 TITLE3 TITLE4 TITLE5 TITLE6 OUTPUTF L_SOURCE  FOOTN11
MLOGIC(MTITLE):  %LET (variable name is FSTLN)
MLOGIC(MTITLE):  %LET (variable name is CHGLN)
MLOGIC(MTITLE):  %LET (variable name is FOOTBR)
MPRINT(MTITLE):   data toc_prog;
SYMBOLGEN:  Macro variable DERDATA resolves to derived
MPRINT(MTITLE):   set derived.toc_prog;
NOTE: Data file DERIVED.TOC_PROG.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. Cross 
      Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
SYMBOLGEN:  Macro variable PROGID resolves to tdemog1
                                                                         The SAS System

MPRINT(MTITLE):   if compress(upcase(progid))=upcase("tdemog1");
MPRINT(MTITLE):   call symput('tabnum',trim(tabnum));
MPRINT(MTITLE):   if index(title1,'`{') then offset=9;
MPRINT(MTITLE):   else offset=0;
SYMBOLGEN:  Macro variable MLS resolves to 170
MPRINT(MTITLE):   call symput('title1',trim(title1)||repeat(" ",(170-length(title1)-length(tabnum)-30-4+offset))||"[Page_00000_of_99999]");
MPRINT(MTITLE):   call symput('title2',trim(title2));
MPRINT(MTITLE):   call symput('title3',trim(title3));
MPRINT(MTITLE):   call symput('title4',trim(title4));
MPRINT(MTITLE):   call symput('title5',trim(title5));
MPRINT(MTITLE):   call symput('title6',trim(title6));
MPRINT(MTITLE):   call symput('outputname',trim(outname));
MPRINT(MTITLE):   call symput('numtitle',compress(put(numtitle,3.)));
MPRINT(MTITLE):   call symput('footn1',trim(footn1));
MPRINT(MTITLE):   call symput('footn2',trim(footn2));
MPRINT(MTITLE):   call symput('footn3',trim(footn3));
MPRINT(MTITLE):   call symput('footn4',trim(footn4));
MPRINT(MTITLE):   call symput('footn5',trim(footn5));
MPRINT(MTITLE):   call symput('footn6',trim(footn6));
MPRINT(MTITLE):   call symput('footn7',trim(footn7));
MPRINT(MTITLE):   call symput('footn8',trim(footn8));
MPRINT(MTITLE):   call symput('progname',trim(progname));
SYMBOLGEN:  Macro variable DRAFT_FINAL resolves to FINAL
SYMBOLGEN:  Macro variable SYSDATE9 resolves to 21JAN2025
SYMBOLGEN:  Macro variable SYSTIME resolves to 18:08
MPRINT(MTITLE):   if l_source ne '' then footn11="PROGRAM: " || trim(progname) || ".sas, " || "SOURCE: " || trim(l_source) || ", (FINAL) 21JAN2025 18:08";
SYMBOLGEN:  Macro variable DRAFT_FINAL resolves to FINAL
SYMBOLGEN:  Macro variable SYSDATE9 resolves to 21JAN2025
SYMBOLGEN:  Macro variable SYSTIME resolves to 18:08
MPRINT(MTITLE):   else footn11="PROGRAM: " || trim(progname) || ".sas, (FINAL) 21JAN2025 18:08";
MPRINT(MTITLE):   footn11l=trim(footn11);
MPRINT(MTITLE):   call symput('footn11',trim(footn11l));
MPRINT(MTITLE):   call symput('numfoot',compress(put(numfoot,3.)));
SYMBOLGEN:  Macro variable TYPE resolves to html
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition &TYPE=LST or &TYPE=PS is FALSE
SYMBOLGEN:  Macro variable BYVAR resolves to 
MLOGIC(MTITLE):  %IF condition &BYVAR NE is FALSE
MPRINT(MTITLE):   if index(tabnum,'Table') then call symput('outputf','tables');
MPRINT(MTITLE):   else if index(tabnum,'Appendix') then call symput('outputf','listings');
MPRINT(MTITLE):   else if index(tabnum,'Figure') then call symput('outputf','figures');
SYMBOLGEN:  Macro variable ORIENT resolves to l
MLOGIC(MTITLE):  %IF condition %UPCASE(&ORIENT)=P is FALSE
MPRINT(MTITLE):   run;

NOTE: There were 110 observations read from the data set DERIVED.TOC_PROG.
NOTE: The data set WORK.TOC_PROG has 1 observations and 27 variables.
NOTE: DATA statement used (Total process time):
                                                                         The SAS System

      real time           0.02 seconds
      cpu time            0.01 seconds
      

MLOGIC(MTITLE):  %LET (variable name is NUMOBS)
MPRINT(MTITLE):   proc sql noprint;
MPRINT(MTITLE):   select count(*) into: numobs from toc_prog;
MPRINT(MTITLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MLOGIC(MTITLE):  %GLOBAL  _OUTPUTNAME
MLOGIC(MTITLE):  %LET (variable name is _OUTPUTNAME)
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to tables
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to t14_01_01_01_tdemog1
SYMBOLGEN:  Macro variable NUMOBS resolves to        1
MLOGIC(MTITLE):  %IF condition &numobs=0 is FALSE
SYMBOLGEN:  Macro variable NUMOBS resolves to        1
MLOGIC(MTITLE):  %IF condition &numobs>1 is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=RTF is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=HTML is TRUE
MPRINT(MTITLE):   ods listing close;
MPRINT(MTITLE):   ods path sashelp.tmplmst;
MPRINT(MTITLE):   * &derdata..matt;
SYMBOLGEN:  Macro variable TYPE resolves to html
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to tables
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to t14_01_01_01_tdemog1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MTITLE):   ods html file="/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html";
NOTE: Writing HTML Body file: /nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html
MPRINT(MTITLE):   options linesize=160 pagesize=50;
SYMBOLGEN:  Macro variable PTITLE1 resolves to ABCD, Inc.
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(MTITLE):   title1 j=l "ABCD, Inc.";
SYMBOLGEN:  Macro variable PTITLE2 resolves to XMB-111 Draft
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(MTITLE):   title2 j=l "XMB-111 Draft";
SYMBOLGEN:  Macro variable TABNUM resolves to Table 14.1.1-1
SYMBOLGEN:  Macro variable TITLE1 resolves to Demographics and Subject Characteristics                                                                          
                     [Page_00000_of_99999]
MPRINT(MTITLE):   title4 j=l "Table 14.1.1-1:  Demographics and Subject Characteristics                                                                         
          [Page_00000_of_99999]";
                                                                         The SAS System

SYMBOLGEN:  Macro variable NUMTITLE resolves to 1
MLOGIC(MTITLE):  %DO loop beginning; index variable I; start value is 2; stop value is 1; by value is 1.  Loop will not be executed.
SYMBOLGEN:  Macro variable BYVAR resolves to 
MLOGIC(MTITLE):  %IF condition &byvar ne is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=RTF is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=LST is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=HTML is TRUE
SYMBOLGEN:  Macro variable FOOTBR resolves to ''
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NUMFOOT resolves to 1
MLOGIC(MTITLE):  %IF condition &numfoot ne 0 is TRUE
SYMBOLGEN:  Macro variable NUMFOOT resolves to 1
MLOGIC(MTITLE):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is 1.  
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable FOOTN1 resolves to `{super a}Total Body Surface Area = square root of [Ht (cm) * Wt (kg) divided by 3600]
WARNING: The FOOTNOTE statement is ambiguous due to invalid options or unquoted text.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable NUMFOOT resolves to 1
MLOGIC(MTITLE):  %IF condition &i ^= &numfoot is FALSE
MLOGIC(MTITLE):  %DO loop index variable I is now 2; loop will not iterate again.
MPRINT(MTITLE):   footnote1 j=left '' "`{super a}Total Body Surface Area = square root of [Ht (cm) * Wt (kg) divided by 3600]";
MPRINT(MTITLE):   footnote2 " ";
SYMBOLGEN:  Macro variable FOOTN11 resolves to PROGRAM: rtdemog.sas, (FINAL) 21JAN2025 18:08
MPRINT(MTITLE):   footnote3 j=l "PROGRAM: rtdemog.sas, (FINAL) 21JAN2025 18:08";
MLOGIC(MTITLE):  Ending execution.
MPRINT(RTDEMOG):  ;
MPRINT(RTDEMOG):   proc report data=final headline headskip nowindows split='|' missing spacing=1;
MPRINT(RTDEMOG):   column page order sorder firstcol text ("Age Group (years)" trt1 trt2 trt3 trt4 trt5) trt6;
MPRINT(RTDEMOG):   define page /order noprint;
MPRINT(RTDEMOG):   define order /order noprint;
MPRINT(RTDEMOG):   define sorder /order noprint;
MPRINT(RTDEMOG):   define firstcol / "" style={just=l cellwidth=12%};
MPRINT(RTDEMOG):   define text / "" style={just=l cellwidth=12%};
SYMBOLGEN:  Macro variable POP1 resolves to 11
MPRINT(RTDEMOG):   define trt1 / "     0 - 2 |     (N=11)" style={cellwidth=11%};
SYMBOLGEN:  Macro variable POP2 resolves to 8
MPRINT(RTDEMOG):   define trt2 / "     3 - 6 |     (N=8)" style={cellwidth=11%};
SYMBOLGEN:  Macro variable POP3 resolves to 3
MPRINT(RTDEMOG):   define trt3 / "     7 - 11 |     (N=3)" style={cellwidth=11%};
SYMBOLGEN:  Macro variable UP_LIMIT resolves to 17
SYMBOLGEN:  Macro variable POP4 resolves to 8
MPRINT(RTDEMOG):   define trt4 / "     12 - 17 |     (N=8)" style={cellwidth=11%};
SYMBOLGEN:  Macro variable UP_LIMIT resolves to 17
SYMBOLGEN:  Macro variable POP5 resolves to 19
                                                                         The SAS System

MPRINT(RTDEMOG):   define trt5 / "     3 - 17   Total |     (N=19)" style={cellwidth=11%};
SYMBOLGEN:  Macro variable POP6 resolves to 30
MPRINT(RTDEMOG):   define trt6 / "     Total |     (N=30)" style={cellwidth=11%};
MPRINT(RTDEMOG):   break after page / page;
MPRINT(RTDEMOG):   compute before order;
MPRINT(RTDEMOG):   line " ";
MPRINT(RTDEMOG):   endcomp;
MPRINT(RTDEMOG):   run;
NOTE: There were 22 observations read from the data set WORK.FINAL.
NOTE: PROCEDURE REPORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(RTDEMOG):   ods rtf close;
MPRINT(RTDEMOG):   ods listing;
MLOGIC(MPAGEOF):  Beginning execution.
MLOGIC(MPAGEOF):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mpageof.sas
MLOGIC(MPAGEOF):  Parameter INFILE has value "&output/&outputf/&outputname..&type"
MLOGIC(MPAGEOF):  Parameter OUTFILE has value "&output/&outputf/&outputname..&type"
MLOGIC(MPAGEOF):  Parameter TYPE has value html
MLOGIC(MPAGEOF):  Parameter TEXT has value [Page_00000_of_99999]
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MPAGEOF):  %IF condition %upcase(&type)^=LST is TRUE
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   ods html close;
MPRINT(MPAGEOF):   data _null_;
SYMBOLGEN:  Macro variable INFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to tables
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to t14_01_01_01_tdemog1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html" lrecl=32767 end=_eof;
MPRINT(MPAGEOF):   input;
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   if index(_infile_,"[Page_00000_of_99999]") then pageno + 1;
MPRINT(MPAGEOF):   if _eof then call symput('NUMPAGES',compress(put(pageno,14.)));
MPRINT(MPAGEOF):   run;

NOTE: The infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html" is:
      Filename=/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html,
      Owner Name=UNKNOWN,Group Name=UNKNOWN,
      Access Permission=-rw-r--r--,
      Last Modified=21Jan2025:13:08:23,
      File Size (bytes)=47498

NOTE: 1965 records were read from the infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html".
      The minimum record length was 0.
                                                                         The SAS System

      The maximum record length was 193.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MLOGIC(MPAGEOF):  %LOCAL  NUMPAGEL LPAGEOF
MLOGIC(MPAGEOF):  %LET (variable name is NUMPAGEL)
SYMBOLGEN:  Macro variable NUMPAGES resolves to 1
MLOGIC(MPAGEOF):  %LET (variable name is LPAGEOF)
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   data _null_;
SYMBOLGEN:  Macro variable INFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to tables
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to t14_01_01_01_tdemog1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html" lrecl=32767 end=_eof;
SYMBOLGEN:  Macro variable LPAGEOF resolves to 21
MPRINT(MPAGEOF):   length pageof $ 21;
MPRINT(MPAGEOF):   input ;
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   if index(_infile_,"[Page_00000_of_99999]") then do;
MPRINT(MPAGEOF):   pageno + 1;
SYMBOLGEN:  Macro variable NUMPAGEL resolves to 1
SYMBOLGEN:  Macro variable NUMPAGES resolves to 1
MPRINT(MPAGEOF):   pageof = 'Page '|| put(pageno,1.) ||" of 1";
MPRINT(MPAGEOF):   pageof = compbl(pageof);
MPRINT(MPAGEOF):   pageof = right(pageof);
MPRINT(MPAGEOF):   pad="";
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   _infile_ = tranwrd(_infile_,"[Page_00000_of_99999]",pageof);
MPRINT(MPAGEOF):   end;
SYMBOLGEN:  Macro variable OUTFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to tables
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to t14_01_01_01_tdemog1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   file "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html" noprint lrecl=32767;
MPRINT(MPAGEOF):   put _infile_;
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MPAGEOF):  %IF condition &type=PDF is FALSE
MPRINT(MPAGEOF):   run;

NOTE: The file/infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html" is:
      Filename=/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html,
      Owner Name=UNKNOWN,Group Name=UNKNOWN,
      Access Permission=-rw-r--r--,
                                                                         The SAS System

      Last Modified=21Jan2025:13:08:23,
      File Size (bytes)=47498

NOTE: 1965 records were read from the infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html".
      The minimum record length was 0.
      The maximum record length was 193.
NOTE: 1965 records were written to the file "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html".
      The minimum record length was 0.
      The maximum record length was 193.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds
      

MLOGIC(MPAGEOF):  Ending execution.
MPRINT(RTDEMOG):  ;
MPRINT(RTDEMOG):   ods html close;
MPRINT(RTDEMOG):   ods listing;
MLOGIC(MPAGEOF):  Beginning execution.
MLOGIC(MPAGEOF):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mpageof.sas
MLOGIC(MPAGEOF):  Parameter INFILE has value "&output/&outputf/&outputname..&type"
MLOGIC(MPAGEOF):  Parameter OUTFILE has value "&output/&outputf/&outputname..&type"
MLOGIC(MPAGEOF):  Parameter TYPE has value html
MLOGIC(MPAGEOF):  Parameter TEXT has value [Page_00000_of_99999]
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MPAGEOF):  %IF condition %upcase(&type)^=LST is TRUE
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   ods html close;
MPRINT(MPAGEOF):   data _null_;
SYMBOLGEN:  Macro variable INFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to tables
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to t14_01_01_01_tdemog1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html" lrecl=32767 end=_eof;
MPRINT(MPAGEOF):   input;
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   if index(_infile_,"[Page_00000_of_99999]") then pageno + 1;
MPRINT(MPAGEOF):   if _eof then call symput('NUMPAGES',compress(put(pageno,14.)));
MPRINT(MPAGEOF):   run;

NOTE: The infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html" is:
      Filename=/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html,
      Owner Name=UNKNOWN,Group Name=UNKNOWN,
      Access Permission=-rw-r--r--,
      Last Modified=21Jan2025:13:08:23,
      File Size (bytes)=47498

                                                                         The SAS System

NOTE: 1965 records were read from the infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html".
      The minimum record length was 0.
      The maximum record length was 193.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MLOGIC(MPAGEOF):  %LOCAL  NUMPAGEL LPAGEOF
MLOGIC(MPAGEOF):  %LET (variable name is NUMPAGEL)
SYMBOLGEN:  Macro variable NUMPAGES resolves to 0
MLOGIC(MPAGEOF):  %LET (variable name is LPAGEOF)
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   data _null_;
SYMBOLGEN:  Macro variable INFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to tables
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to t14_01_01_01_tdemog1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html" lrecl=32767 end=_eof;
SYMBOLGEN:  Macro variable LPAGEOF resolves to 21
MPRINT(MPAGEOF):   length pageof $ 21;
MPRINT(MPAGEOF):   input ;
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   if index(_infile_,"[Page_00000_of_99999]") then do;
MPRINT(MPAGEOF):   pageno + 1;
SYMBOLGEN:  Macro variable NUMPAGEL resolves to 1
SYMBOLGEN:  Macro variable NUMPAGES resolves to 0
MPRINT(MPAGEOF):   pageof = 'Page '|| put(pageno,1.) ||" of 0";
MPRINT(MPAGEOF):   pageof = compbl(pageof);
MPRINT(MPAGEOF):   pageof = right(pageof);
MPRINT(MPAGEOF):   pad="";
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   _infile_ = tranwrd(_infile_,"[Page_00000_of_99999]",pageof);
MPRINT(MPAGEOF):   end;
SYMBOLGEN:  Macro variable OUTFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to tables
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to t14_01_01_01_tdemog1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   file "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html" noprint lrecl=32767;
MPRINT(MPAGEOF):   put _infile_;
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MPAGEOF):  %IF condition &type=PDF is FALSE
MPRINT(MPAGEOF):   run;

NOTE: The file/infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html" is:
      Filename=/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html,
                                                                         The SAS System

      Owner Name=UNKNOWN,Group Name=UNKNOWN,
      Access Permission=-rw-r--r--,
      Last Modified=21Jan2025:13:08:23,
      File Size (bytes)=47498

NOTE: 1965 records were read from the infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html".
      The minimum record length was 0.
      The maximum record length was 193.
NOTE: 1965 records were written to the file "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_01_01_01_tdemog1.html".
      The minimum record length was 0.
      The maximum record length was 193.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MLOGIC(MPAGEOF):  Ending execution.
MPRINT(RTDEMOG):  ;
MLOGIC(RTDEMOG):  Ending execution.
2564 +%*rtdemog(progid=tdemog2, tcond=%str(if age<17), up_limit=16, itprogid=tdemog4b);
NOTE: %INCLUDE (level 1) ending.
2565  filename _flw_pr clear;
NOTE: Fileref _FLW_PR has been deassigned.
2566  
2567  /* region: Generated macro cleanup */
2568  %symdel _inputCount / nowarn;
2569  %symdel _outputCount / nowarn;
2570  %symdel _input1 / nowarn;
2571  %symdel _output1 / nowarn;
2572  
2573  /* endregion */
2574  
2575  
2576  /* region: Generated step cleanup for rtdemog.sas */
2577  %_flw_action_end(id-1728966431952-1109, WORK._flw1728966431952110_0_0_6, WORK, "_flw1728966431952110_0_0_6");
MLOGIC(_FLW_ACTION_END):  Beginning execution.
MLOGIC(_FLW_ACTION_END):  Parameter NODES has value id-1728966431952-1109
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_LIBS has value WORK._flw1728966431952110_0_0_6
MLOGIC(_FLW_ACTION_END):  Parameter LIBS has value WORK
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_NAMES has value "_flw1728966431952110_0_0_6"
MPRINT(_FLW_ACTION_END):   data _null_;
MPRINT(_FLW_ACTION_END):   attrib next_table_name length = $32 informat = $32. format = $32. dtStartStr length = $26 informat = $26. format = $26.;
MLOGIC(_FLW_ACTION_END):  %LOCAL  I NEXT_TABLE
SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966431952110_0_0_6
MLOGIC(_FLW_ACTION_END):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is 1.  
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE)
SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966431952110_0_0_6
SYMBOLGEN:  Macro variable I resolves to 1
                                                                         The SAS System

MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_LIB)
SYMBOLGEN:  Macro variable LIBS resolves to WORK
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE_NAME)
SYMBOLGEN:  Macro variable TABLE_NAMES resolves to "_flw1728966431952110_0_0_6"
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable NEXT_TABLE_NAME resolves to "_flw1728966431952110_0_0_6"
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(_FLW_ACTION_END):   next_table_name = kreverse(ksubstr(kreverse(ksubstr(kstrip(""_flw1728966431952110_0_0_6""),2)),2));
MLOGIC(_FLW_ACTION_END):  %LET (variable name is TABLE_EXISTS)
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966431952110_0_0_6
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966431952110_0_0_6
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_LIB resolves to WORK
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable TABLE_EXISTS resolves to 0
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_TABLE_|WORK|" next_table_name +(-1) "|0";
MLOGIC(_FLW_ACTION_END):  %DO loop index variable I is now 2; loop will not iterate again.
MPRINT(_FLW_ACTION_END):   dtStartStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966431952-1109
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_END_|" dtStartStr +(-1) "|id-1728966431952-1109";
MPRINT(_FLW_ACTION_END):   run;

_FLW_ACTION_TABLE_|WORK|_flw1728966431952110_0_0_6|0
_FLW_ACTION_END_|2025-01-21T13:08:23+00:00|id-1728966431952-1109
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(_FLW_ACTION_END):  Ending execution.
2578  /* endregion */
2579  
2580  /*===========================================================================*
2581  * Node name:        rtae.sas
2582  * Node ID:          id-1728966431847-1067
2583  *
2584  * Input Tables:
2585  *   WORK._flw1728966431952110_0_0_6
2586  *
2587  * Output Tables:
2588  *   WORK._flw1728966431847106_0_0_7
2589  *
2590  * Step name:        SAS Program
2591  * Step path:        /dataFlows/steps/a7190700-f59c-4a94-afe2-214ce639fcde
2592  * Step description: Run user written SAS code.
2593  *----------------------------------------------------------------------------*/
                                                                         The SAS System

2594  
2595  /* region: Generated step setup */
2596  %_flw_action_start(id-1728966431847-1067);
MLOGIC(_FLW_ACTION_START):  Beginning execution.
MLOGIC(_FLW_ACTION_START):  Parameter NODES has value id-1728966431847-1067
MPRINT(_FLW_ACTION_START):   data _null_;
MPRINT(_FLW_ACTION_START):   dtEndStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966431847-1067
MPRINT(_FLW_ACTION_START):   put "_FLW_ACTION_START_|" dtEndStr +(-1) "|id-1728966431847-1067";
MPRINT(_FLW_ACTION_START):   run;

_FLW_ACTION_START_|2025-01-21T13:08:23+00:00|id-1728966431847-1067
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(_FLW_ACTION_START):  Ending execution.
2597  /* endregion */
2598  
2599  
2600  /* region: Generated macro initialization */
2601  %let _inputCount = 1;
2602  %let _outputCount = 1;
2603  %let _input1 = WORK._flw1728966431952110_0_0_6;
2604  %let _output1 = WORK._flw1728966431847106_0_0_7;
2605  
2606  /* endregion */
2607  
2608  FILENAME _flw_pr "/nfsshare/sashls2/mattb/XMB111/programs/rtae.sas" encoding="UTF-8";
2609  %include _flw_pr / source2;
NOTE: %INCLUDE (level 1) file _FLW_PR is file /nfsshare/sashls2/mattb/XMB111/programs/rtae.sas.
2610 +********************************************************************************;
2611 +*** Program:        \biometrics\499\499H01\analyses_mjb\CSR\programs\prod\rtae.sas
2612 +*** Programmer:     Matt Becker
2613 +*** Date Created:   04Feb2010
2614 +***
2615 +*** Input :         Derived AE
2616 +***
2617 +*** Output:         Adverse Events by SOC and Preferred Term
2618 +***
2619 +*** Purpose:        To create the adverse events by soc and preferred term
2620 +***
2621 +*** Comments:
2622 +***
2623 +*** Software:       SAS 9 (Windows)
2624 +***
2625 +*** Modifications:
                                                                         The SAS System

2626 +***
2627 +*** Date       Programmer        Description
2628 +*** ---------  ----------------  --------------
2629 +***
2630 +********************************************************************************;
2631 +proc format;
2632 +  value $anyrow "AAAAB"="Any AE                                                   ";
NOTE: Format $ANYROW has been output.
2633 +run;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2634 +
2635 +%macro rtae(progid=tae1, aevar=aedecod, tcond=, up_limit=17, progcond=, itprogid=);
2636 +
2637 +data ae;
2638 +  set &derdata..ae(where=(q_safeas='Y' and q_bcond ne 'Y' and aenone ne 'Y' and aete='Y'));
2639 +  &tcond;
2640 +  &progcond;
2641 +  if &aevar='' then do;
2642 +    put "The following AE term has no meddra code: " usubjid= aeterm=;
2643 +    &aevar=aeterm;
2644 +  end;
2645 +  output;
2646 +  if atrt in(2,3,4) then do;
2647 +    atrt=5;
2648 +    output;
2649 +  end;
2650 +  atrt=6;
2651 +  output;
2652 +run;
2653 +
2654 +%mtottrt(cond=%str(if q_safeas='Y';) &tcond);
2655 +
2656 +%*** Create Any Preferred Term, Any SOC;
2657 +data ae;
2658 +  set ae;
2659 +  output;
2660 +  if &aevar ne '' then do;
2661 +    &aevar='AAAAB';
2662 +    output;
2663 +	aebodsys='Any SOC';
2664 +	output;
2665 +  end;
2666 +run;
                                                                         The SAS System

2667 +
2668 +proc sort data=ae out=ae nodupkey;
2669 +  by atrt usubjid aebodsys &aevar;
2670 +
2671 +%mfreq(mfdata=ae, mfout=aestats, mfby=aebodsys, mfcntvar=&aevar, mforder=1);
2672 +
2673 +proc sort data=aestats;
2674 +  by aebodsys &aevar;
2675 +
2676 +data final;
2677 +  set aestats;
2678 +  by aebodsys &aevar;
2679 +  length page 4;
2680 +  retain page;
2681 +  if first.&aevar then page=floor(_n_/15)+1;
2682 +  if &aevar='AAAAB' then &aevar="Any AE";
2683 +run;
2684 +
2685 +%mnumobs(inds=final);
2686 +
2687 +%macro numobs;
2688 +%if &nobs=1 %then %do;
2689 +  data final;
2690 +    set final;
2691 +    if &aevar='' then do;
2692 +      &aevar='None Reported'; trt1=''; trt2=''; trt3=''; trt4=''; trt5=''; trt6='';
2693 +    end;
2694 +  run;
2695 +%end;
2696 +%mend numobs;
2697 +%numobs;
2698 +
2699 +proc sort data=final;
2700 +  by page aebodsys &aevar;
2701 +
2702 +%mtitle(progid=&progid, type=html);
2703 +
2704 +proc report data=final headline headskip nowindows split='|' missing spacing=1;
2705 +  column page aebodsys sorder &aevar ("Age Group (years) \brdrb\brdrs" trt1 trt2 trt3 trt4 trt5) trt6;
2706 +  define page /order noprint;
2707 +  define aebodsys /order "SOC`{super a}" format=$anyrow. style={just=l cellwidth=20%};
2708 +  define sorder /order noprint;
2709 +  %if &progid=tae1 or &progid=tae2 %then %do;
2710 +    define &aevar / "Preferred Term`{super a}" format=$anyrow. style={just=l cellwidth=20%};
2711 +  %end;
2712 +  %else %do;
2713 +    define &aevar / "Preferred Term`{super b}" format=$anyrow. style={just=l cellwidth=20%};
2714 +  %end;
                                                                         The SAS System

2715 +  define trt1 / "     0 - 2 |     (N=&pop1)|     n (%)" style={cellwidth=8%};
2716 +  define trt2 / "     3 - 6 |     (N=&pop2)|     n (%)" style={cellwidth=8%};
2717 +  define trt3 / "     7 - 11 |     (N=&pop3)|     n (%)" style={cellwidth=8%};
2718 +  define trt4 / "     12 - &up_limit |     (N=&pop4)|     n (%)" style={cellwidth=8%};
2719 +  define trt5 / "     3 - &up_limit Total |     (N=&pop5)|     n (%)" style={cellwidth=8%};
2720 +  define trt6 / "     Total |     (N=&pop6)|     n (%)" style={cellwidth=8%};
2721 +  break after page / page;
2722 +  compute before aebodsys;
2723 +    line " ";
2724 +  endcomp;
2725 +run;
2726 +
2727 +ods html close;
2728 +ods listing;
2729 +
2730 +%mpageof;
2731 +
2732 +%if &itprogid ne %then %do;
2733 +
2734 +  %mtitle2(progid=&itprogid, orient=P, type=html);
2735 +
2736 +  proc report data=final headline headskip nowindows split='|' missing spacing=1;
2737 +    column page sorder &aevar ("Age Group (years) \brdrb\brdrs" trt1 trt2 trt3 trt4) trt6;
2738 +    define page /order noprint;
2739 +    define sorder /order noprint;
2740 +    define &aevar / "Preferred Term`{super b}" format=$anyrow. style={just=l cellwidth=20%};
2741 +    define trt1 / "     0 - 2 |     (N=&pop1)|     n (%)" style={cellwidth=8%};
2742 +    define trt2 / "     3 - 6 |     (N=&pop2)|     n (%)" style={cellwidth=8%};
2743 +    define trt3 / "     7 - 11 |     (N=&pop3)|     n (%)" style={cellwidth=8%};
2744 +    define trt4 / "     12 - &up_limit |     (N=&pop4)|     n (%)" style={cellwidth=8%};
2745 +    define trt6 / "     Total |     (N=&pop6)|     n (%)" style={cellwidth=8%};
2746 +    break after page / page;
2747 +/*
2748 +    compute before &aevar;
2749 +      if lag1(&aevar)='Any AE' then line " ";
2750 +    endcomp;
2751 +*/
2752 +  run;
2753 +
2754 +  ods rtf close;
2755 +  ods listing;
2756 +
2757 +  %mpageof;
2758 +
2759 +%end;
2760 +
2761 +%mend rtae;
2762 +
                                                                         The SAS System

2763 +%*** AEs by SOC and Preferred Term;
2764 +%rtae(progid=tae1, tcond=);
MLOGIC(RTAE):  Beginning execution.
MLOGIC(RTAE):  Parameter PROGID has value tae1
MLOGIC(RTAE):  Parameter TCOND has value 
MLOGIC(RTAE):  Parameter AEVAR has value aedecod
MLOGIC(RTAE):  Parameter UP_LIMIT has value 17
MLOGIC(RTAE):  Parameter PROGCOND has value 
MLOGIC(RTAE):  Parameter ITPROGID has value 
MPRINT(RTAE):   data ae;
SYMBOLGEN:  Macro variable DERDATA resolves to derived
MPRINT(RTAE):   set derived.ae(where=(q_safeas='Y' and q_bcond ne 'Y' and aenone ne 'Y' and aete='Y'));
SYMBOLGEN:  Macro variable TCOND resolves to 
MPRINT(RTAE):   ;
SYMBOLGEN:  Macro variable PROGCOND resolves to 
MPRINT(RTAE):   ;
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
MPRINT(RTAE):   if aedecod='' then do;
MPRINT(RTAE):   put "The following AE term has no meddra code: " usubjid= aeterm=;
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
MPRINT(RTAE):   aedecod=aeterm;
MPRINT(RTAE):   end;
MPRINT(RTAE):   output;
MPRINT(RTAE):   if atrt in(2,3,4) then do;
MPRINT(RTAE):   atrt=5;
MPRINT(RTAE):   output;
MPRINT(RTAE):   end;
MPRINT(RTAE):   atrt=6;
MPRINT(RTAE):   output;
MPRINT(RTAE):   run;

NOTE: There were 99 observations read from the data set DERIVED.AE.
      WHERE (q_safeas='Y') and (q_bcond not = 'Y') and (aenone not = 'Y') and (aete='Y');
NOTE: The data set WORK.AE has 254 observations and 43 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MLOGIC(MTOTTRT):  Beginning execution.
MLOGIC(MTOTTRT):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mtottrt.sas
SYMBOLGEN:  Macro variable TCOND resolves to 
MLOGIC(MTOTTRT):  Parameter COND has value if q_safeas'Y'
MLOGIC(MTOTTRT):  Parameter POPTRT has value atrt
MLOGIC(MTOTTRT):  Parameter MPRINTEM has value N
MLOGIC(MTOTTRT):  Parameter INDATA has value &derdata..dm
MLOGIC(MTOTTRT):  %GLOBAL  POP1 POP2 POP3 POP4 POP5 POP6
MLOGIC(MTOTTRT):  %LET (variable name is POP1)
                                                                         The SAS System

MLOGIC(MTOTTRT):  %LET (variable name is POP2)
MLOGIC(MTOTTRT):  %LET (variable name is POP3)
MLOGIC(MTOTTRT):  %LET (variable name is POP4)
MLOGIC(MTOTTRT):  %LET (variable name is POP5)
MLOGIC(MTOTTRT):  %LET (variable name is POP6)
MPRINT(MTOTTRT):   data _ftmp1a;
SYMBOLGEN:  Macro variable INDATA resolves to &derdata..dm
SYMBOLGEN:  Macro variable DERDATA resolves to derived
MPRINT(MTOTTRT):   set derived.dm;
SYMBOLGEN:  Macro variable COND resolves to if q_safeas='Y';
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(MTOTTRT):   if q_safeas='Y';
MPRINT(MTOTTRT):  ;
SYMBOLGEN:  Macro variable POPTRT resolves to atrt
MPRINT(MTOTTRT):   __trt=atrt;
MPRINT(MTOTTRT):   if __trt>.;
MPRINT(MTOTTRT):   run;

NOTE: There were 32 observations read from the data set DERIVED.DM.
NOTE: The data set WORK._FTMP1A has 30 observations and 43 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MTOTTRT):   data _ftmp1;
MPRINT(MTOTTRT):   set _ftmp1a;
MPRINT(MTOTTRT):   output;
MPRINT(MTOTTRT):   if __trt in(2,3,4) then do;
MPRINT(MTOTTRT):   __trt=5;
MPRINT(MTOTTRT):   output;
MPRINT(MTOTTRT):   end;
MPRINT(MTOTTRT):   __trt=6;
MPRINT(MTOTTRT):   *** Total ***;
MPRINT(MTOTTRT):   output;
MPRINT(MTOTTRT):   run;
NOTE: There were 30 observations read from the data set WORK._FTMP1A.
NOTE: The data set WORK._FTMP1 has 79 observations and 43 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MTOTTRT):   proc freq data=_ftmp1 noprint;
MPRINT(MTOTTRT):   tables __trt / out=_ftmp2;
MPRINT(MTOTTRT):   run;

NOTE: There were 79 observations read from the data set WORK._FTMP1.
                                                                         The SAS System

NOTE: The data set WORK._FTMP2 has 6 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MPRINTEM resolves to N
MLOGIC(MTOTTRT):  %IF condition &mprintem=Y is FALSE
MPRINT(MTOTTRT):   data _null_;
MPRINT(MTOTTRT):   set _ftmp2;
MPRINT(MTOTTRT):   call symput(compress('pop'||put(__trt,3.)),compress(put(count,4.)));
MPRINT(MTOTTRT):   run;

NOTE: There were 6 observations read from the data set WORK._FTMP2.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(MTOTTRT):  %PUT pop1 = &pop1
SYMBOLGEN:  Macro variable POP1 resolves to 11
pop1 = 11
MLOGIC(MTOTTRT):  %PUT pop2 = &pop2
SYMBOLGEN:  Macro variable POP2 resolves to 8
pop2 = 8
MLOGIC(MTOTTRT):  %PUT pop3 = &pop3
SYMBOLGEN:  Macro variable POP3 resolves to 3
pop3 = 3
MLOGIC(MTOTTRT):  %PUT pop4 = &pop4
SYMBOLGEN:  Macro variable POP4 resolves to 8
pop4 = 8
MLOGIC(MTOTTRT):  %PUT pop5 = &pop5
SYMBOLGEN:  Macro variable POP5 resolves to 19
pop5 = 19
MLOGIC(MTOTTRT):  %PUT pop6 = &pop6
SYMBOLGEN:  Macro variable POP6 resolves to 30
pop6 = 30
MLOGIC(MTOTTRT):  Ending execution.
MPRINT(RTAE):  ;
MPRINT(RTAE):   data ae;
MPRINT(RTAE):   set ae;
MPRINT(RTAE):   output;
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
MPRINT(RTAE):   if aedecod ne '' then do;
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
MPRINT(RTAE):   aedecod='AAAAB';
MPRINT(RTAE):   output;
MPRINT(RTAE):   aebodsys='Any SOC';
                                                                         The SAS System

MPRINT(RTAE):   output;
MPRINT(RTAE):   end;
MPRINT(RTAE):   run;

NOTE: There were 254 observations read from the data set WORK.AE.
NOTE: The data set WORK.AE has 762 observations and 43 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(RTAE):   proc sort data=ae out=ae nodupkey;
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
MPRINT(RTAE):   by atrt usubjid aebodsys aedecod;
MLOGIC(MFREQ):  Beginning execution.
MLOGIC(MFREQ):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mfreq.sas
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
MLOGIC(MFREQ):  Parameter MFDATA has value ae
MLOGIC(MFREQ):  Parameter MFOUT has value aestats
MLOGIC(MFREQ):  Parameter MFBY has value aebodsys
MLOGIC(MFREQ):  Parameter MFCNTVAR has value aedecod
MLOGIC(MFREQ):  Parameter MFORDER has value 1
MLOGIC(MFREQ):  Parameter MFTRT has value atrt
MLOGIC(MFREQ):  Parameter MFFMT has value 
MLOGIC(MFREQ):  Parameter MFWHERE has value 
MLOGIC(MFREQ):  Parameter MFDEN has value POP
MLOGIC(MFREQ):  Parameter MFPERC has value Y
MLOGIC(MFREQ):  Parameter MFMISS has value 
MLOGIC(MFREQ):  Parameter MFDRNG has value 
MLOGIC(MFREQ):  Parameter MTOTTRT has value &tottrt
MLOGIC(MFREQ):  Parameter MFSPACE has value &trtspace

NOTE: There were 762 observations read from the data set WORK.AE.
NOTE: 220 observations with duplicate key values were deleted.
NOTE: The data set WORK.AE has 542 observations and 43 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MFREQ):   data _null_;
MPRINT(MFREQ):   length table $100;
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MPRINT(MFREQ):   if "atrt" ne " " then table="atrt";
MPRINT(MFREQ):   else table=" ";
SYMBOLGEN:  Macro variable MFBY resolves to aebodsys
SYMBOLGEN:  Macro variable MFBY resolves to aebodsys
                                                                         The SAS System

MPRINT(MFREQ):   if "aebodsys" ne " " then table=trim(table) || ' ' || trim("aebodsys");
MPRINT(MFREQ):   call symput('mfoby',trim(table));
MPRINT(MFREQ):   call symput('mfobyl',reverse(scan(reverse(table),1,' ')));
SYMBOLGEN:  Macro variable MFCNTVAR resolves to aedecod
MPRINT(MFREQ):   table=trim(table) || ' ' || trim("aedecod");
MPRINT(MFREQ):   call symput('mftable',translate(trim(left(table)),'*',' '));
MPRINT(MFREQ):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MFDATA resolves to ae
MPRINT(MFREQ):   proc freq data=ae noprint;
SYMBOLGEN:  Macro variable MFWHERE resolves to 
MLOGIC(MFREQ):  %IF condition &MFWHERE NE is FALSE
SYMBOLGEN:  Macro variable MFTABLE resolves to atrt*aebodsys*aedecod
MPRINT(MFREQ):   tables atrt*aebodsys*aedecod / out=mf2;
MPRINT(MFREQ):   run;

NOTE: There were 542 observations read from the data set WORK.AE.
NOTE: The data set WORK.MF2 has 209 observations and 5 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MFDRNG resolves to 
MLOGIC(MFREQ):  %IF condition &MFDRNG NE is FALSE
MPRINT(MFREQ):   data mf3;
MPRINT(MFREQ):   set mf2;
MPRINT(MFREQ):   run;

NOTE: There were 209 observations read from the data set WORK.MF2.
NOTE: The data set WORK.MF3 has 209 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MFMISS resolves to 
MLOGIC(MFREQ):  %IF condition &MFMISS NE is FALSE
MPRINT(MFREQ):   data mf5;
SYMBOLGEN:  Macro variable MFMISS resolves to 
MLOGIC(MFREQ):  %IF condition &MFMISS NE is FALSE
MPRINT(MFREQ):   merge mf3;
SYMBOLGEN:  Macro variable MFOBY resolves to atrt aebodsys
                                                                         The SAS System

MPRINT(MFREQ):   by atrt aebodsys;
SYMBOLGEN:  Macro variable MFDEN resolves to POP
MLOGIC(MFREQ):  %IF condition &MFDEN ne is TRUE
SYMBOLGEN:  Macro variable MTOTTRT resolves to &tottrt
SYMBOLGEN:  Macro variable TOTTRT resolves to 6
MLOGIC(MFREQ):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable POP1 resolves to 11
MPRINT(MFREQ):   if atrt=1 then denom=11;
MLOGIC(MFREQ):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable POP2 resolves to 8
MPRINT(MFREQ):   if atrt=2 then denom=8;
MLOGIC(MFREQ):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable POP3 resolves to 3
MPRINT(MFREQ):   if atrt=3 then denom=3;
MLOGIC(MFREQ):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable POP4 resolves to 8
MPRINT(MFREQ):   if atrt=4 then denom=8;
MLOGIC(MFREQ):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable POP5 resolves to 19
MPRINT(MFREQ):   if atrt=5 then denom=19;
MLOGIC(MFREQ):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
SYMBOLGEN:  Macro variable I resolves to 6
                                                                         The SAS System

SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFDEN resolves to POP
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable POP6 resolves to 30
MPRINT(MFREQ):   if atrt=6 then denom=30;
MLOGIC(MFREQ):  %DO loop index variable I is now 7; loop will not iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((count/denom*100),perc.) ||'%)');
MPRINT(MFREQ):   length disp $50;
SYMBOLGEN:  Macro variable MFMISS resolves to 
MLOGIC(MFREQ):  %IF condition &MFMISS NE is FALSE
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if count >= 0 then disp=put(count,4.) || ' ' || right(perc);
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
MPRINT(MFREQ):   else disp=put(count,4.);
MPRINT(MFREQ):   run;

NOTE: There were 209 observations read from the data set WORK.MF3.
NOTE: The data set WORK.MF5 has 209 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(MFREQ):   proc sort data=mf5;
SYMBOLGEN:  Macro variable MFBY resolves to aebodsys
SYMBOLGEN:  Macro variable MFCNTVAR resolves to aedecod
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MPRINT(MFREQ):   by aebodsys aedecod atrt;
MPRINT(MFREQ):   run;

NOTE: There were 209 observations read from the data set WORK.MF5.
NOTE: The data set WORK.MF5 has 209 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MLOGIC(MFREQ):  %IF condition &MFTRT NE is TRUE
MPRINT(MFREQ):   proc transpose data=mf5 out=mf6 prefix=trt;
                                                                         The SAS System

SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MPRINT(MFREQ):   id atrt;
SYMBOLGEN:  Macro variable MFBY resolves to aebodsys
SYMBOLGEN:  Macro variable MFCNTVAR resolves to aedecod
MPRINT(MFREQ):   by aebodsys aedecod;
MPRINT(MFREQ):   var disp;
MPRINT(MFREQ):   run;

NOTE: There were 209 observations read from the data set WORK.MF5.
NOTE: The data set WORK.MF6 has 63 observations and 9 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MFOUT resolves to aestats
MPRINT(MFREQ):   data aestats;
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MLOGIC(MFREQ):  %IF condition &MFTRT NE is TRUE
SYMBOLGEN:  Macro variable MTOTTRT resolves to &tottrt
SYMBOLGEN:  Macro variable TOTTRT resolves to 6
MLOGIC(MFREQ):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(MFREQ):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 2
MLOGIC(MFREQ):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 3
MLOGIC(MFREQ):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 4
MLOGIC(MFREQ):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 5
MLOGIC(MFREQ):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable I resolves to 6
MLOGIC(MFREQ):  %DO loop index variable I is now 7; loop will not iterate again.
MPRINT(MFREQ):   length trt1 trt2 trt3 trt4 trt5 trt6 $50;
MPRINT(MFREQ):   set mf6;
SYMBOLGEN:  Macro variable MFORDER resolves to 1
MPRINT(MFREQ):   order=1;
SYMBOLGEN:  Macro variable MFCNTVAR resolves to aedecod
MLOGIC(MFREQ):  %IF condition &MFCNTVAR NE is TRUE
SYMBOLGEN:  Macro variable MFCNTVAR resolves to aedecod
MPRINT(MFREQ):   sorder=aedecod;
MPRINT(MFREQ):   length text $200;
MPRINT(MFREQ):   text='';
SYMBOLGEN:  Macro variable MFFMT resolves to 
MLOGIC(MFREQ):  %IF condition &MFFMT NE is FALSE
SYMBOLGEN:  Macro variable MFTRT resolves to atrt
MLOGIC(MFREQ):  %IF condition &MFTRT NE is TRUE
                                                                         The SAS System

SYMBOLGEN:  Macro variable MTOTTRT resolves to &tottrt
SYMBOLGEN:  Macro variable TOTTRT resolves to 6
MLOGIC(MFREQ):  %DO loop beginning; index variable I; start value is 1; stop value is 6; by value is 1.  
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt1='' then trt1=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt2='' then trt2=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt3='' then trt3=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  Macro variable I resolves to 4
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
                                                                         The SAS System

MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt4='' then trt4=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  Macro variable I resolves to 5
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt5='' then trt5=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   perc=compress('(' || put((0/1*100),perc.) ||'%)');
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  Macro variable I resolves to 6
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable MFSPACE resolves to &trtspace
SYMBOLGEN:  Macro variable TRTSPACE resolves to 4
SYMBOLGEN:  Macro variable MFPERC resolves to Y
MLOGIC(MFREQ):  %IF condition &MFPERC=Y is TRUE
MPRINT(MFREQ):   if trt6='' then trt6=put(0,4.) || ' ' || right(perc) ;
MLOGIC(MFREQ):  %DO loop index variable I is now 7; loop will not iterate again.
SYMBOLGEN:  Macro variable MFMISS resolves to 
MLOGIC(MFREQ):  %IF condition &MFMISS NE is FALSE
MPRINT(MFREQ):   run;

NOTE: There were 63 observations read from the data set WORK.MF6.
NOTE: The data set WORK.AESTATS has 63 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MLOGIC(MFREQ):  Ending execution.
MPRINT(RTAE):  ;
MPRINT(RTAE):   proc sort data=aestats;
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
MPRINT(RTAE):   by aebodsys aedecod;
NOTE: There were 63 observations read from the data set WORK.AESTATS.
NOTE: The data set WORK.AESTATS has 63 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
                                                                         The SAS System

      

MPRINT(RTAE):   data final;
MPRINT(RTAE):   set aestats;
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
MPRINT(RTAE):   by aebodsys aedecod;
MPRINT(RTAE):   length page 4;
MPRINT(RTAE):   retain page;
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
MPRINT(RTAE):   if first.aedecod then page=floor(_n_/15)+1;
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
MPRINT(RTAE):   if aedecod='AAAAB' then aedecod="Any AE";
MPRINT(RTAE):   run;

NOTE: There were 63 observations read from the data set WORK.AESTATS.
NOTE: The data set WORK.FINAL has 63 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(MNUMOBS):  Beginning execution.
MLOGIC(MNUMOBS):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mnumobs.sas
MLOGIC(MNUMOBS):  Parameter INDS has value final
MLOGIC(MNUMOBS):  %GLOBAL  NOBS
SYMBOLGEN:  Macro variable INDS resolves to final
MLOGIC(MNUMOBS):  %IF condition &inds= is FALSE
MPRINT(MNUMOBS):   proc sql noprint;
SYMBOLGEN:  Macro variable INDS resolves to final
MPRINT(MNUMOBS):   select nobs into :nobs separated by ' ' from dictionary.tables where libname='WORK' and memname="FINAL";
MPRINT(MNUMOBS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(MNUMOBS):  Ending execution.
MPRINT(RTAE):  ;
MLOGIC(NUMOBS):  Beginning execution.
SYMBOLGEN:  Macro variable NOBS resolves to 63
MLOGIC(NUMOBS):  %IF condition &nobs=1 is FALSE
MLOGIC(NUMOBS):  Ending execution.
MPRINT(RTAE):  ;
MPRINT(RTAE):   proc sort data=final;
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
MPRINT(RTAE):   by page aebodsys aedecod;
MLOGIC(MTITLE):  Beginning execution.
                                                                         The SAS System

MLOGIC(MTITLE):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mtitle.sas
SYMBOLGEN:  Macro variable PROGID resolves to tae1
MLOGIC(MTITLE):  Parameter PROGID has value tae1
MLOGIC(MTITLE):  Parameter TYPE has value html
MLOGIC(MTITLE):  Parameter ORIENT has value l
MLOGIC(MTITLE):  Parameter SASOPT has value nodate nonumber nobyline
MLOGIC(MTITLE):  Parameter BYVAR has value 
MLOGIC(MTITLE):  Parameter BYTXT has value 
MLOGIC(MTITLE):  Parameter TMNAME has value rtf
MLOGIC(MTITLE):  Parameter NOPAGE has value n
SYMBOLGEN:  Macro variable SASOPT resolves to nodate nonumber nobyline
MLOGIC(MTITLE):  %IF condition &sasopt ne is TRUE
SYMBOLGEN:  Macro variable SASOPT resolves to nodate nonumber nobyline
MPRINT(MTITLE):   options nodate nonumber nobyline;
MLOGIC(MTITLE):  %GLOBAL  OUTPUTNAME  
MPRINT(MTITLE):   options mprint;
MLOGIC(MTITLE):  %LET (variable name is MLS)
SYMBOLGEN:  Macro variable ORIENT resolves to l
MLOGIC(MTITLE):  %IF condition %upcase(&orient)=P is FALSE
MLOGIC(MTITLE):  %LET (variable name is ORIENTO)
SYMBOLGEN:  Macro variable ORIENTO resolves to Landscape
MPRINT(MTITLE):   options orientation=Landscape;
MLOGIC(MTITLE):  %GLOBAL  TABLNO NUMTITLE FOOTN1 FOOTN2 FOOTN3 FOOTN4 FOOTN5 FOOTN6 FOOTN7 FOOTN8 FOOTN9 SPAGENO SFOOTN1 SFOOTN2 SFOOTN3 SFOOTN8 SFOOTN9 
      SFOOTN10 SDATA NUMFOOT OUTPUTNAME         TABNUM TITLE1 TITLE2 TITLE3 TITLE4 TITLE5 TITLE6 OUTPUTF L_SOURCE  FOOTN11
MLOGIC(MTITLE):  %LET (variable name is FSTLN)
MLOGIC(MTITLE):  %LET (variable name is CHGLN)
MLOGIC(MTITLE):  %LET (variable name is FOOTBR)

NOTE: There were 63 observations read from the data set WORK.FINAL.
NOTE: The data set WORK.FINAL has 63 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MTITLE):   data toc_prog;
SYMBOLGEN:  Macro variable DERDATA resolves to derived
MPRINT(MTITLE):   set derived.toc_prog;
NOTE: Data file DERIVED.TOC_PROG.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. Cross 
      Environment Data Access will be used, which might require additional CPU resources and might reduce performance.
SYMBOLGEN:  Macro variable PROGID resolves to tae1
MPRINT(MTITLE):   if compress(upcase(progid))=upcase("tae1");
MPRINT(MTITLE):   call symput('tabnum',trim(tabnum));
MPRINT(MTITLE):   if index(title1,'`{') then offset=9;
MPRINT(MTITLE):   else offset=0;
SYMBOLGEN:  Macro variable MLS resolves to 170
MPRINT(MTITLE):   call symput('title1',trim(title1)||repeat(" ",(170-length(title1)-length(tabnum)-30-4+offset))||"[Page_00000_of_99999]");
MPRINT(MTITLE):   call symput('title2',trim(title2));
                                                                         The SAS System

MPRINT(MTITLE):   call symput('title3',trim(title3));
MPRINT(MTITLE):   call symput('title4',trim(title4));
MPRINT(MTITLE):   call symput('title5',trim(title5));
MPRINT(MTITLE):   call symput('title6',trim(title6));
MPRINT(MTITLE):   call symput('outputname',trim(outname));
MPRINT(MTITLE):   call symput('numtitle',compress(put(numtitle,3.)));
MPRINT(MTITLE):   call symput('footn1',trim(footn1));
MPRINT(MTITLE):   call symput('footn2',trim(footn2));
MPRINT(MTITLE):   call symput('footn3',trim(footn3));
MPRINT(MTITLE):   call symput('footn4',trim(footn4));
MPRINT(MTITLE):   call symput('footn5',trim(footn5));
MPRINT(MTITLE):   call symput('footn6',trim(footn6));
MPRINT(MTITLE):   call symput('footn7',trim(footn7));
MPRINT(MTITLE):   call symput('footn8',trim(footn8));
MPRINT(MTITLE):   call symput('progname',trim(progname));
SYMBOLGEN:  Macro variable DRAFT_FINAL resolves to FINAL
SYMBOLGEN:  Macro variable SYSDATE9 resolves to 21JAN2025
SYMBOLGEN:  Macro variable SYSTIME resolves to 18:08
MPRINT(MTITLE):   if l_source ne '' then footn11="PROGRAM: " || trim(progname) || ".sas, " || "SOURCE: " || trim(l_source) || ", (FINAL) 21JAN2025 18:08";
SYMBOLGEN:  Macro variable DRAFT_FINAL resolves to FINAL
SYMBOLGEN:  Macro variable SYSDATE9 resolves to 21JAN2025
SYMBOLGEN:  Macro variable SYSTIME resolves to 18:08
MPRINT(MTITLE):   else footn11="PROGRAM: " || trim(progname) || ".sas, (FINAL) 21JAN2025 18:08";
MPRINT(MTITLE):   footn11l=trim(footn11);
MPRINT(MTITLE):   call symput('footn11',trim(footn11l));
MPRINT(MTITLE):   call symput('numfoot',compress(put(numfoot,3.)));
SYMBOLGEN:  Macro variable TYPE resolves to html
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition &TYPE=LST or &TYPE=PS is FALSE
SYMBOLGEN:  Macro variable BYVAR resolves to 
MLOGIC(MTITLE):  %IF condition &BYVAR NE is FALSE
MPRINT(MTITLE):   if index(tabnum,'Table') then call symput('outputf','tables');
MPRINT(MTITLE):   else if index(tabnum,'Appendix') then call symput('outputf','listings');
MPRINT(MTITLE):   else if index(tabnum,'Figure') then call symput('outputf','figures');
SYMBOLGEN:  Macro variable ORIENT resolves to l
MLOGIC(MTITLE):  %IF condition %UPCASE(&ORIENT)=P is FALSE
MPRINT(MTITLE):   run;

NOTE: There were 110 observations read from the data set DERIVED.TOC_PROG.
NOTE: The data set WORK.TOC_PROG has 1 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MLOGIC(MTITLE):  %LET (variable name is NUMOBS)
MPRINT(MTITLE):   proc sql noprint;
MPRINT(MTITLE):   select count(*) into: numobs from toc_prog;
                                                                         The SAS System

MPRINT(MTITLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(MTITLE):  %GLOBAL  _OUTPUTNAME
MLOGIC(MTITLE):  %LET (variable name is _OUTPUTNAME)
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to tables
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to t14_03_01_05_tae1
SYMBOLGEN:  Macro variable NUMOBS resolves to        1
MLOGIC(MTITLE):  %IF condition &numobs=0 is FALSE
SYMBOLGEN:  Macro variable NUMOBS resolves to        1
MLOGIC(MTITLE):  %IF condition &numobs>1 is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=RTF is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=HTML is TRUE
MPRINT(MTITLE):   ods listing close;
MPRINT(MTITLE):   ods path sashelp.tmplmst;
MPRINT(MTITLE):   * &derdata..matt;
SYMBOLGEN:  Macro variable TYPE resolves to html
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to tables
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to t14_03_01_05_tae1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MTITLE):   ods html file="/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_03_01_05_tae1.html";
NOTE: Writing HTML Body file: /nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_03_01_05_tae1.html
MPRINT(MTITLE):   options linesize=160 pagesize=50;
SYMBOLGEN:  Macro variable PTITLE1 resolves to ABCD, Inc.
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(MTITLE):   title1 j=l "ABCD, Inc.";
SYMBOLGEN:  Macro variable PTITLE2 resolves to XMB-111 Draft
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(MTITLE):   title2 j=l "XMB-111 Draft";
SYMBOLGEN:  Macro variable TABNUM resolves to Table 14.3.1-5
SYMBOLGEN:  Macro variable TITLE1 resolves to Adverse Events by System Organ Class and Preferred Term                                                           
                     [Page_00000_of_99999]
MPRINT(MTITLE):   title4 j=l "Table 14.3.1-5:  Adverse Events by System Organ Class and Preferred Term                                                          
          [Page_00000_of_99999]";
SYMBOLGEN:  Macro variable NUMTITLE resolves to 1
MLOGIC(MTITLE):  %DO loop beginning; index variable I; start value is 2; stop value is 1; by value is 1.  Loop will not be executed.
SYMBOLGEN:  Macro variable BYVAR resolves to 
MLOGIC(MTITLE):  %IF condition &byvar ne is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=RTF is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
                                                                         The SAS System

MLOGIC(MTITLE):  %IF condition %upcase(&type)=LST is FALSE
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MTITLE):  %IF condition %upcase(&type)=HTML is TRUE
SYMBOLGEN:  Macro variable FOOTBR resolves to ''
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NUMFOOT resolves to 1
MLOGIC(MTITLE):  %IF condition &numfoot ne 0 is TRUE
SYMBOLGEN:  Macro variable NUMFOOT resolves to 1
MLOGIC(MTITLE):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is 1.  
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable FOOTN1 resolves to `{super a}MedDRA version 12.1
WARNING: The FOOTNOTE statement is ambiguous due to invalid options or unquoted text.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable NUMFOOT resolves to 1
MLOGIC(MTITLE):  %IF condition &i ^= &numfoot is FALSE
MLOGIC(MTITLE):  %DO loop index variable I is now 2; loop will not iterate again.
MPRINT(MTITLE):   footnote1 j=left '' "`{super a}MedDRA version 12.1";
MPRINT(MTITLE):   footnote2 " ";
SYMBOLGEN:  Macro variable FOOTN11 resolves to PROGRAM: rtae.sas, (FINAL) 21JAN2025 18:08
MPRINT(MTITLE):   footnote3 j=l "PROGRAM: rtae.sas, (FINAL) 21JAN2025 18:08";
MLOGIC(MTITLE):  Ending execution.
MPRINT(RTAE):  ;
MPRINT(RTAE):   proc report data=final headline headskip nowindows split='|' missing spacing=1;
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
MPRINT(RTAE):   column page aebodsys sorder aedecod ("Age Group (years) \brdrb\brdrs" trt1 trt2 trt3 trt4 trt5) trt6;
MPRINT(RTAE):   define page /order noprint;
MPRINT(RTAE):   define aebodsys /order "SOC`{super a}" format=$anyrow. style={just=l cellwidth=20%};
MPRINT(RTAE):   define sorder /order noprint;
SYMBOLGEN:  Macro variable PROGID resolves to tae1
SYMBOLGEN:  Macro variable PROGID resolves to tae1
MLOGIC(RTAE):  %IF condition &progid=tae1 or &progid=tae2 is TRUE
SYMBOLGEN:  Macro variable AEVAR resolves to aedecod
MPRINT(RTAE):   define aedecod / "Preferred Term`{super a}" format=$anyrow. style={just=l cellwidth=20%};
SYMBOLGEN:  Macro variable POP1 resolves to 11
MPRINT(RTAE):   define trt1 / "     0 - 2 |     (N=11)|     n (%)" style={cellwidth=8%};
SYMBOLGEN:  Macro variable POP2 resolves to 8
MPRINT(RTAE):   define trt2 / "     3 - 6 |     (N=8)|     n (%)" style={cellwidth=8%};
SYMBOLGEN:  Macro variable POP3 resolves to 3
MPRINT(RTAE):   define trt3 / "     7 - 11 |     (N=3)|     n (%)" style={cellwidth=8%};
SYMBOLGEN:  Macro variable UP_LIMIT resolves to 17
SYMBOLGEN:  Macro variable POP4 resolves to 8
MPRINT(RTAE):   define trt4 / "     12 - 17 |     (N=8)|     n (%)" style={cellwidth=8%};
SYMBOLGEN:  Macro variable UP_LIMIT resolves to 17
SYMBOLGEN:  Macro variable POP5 resolves to 19
MPRINT(RTAE):   define trt5 / "     3 - 17 Total |     (N=19)|     n (%)" style={cellwidth=8%};
SYMBOLGEN:  Macro variable POP6 resolves to 30
MPRINT(RTAE):   define trt6 / "     Total |     (N=30)|     n (%)" style={cellwidth=8%};
                                                                         The SAS System

MPRINT(RTAE):   break after page / page;
MPRINT(RTAE):   compute before aebodsys;
MPRINT(RTAE):   line " ";
MPRINT(RTAE):   endcomp;
MPRINT(RTAE):   run;

NOTE: There were 63 observations read from the data set WORK.FINAL.
NOTE: PROCEDURE REPORT used (Total process time):
      real time           1.15 seconds
      cpu time            0.13 seconds
      

MPRINT(RTAE):   ods html close;
MPRINT(RTAE):   ods listing;
MLOGIC(MPAGEOF):  Beginning execution.
MLOGIC(MPAGEOF):  This macro was compiled from the autocall file /nfsshare/sashls2/mattb/XMB111/macros/mpageof.sas
MLOGIC(MPAGEOF):  Parameter INFILE has value "&output/&outputf/&outputname..&type"
MLOGIC(MPAGEOF):  Parameter OUTFILE has value "&output/&outputf/&outputname..&type"
MLOGIC(MPAGEOF):  Parameter TYPE has value html
MLOGIC(MPAGEOF):  Parameter TEXT has value [Page_00000_of_99999]
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MPAGEOF):  %IF condition %upcase(&type)^=LST is TRUE
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   ods html close;
MPRINT(MPAGEOF):   data _null_;
SYMBOLGEN:  Macro variable INFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to tables
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to t14_03_01_05_tae1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_03_01_05_tae1.html" lrecl=32767 end=_eof;
MPRINT(MPAGEOF):   input;
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   if index(_infile_,"[Page_00000_of_99999]") then pageno + 1;
MPRINT(MPAGEOF):   if _eof then call symput('NUMPAGES',compress(put(pageno,14.)));
MPRINT(MPAGEOF):   run;

NOTE: The infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_03_01_05_tae1.html" is:
      Filename=/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_03_01_05_tae1.html,
      Owner Name=UNKNOWN,Group Name=UNKNOWN,
      Access Permission=-rwxrwxrwx,
      Last Modified=21Jan2025:13:08:24,
      File Size (bytes)=77191

NOTE: 2649 records were read from the infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_03_01_05_tae1.html".
      The minimum record length was 0.
      The maximum record length was 193.
NOTE: DATA statement used (Total process time):
                                                                         The SAS System

      real time           0.01 seconds
      cpu time            0.00 seconds
      

MLOGIC(MPAGEOF):  %LOCAL  NUMPAGEL LPAGEOF
MLOGIC(MPAGEOF):  %LET (variable name is NUMPAGEL)
SYMBOLGEN:  Macro variable NUMPAGES resolves to 5
MLOGIC(MPAGEOF):  %LET (variable name is LPAGEOF)
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   data _null_;
SYMBOLGEN:  Macro variable INFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to tables
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to t14_03_01_05_tae1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_03_01_05_tae1.html" lrecl=32767 end=_eof;
SYMBOLGEN:  Macro variable LPAGEOF resolves to 21
MPRINT(MPAGEOF):   length pageof $ 21;
MPRINT(MPAGEOF):   input ;
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   if index(_infile_,"[Page_00000_of_99999]") then do;
MPRINT(MPAGEOF):   pageno + 1;
SYMBOLGEN:  Macro variable NUMPAGEL resolves to 1
SYMBOLGEN:  Macro variable NUMPAGES resolves to 5
MPRINT(MPAGEOF):   pageof = 'Page '|| put(pageno,1.) ||" of 5";
MPRINT(MPAGEOF):   pageof = compbl(pageof);
MPRINT(MPAGEOF):   pageof = right(pageof);
MPRINT(MPAGEOF):   pad="";
SYMBOLGEN:  Macro variable TEXT resolves to [Page_00000_of_99999]
MPRINT(MPAGEOF):   _infile_ = tranwrd(_infile_,"[Page_00000_of_99999]",pageof);
MPRINT(MPAGEOF):   end;
SYMBOLGEN:  Macro variable OUTFILE resolves to "&output/&outputf/&outputname..&type"
SYMBOLGEN:  Macro variable OUTPUT resolves to /nfsshare/sashls2/mattb/XMB111/programs/Output
SYMBOLGEN:  Macro variable OUTPUTF resolves to tables
SYMBOLGEN:  Macro variable OUTPUTNAME resolves to t14_03_01_05_tae1
SYMBOLGEN:  Macro variable TYPE resolves to html
MPRINT(MPAGEOF):   file "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_03_01_05_tae1.html" noprint lrecl=32767;
MPRINT(MPAGEOF):   put _infile_;
SYMBOLGEN:  Macro variable TYPE resolves to html
MLOGIC(MPAGEOF):  %IF condition &type=PDF is FALSE
MPRINT(MPAGEOF):   run;

NOTE: The file/infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_03_01_05_tae1.html" is:
      Filename=/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_03_01_05_tae1.html,
      Owner Name=UNKNOWN,Group Name=UNKNOWN,
      Access Permission=-rwxrwxrwx,
      Last Modified=21Jan2025:13:08:24,
      File Size (bytes)=77191
                                                                         The SAS System


NOTE: 2649 records were read from the infile "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_03_01_05_tae1.html".
      The minimum record length was 0.
      The maximum record length was 193.
NOTE: 2649 records were written to the file "/nfsshare/sashls2/mattb/XMB111/programs/Output/tables/t14_03_01_05_tae1.html".
      The minimum record length was 0.
      The maximum record length was 193.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MLOGIC(MPAGEOF):  Ending execution.
MPRINT(RTAE):  ;
SYMBOLGEN:  Macro variable ITPROGID resolves to 
MLOGIC(RTAE):  %IF condition &itprogid ne is FALSE
MLOGIC(RTAE):  Ending execution.
2765 +%*rtae(progid=tae2, tcond=%str(if age<17), up_limit=16);
2766 +
2767 +%*** Treatment-Related AEs by SOC and Preferred Term;
2768 +%*rtae(progid=tae3, tcond=, progcond=%str(if aetrtrel='Y'), itprogid=tae9a);
2769 +%*rtae(progid=tae4, tcond=%str(if age<17), up_limit=16, progcond=%str(if aetrtrel='Y'), itprogid=tae9b);
NOTE: %INCLUDE (level 1) ending.
2770   filename _flw_pr clear;
NOTE: Fileref _FLW_PR has been deassigned.
2771   
2772   /* region: Generated macro cleanup */
2773   %symdel _inputCount / nowarn;
2774   %symdel _outputCount / nowarn;
2775   %symdel _input1 / nowarn;
2776   %symdel _output1 / nowarn;
2777   
2778   /* endregion */
2779   
2780   
2781   /* region: Generated step cleanup for rtae.sas */
2782   %_flw_action_end(id-1728966431847-1067, WORK._flw1728966431847106_0_0_7, WORK, "_flw1728966431847106_0_0_7");
MLOGIC(_FLW_ACTION_END):  Beginning execution.
MLOGIC(_FLW_ACTION_END):  Parameter NODES has value id-1728966431847-1067
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_LIBS has value WORK._flw1728966431847106_0_0_7
MLOGIC(_FLW_ACTION_END):  Parameter LIBS has value WORK
MLOGIC(_FLW_ACTION_END):  Parameter TABLE_NAMES has value "_flw1728966431847106_0_0_7"
MPRINT(_FLW_ACTION_END):   data _null_;
MPRINT(_FLW_ACTION_END):   attrib next_table_name length = $32 informat = $32. format = $32. dtStartStr length = $26 informat = $26. format = $26.;
MLOGIC(_FLW_ACTION_END):  %LOCAL  I NEXT_TABLE
SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966431847106_0_0_7
MLOGIC(_FLW_ACTION_END):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is 1.  
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE)
                                                                         The SAS System

SYMBOLGEN:  Macro variable TABLE_LIBS resolves to WORK._flw1728966431847106_0_0_7
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_LIB)
SYMBOLGEN:  Macro variable LIBS resolves to WORK
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(_FLW_ACTION_END):  %LET (variable name is NEXT_TABLE_NAME)
SYMBOLGEN:  Macro variable TABLE_NAMES resolves to "_flw1728966431847106_0_0_7"
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable NEXT_TABLE_NAME resolves to "_flw1728966431847106_0_0_7"
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(_FLW_ACTION_END):   next_table_name = kreverse(ksubstr(kreverse(ksubstr(kstrip(""_flw1728966431847106_0_0_7""),2)),2));
MLOGIC(_FLW_ACTION_END):  %LET (variable name is TABLE_EXISTS)
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966431847106_0_0_7
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_TABLE resolves to WORK._flw1728966431847106_0_0_7
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NEXT_LIB resolves to WORK
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable TABLE_EXISTS resolves to 0
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_TABLE_|WORK|" next_table_name +(-1) "|0";
MLOGIC(_FLW_ACTION_END):  %DO loop index variable I is now 2; loop will not iterate again.
MPRINT(_FLW_ACTION_END):   dtStartStr = put(datetime(), E8601DZ.);
SYMBOLGEN:  Macro variable NODES resolves to id-1728966431847-1067
MPRINT(_FLW_ACTION_END):   put "_FLW_ACTION_END_|" dtStartStr +(-1) "|id-1728966431847-1067";
MPRINT(_FLW_ACTION_END):   run;

_FLW_ACTION_TABLE_|WORK|_flw1728966431847106_0_0_7|0
_FLW_ACTION_END_|2025-01-21T13:08:25+00:00|id-1728966431847-1067
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(_FLW_ACTION_END):  Ending execution.
2783   /* endregion */
2784   
2785   /* region: Generated flow cleanup */
2786   %sysmacdelete _flw_action_start;
SYMBOLGEN:  Macro variable GRAPHTERM resolves to goptions noaccessible;
2787   %sysmacdelete _flw_action_end;
2788   
2789   /* region: Generated postamble */
2790   /* Close ODS destinations */
2791   &graphterm; ;*';*";*/;run;quit;
2792   quit;run;
2793   ods html5 (id=web) close;
2794   %if %sysfunc(fileref(_gsfname)) lt 0 %then %do;
2795       filename _gsfname clear;
                                                                         The SAS System

NOTE: Fileref _GSFNAME has been deassigned.
2796   %end;
2797   %studio_capture_background_log;
MLOGIC(STUDIO_CAPTURE_BACKGROUND_LOG):  Beginning execution.
MLOGIC(STUDIO_CAPTURE_BACKGROUND_LOG):  %LET (variable name is _STUDIOSYNTAXCHECK)
MPRINT(STUDIO_CAPTURE_BACKGROUND_LOG):   options nosyntaxcheck;
MLOGIC(STUDIO_CAPTURE_BACKGROUND_LOG):  %LET (variable name is _URL_TEMPLATE)
MLOGIC(STUDIO_CAPTURE_BACKGROUND_LOG):  %LET (variable name is _URL_BASE)
SYMBOLGEN:  Macro variable _URL_TEMPLATE resolves to https://@k8s.service.name@
SYMBOLGEN:  Macro variable _URL_BASE resolves to https://sas-compute
SYMBOLGEN:  Macro variable SYS_COMPUTE_SESSION_ID resolves to dbd66912-f853-4d3a-90a5-23762a6c7335-ses0000
SYMBOLGEN:  Macro variable SYS_COMPUTE_JOB_ID resolves to 7E720B6B-8049-BC4C-AFDA-2CFAC95CEE69
MPRINT(STUDIO_CAPTURE_BACKGROUND_LOG):   proc http 
url="https://sas-compute/compute/sessions/dbd66912-f853-4d3a-90a5-23762a6c7335-ses0000/jobs/7E720B6B-8049-BC4C-AFDA-2CFAC95CEE69/log" oauth_bearer = 
sas_services method='get' out=_logout;
MPRINT(STUDIO_CAPTURE_BACKGROUND_LOG):   headers 'accept'='text/plain';
MPRINT(STUDIO_CAPTURE_BACKGROUND_LOG):   quit;

